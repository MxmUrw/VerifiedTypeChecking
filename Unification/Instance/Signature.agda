
module Verification.Unification.Instance.Signature where

open import Verification.Conventions hiding (k)
open import Verification.Core.Category
open import Verification.Core.Order
open import Verification.Core.Type
open import Verification.Core.Category.Monad
open import Verification.Core.Category.Instance.Kleisli
open import Verification.Core.Category.Instance.IdxSet
open import Verification.Unification.RecAccessible

open import Verification.Core.Syntax.SignatureZ

instance
  IDiscreteStr:Vec : ‚àÄ{A : ùí∞ ùëñ} {{_ : IDiscreteStr A}} -> IDiscreteStr (Vec A n)
  (IDiscreteStr:Vec IDiscreteStr.‚âü-Str a) b = {!!}

  IDiscreteStr:‚Ñï : IDiscreteStr ‚Ñï
  IDiscreteStr:‚Ñï = {!!}


module _ {K : ùí∞‚ÇÄ} {{_ : IDiscreteStr K}} where

  module _ {œÉ : Signature} where
    private
      variable k : K
               ks : Vec K n
               -- j : K

    module _ {{_ : ‚àÄ{n k} {ks : Vec K (suc n)} -> IDiscreteStr (œÉ k ks)}} where

    -- private
    --   ùíû : Category _
    --   ùíû = ` IdxSet (Maybe K) ‚Ñì‚ÇÄ `

    -- data SigEdge : (a b : Maybe K) -> ùí∞‚ÇÄ where
    --   e-arg : ‚àÄ {k} {ks : Vec K (suc n)} -> (i : Fin-R n) -> œÉ k ks -> SigEdge (just (lookup i ks)) (just k)
    --   e-noarg : ‚àÄ{k} -> œÉ k [] -> SigEdge nothing (just k)

      data SigEdge : (a b : K) -> ùí∞‚ÇÄ where
        edge : ‚àÄ {k} {ks : Vec K (suc n)} -> (i : Fin-R (suc n)) -> œÉ k ks -> SigEdge (lookup i ks) k
        fail : ‚àÄ{a : K} -> SigEdge a a

      ùëÑ : Quiver ‚ä•
      ‚ü® ùëÑ ‚ü© = K
      IQuiver.Edge (of ùëÑ) = SigEdge
      IQuiver._‚âà_ (of ùëÑ) = _‚â°_
      IQuiver.IEquivInst (of ùëÑ) = IEquiv:Path

      -- compare-sig : ‚àÄ{k j‚ÇÅ j‚ÇÇ : K} -> {n‚ÇÅ n‚ÇÇ : ‚Ñï} -> (s )

      module _ {V : K -> ùí∞‚ÇÄ} where
        lookup-Term : ‚àÄ{ks : Vec K (n)} -> (i : Fin-R (n)) -> Terms œÉ V ks -> Term œÉ V (lookup i ks)
        lookup-Term zero    (t ‚à∑ ts) = t
        lookup-Term (suc i) (t ‚à∑ ts) = lookup-Term i ts

        lookup-Term-try : ‚àÄ(n‚ÇÅ n‚ÇÇ : ‚Ñï) (ks‚ÇÅ : Vec K (suc n‚ÇÅ)) (ks‚ÇÇ : Vec K (suc n‚ÇÇ)) (s‚ÇÅ : œÉ k ks‚ÇÅ) (s‚ÇÇ : œÉ k ks‚ÇÇ) (i : Fin-R (suc n‚ÇÇ)) (ts : Terms œÉ V ks‚ÇÅ) -> Maybe (Term œÉ V (lookup i ks‚ÇÇ))
        lookup-Term-try n‚ÇÅ n‚ÇÇ ks‚ÇÅ ks‚ÇÇ s‚ÇÅ s‚ÇÇ i ts with (n‚ÇÅ ‚âü-Str n‚ÇÇ)
        ... | no ¬¨p = nothing
        ... | yes refl-StrId with (ks‚ÇÅ ‚âü-Str ks‚ÇÇ)
        ... | no ¬¨p = nothing
        ... | yes refl-StrId with (s‚ÇÅ ‚âü-Str s‚ÇÇ)
        ... | no ¬¨p = nothing
        ... | yes refl-StrId = right (lookup-Term i ts)

      -- [Theorem]
      -- | The |Monad:TermZ| is recursively accessible.
      interleaved mutual
        RecAccessible:TermZ : IRecAccessible (Monad:TermZ œÉ)

        -- | First we build the decomposition function:
        decomp : {k : K} {V : K -> ùí∞‚ÇÄ} -> TermZ œÉ V k -> (‚àÄ(j : K) -> SigEdge j k -> Maybe (TermZ œÉ V j))
        decomp fail _ _ = right fail
        decomp (valid (te t ts)) = {!!}
        decomp (valid (var x)) = {!!}

        -- decomp {k = k} (te {n = n‚ÇÅ} {ks = ks‚ÇÅ} s‚ÇÅ ts) = right f
        --   where
        --     f : (j : K) ‚Üí SigEdge j k ‚Üí Maybe (Term œÉ V j)
        --     f .(lookup i _) (edge {n = n‚ÇÇ} {ks = ks‚ÇÇ} i s‚ÇÇ) with (n‚ÇÅ ‚âü-Str n‚ÇÇ)
        --     ... | no ¬¨p = nothing
        --     ... | yes refl-StrId with (ks‚ÇÅ ‚âü-Str ks‚ÇÇ)
        --     ... | no ¬¨p = nothing
        --     ... | yes refl-StrId with (s‚ÇÅ ‚âü-Str s‚ÇÇ)
        --     ... | no ¬¨p = nothing
        --     ... | yes refl-StrId = right (lookup-Term i ts)
        -- decomp (var x) = left x


        -- | For this we take the following:
        IRecAccessible.Dir RecAccessible:TermZ = of ùëÑ
        IRecAccessible.ISet:Dir RecAccessible:TermZ = {!!}
        IRecAccessible.ISet:K RecAccessible:TermZ = {!!}
        IRecAccessible.IDiscreteStr:Dir RecAccessible:TermZ = {!!}
        IRecAccessible.IDiscreteStr:K RecAccessible:TermZ = {!!}
        ‚ü® ‚ü® IRecAccessible.decompose RecAccessible:TermZ ‚ü© ‚ü© _ t = decomp t
        of IRecAccessible.decompose RecAccessible:TermZ = {!!}
        IRecAccessible.commutes:decompose RecAccessible:TermZ = {!!}
        IRecAccessible.pts RecAccessible:TermZ = {!!}
        IRecAccessible.a0 RecAccessible:TermZ = {!!}
        IRecAccessible.a0-adsorb RecAccessible:TermZ = {!!}
        IRecAccessible.k-a1 RecAccessible:TermZ = {!!}
        IRecAccessible.a1 RecAccessible:TermZ = {!!}
        IRecAccessible.isDecomposableP RecAccessible:TermZ = {!!}
        IRecAccessible.isPureP RecAccessible:TermZ = {!!}
        IRecAccessible.decideDecompose RecAccessible:TermZ = {!!}
        IRecAccessible.makeDec RecAccessible:TermZ = {!!}
        IRecAccessible.makePure RecAccessible:TermZ = {!!}
        IRecAccessible.isWellfounded::‚â∫ RecAccessible:TermZ = {!!}
        IRecAccessible.cancel-Œ¥ RecAccessible:TermZ = {!!}

{-
        decomp : {k : K} -> Term œÉ V k -> V k +-ùí∞ (‚àÄ(j : K) -> SigEdge j k -> Maybe (Term œÉ V j))
        decomp {k = k} (te {n = n‚ÇÅ} {ks = ks‚ÇÅ} s‚ÇÅ ts) = right f
          where
            f : (j : K) ‚Üí SigEdge j k ‚Üí Maybe (Term œÉ V j)
            f .(lookup i _) (edge {n = n‚ÇÇ} {ks = ks‚ÇÇ} i s‚ÇÇ) with (n‚ÇÅ ‚âü-Str n‚ÇÇ)
            ... | no ¬¨p = nothing
            ... | yes refl-StrId with (ks‚ÇÅ ‚âü-Str ks‚ÇÇ)
            ... | no ¬¨p = nothing
            ... | yes refl-StrId with (s‚ÇÅ ‚âü-Str s‚ÇÇ)
            ... | no ¬¨p = nothing
            ... | yes refl-StrId = right (lookup-Term i ts)
        decomp (var x) = left x

        isMono:decomp : ‚àÄ {k} -> (t s : Term œÉ V k) -> decomp t ‚â°-Str decomp s -> t ‚â°-Str s
        isMono:decomp (te x x‚ÇÅ) (te x‚ÇÇ x‚ÇÉ) p = {!!}
        isMono:decomp (var x) (var .x) refl-StrId = refl-StrId

      -- decomp nothing none = right (Œª j ())
      -- decomp {V = V} (just k) (some (te t ts)) = right (f ts)
      --   where f : Terms œÉ (V) ks -> (j : K) -> SigEdge j (just k) -> Maybe (Term œÉ _ j)
      --         f = ?
              -- f xs .(just (lookup i _)) (e-arg i x) = {!!}
              -- f xs .nothing (e-noarg x) = {!!}
              -- f .(just (lookup i _)) (e-arg i x) = {!!}
              -- f .nothing (e-noarg x) = {!!}
      -- decomp (just k) (some (var v)) = left v

      RecAccessible:Term : IRecAccessible (Monad:Term œÉ)
      IRecAccessible.Dir RecAccessible:Term = of ùëÑ
      IRecAccessible.ISet:Dir RecAccessible:Term = {!!}
      ‚ü® ‚ü® IRecAccessible.decompose RecAccessible:Term ‚ü© ‚ü© _ = decomp
      of IRecAccessible.decompose RecAccessible:Term = {!!}
      IRecAccessible.IMono:decompose RecAccessible:Term = {!!}
      IRecAccessible.wellfounded RecAccessible:Term = {!!}


-}

