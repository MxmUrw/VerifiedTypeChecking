
{-# OPTIONS --rewriting #-}

module Verification.Unification.Target.Presheaves.Functor where

open import Verification.Conventions
open import Verification.Core.Type
open import Verification.Core.Algebra
open import Verification.Core.Order
open import Verification.Core.Category.Definition
open import Verification.Core.Category.Monad
open import Verification.Core.Category.Quiver
open import Verification.Core.Category.FreeCategory
open import Verification.Core.Category.Functor
open import Verification.Core.Category.Instance.Type
open import Verification.Core.Category.Instance.SmallCategories
open import Verification.Core.Category.Instance.TypeProperties
open import Verification.Core.Category.Instance.Set
open import Verification.Core.Category.KanLimit.Definition
open import Verification.Core.Category.Monad
open import Verification.Unification.RecAccessible
open import Verification.Core.Homotopy.Level


-- {-# BUILTIN REWRITE _‚â°_ #-}

--------------------------------------------------------------------
-- == The functor to Recursion Modules
-- | Let A, B, C be sets, and let $T$ be a fixed \AD{RecMonad} in this section.

-- Monoid:Path : Quiver ùëñ -> Monoid (ùëñ ‚åÑ 0 ‚äî ùëñ ‚åÑ 1)
-- ‚ü® Monoid:Path Q ‚ü© = Maybe (‚àë Œª (x : ‚ü® Q ‚ü©) -> ‚àë Œª (y : ‚ü® Q ‚ü©) -> Edge {{of Q}} x y)
-- IMonoid.ùü∑ (of Monoid:Path Q) = {!!}
-- IMonoid._‚ãÖ_ (of Monoid:Path Q) = {!!}
-- IMonoid.assoc-‚ãÖ (of Monoid:Path Q) = {!!}
-- IMonoid.unit-l-‚ãÖ (of Monoid:Path Q) = {!!}
-- IMonoid.unit-r-‚ãÖ (of Monoid:Path Q) = {!!}

mirror-Functor : ‚àÄ{ùíû : Category ùëñ} {ùíü : Category ùëó} -> Functor ùíû (ùíü ·µí·µñ) -> Functor (ùíû ·µí·µñ) ùíü
‚ü® mirror-Functor F ‚ü© = ‚ü® F ‚ü©
IFunctor.map (of mirror-Functor F) = map
IFunctor.functoriality-id (of mirror-Functor F) = functoriality-id
IFunctor.functoriality-‚óÜ (of mirror-Functor F) = functoriality-‚óÜ
IFunctor.functoriality-‚â£ (of mirror-Functor F) = functoriality-‚â£

mirror-Nat : ‚àÄ{ùíû : Category ùëñ} {ùíü : Category ùëó} -> {F G : Functor ùíû (ùíü ·µí·µñ)} -> (Œ± : Natural F G) -> Natural (mirror-Functor G) (mirror-Functor F)
‚ü® mirror-Nat a ‚ü© {x} = ‚ü® a ‚ü©
INatural.naturality (of mirror-Nat a) = Œª f -> sym (naturality f)

byFirstP : ‚àÄ{A : ùí∞ ùëñ} {B : A -> ùí∞ ùëó} {{_ : ‚àÄ{a : A} -> IHType 1 (B a)}}
           -> {a1 a2 : A} {b1 : B a1} {b2 : B a2} -> (p : a1 ‚â° a2)
           -> PathP (Œª i -> ‚àë Œª (a : A) -> B a) (a1 , b1) (a2 , b2)
byFirstP = {!!}


PSh : (ùíû : Category ùëñ) -> ‚àÄ ùëó -> ùí∞ _
PSh ùíû ùëó = Functor (ùíû ·µí·µñ) `(Set ùëó)`


module _ {K : ùí∞ ùëñ} (T : Functor `(IdxSet K ùëñ)` `(IdxSet K ùëñ)`) {{_ : IMonad T}} {{_ : IRecAccessible-Monad T}} where
  private
    Q : Quiver (ùëñ , ùëñ , ùëñ)
    ‚ü® Q ‚ü© = K
    IQuiver.Edge (of Q) a b = Maybe (Edge {{Dir}} a b)
    IQuiver._‚âà_ (of Q) = _‚â°_
    IQuiver.IEquivInst (of Q) = IEquiv:Path

  ùîá = (Category:Free Q)

  instance _ = of ùîá
  instance _ = of Q

  Mod : IdxSet K ùëñ -> K -> Set ùëñ
  ‚ü® Mod X k ‚ü© = ‚àë Œª j -> Hom {{of ùîá}} k j √ó-ùí∞ (ùüö-ùí∞ +-ùí∞ (‚ü® ‚ü® T ‚ü© X ‚ü© j))
  of Mod X k = {!!}

  private
    data isNormal {A : IdxSet K ùëñ} {k} : ‚ü® Mod A k ‚ü© -> ùí∞ (ùëñ) where
      by-[] : ‚àÄ{a : ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© A ‚ü© k} -> isNormal (_ , id-Q , a)
      by-eval : ‚àÄ{j} -> ‚àÄ{a : ‚ü® ‚ü® T ‚ü© A ‚ü© j} -> {a' : ‚ü® A ‚ü© j} -> ‚ü® ‚ü® decompose ‚ü© ‚ü© _ a ‚â°-Str left a'
                 -> (p : Hom k j) -> isNormal (_ , p , right a)

        -- by-[] : ‚àÄ{a : ‚ü® T ‚ü© A} -> (depth a ‚â° 0 -> ùüò-ùí∞) -> isNormal ([] , a)
        -- by-depth : ‚àÄ{ds} -> ‚àÄ{a : ‚ü® T ‚ü© A} -> depth a ‚â° 0 -> isNormal (ds , a)

    instance
      IProp:isNormal : ‚àÄ{A : IdxSet K ùëñ} {k} {a : ‚ü® Mod A k ‚ü©} -> IHType 1 (isNormal a)
      IProp:isNormal = {!!}

  Mod-Normal : IdxSet K ùëñ -> K -> Set ùëñ
  ‚ü® Mod-Normal X k ‚ü© = ‚àë Œª (a : ‚ü® Mod X k ‚ü©) -> isNormal a
  of Mod-Normal X k = {!!}

  -- syntax ‚ü®_‚ü© (‚ü®_‚ü© a) = ‚ü®‚ü®_‚ü©‚ü© a

  private
    module _ {X : IdxSet K ùëñ} where

      -- ŒΩ-impl-1 : {j : K} {k : K} -> (p : Edge {{of Q}} k j) -> ‚ü® ‚ü® T ‚ü© X ‚ü© j -> Maybe (ùüö-ùí∞ +-ùí∞ (‚ü® ‚ü® T ‚ü© X ‚ü© k))
      -- ŒΩ-impl-1 nothing x = just (left ‚ÇÄ)
      -- ŒΩ-impl-1 (just e) x with ‚ü® ‚ü® decompose ‚ü© ‚ü© _ x
      -- ... | left _ = nothing
      -- ... | just xs = just (xs _ e)

      -- ŒΩ-impl‚ÇÅ : {j : K} {k : K} -> (p : QPath {{of Q}} k j) -> ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j -> ‚ü® Mod-Normal X k ‚ü©

      ŒΩ-impl : {j : K} {k : K} -> (p : QPath {{of Q}} k j) -> ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j -> ‚ü® Mod X k ‚ü©
      ŒΩ-impl p (left x) = _ , id , left ‚ÇÄ
      ŒΩ-impl (last nothing) (right x) = _ , id , left ‚ÇÄ
      ŒΩ-impl (last (just e)) (right x) with split-+-Str (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x)
      ... | left _        = _ , some (last (just e)) , right x
      ... | just (xs , _) = _ , id , (xs _ e)
      -- ŒΩ-impl (nothing ‚à∑ p) (right x) = _ , id , left ‚ÇÄ
      ŒΩ-impl (e ‚à∑ p) (right x) with ŒΩ-impl p (right x)
      ... | (_ , some p' , x')       = _ , some (e ‚à∑ p') , x'
      ... | (_ , id-Q , left x‚ÇÅ)     = _ , id , left ‚ÇÄ
      ... | (_ , id-Q , just x')     with split-+-Str (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      ... | left _         = _ , some (last (e)) , just x' -- restore old x', with last existing edge e
      ŒΩ-impl (nothing ‚à∑ p) (just x) | (_ , id-Q , just x')     | just (x'' , _) = _ , id , left ‚ÇÄ
      ŒΩ-impl (just e ‚à∑ p) (just x)  | (_ , id-Q , just x')     | just (x'' , _) = _ , id-Q , x'' _ e

      ŒΩ-impl-isNormal : {j : K} {k : K} -> (p : QPath {{of Q}} k j) -> (x : ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> isNormal (ŒΩ-impl p x)
      ŒΩ-impl-isNormal = {!!}

      -- ŒΩ-impl‚ÇÅ p x = ŒΩ-impl p x , ?

      ŒΩ : ‚àÄ{k} -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod X k ‚ü©
      ŒΩ (j , id-Q , x) = (j , id-Q , x)
      ŒΩ (j , some p , x) = ŒΩ-impl p x


      isNormal-ŒΩ : ‚àÄ{k} -> ‚àÄ(x : ‚ü® Mod X k ‚ü©) -> isNormal (ŒΩ x)
      isNormal-ŒΩ x = {!!}

      ŒΩ‚ÇÅ : ‚àÄ{k} -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod-Normal X k ‚ü©
      ŒΩ‚ÇÅ x = ŒΩ x , isNormal-ŒΩ x

      idempotent-ŒΩ : ‚àÄ{k} -> ‚àÄ{x : ‚ü® Mod X k ‚ü©} -> ŒΩ (ŒΩ x) ‚â° ŒΩ x
      idempotent-ŒΩ = {!!}


      write : ‚àÄ{k j} -> (e : Edge {{of Q}} j k) -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod X j ‚ü©
      write e (_ , p , x) = (_ , ` e ` ‚óÜ p , x)


      write-comm-impl-2 : {j k l : K} -> (e : Edge {{of Q}} l k) -> (p : QPath {{of Q}} k j) -> (x : ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> (ŒΩ-impl (e ‚à∑ p) x ‚â°-Str write e (ŒΩ-impl p x)) +-ùí∞ (‚àë Œª y -> ŒΩ-impl p x ‚â°-Str (_ , id-Q , y))
      write-comm-impl-2 e p (left x) = right (_ , refl)
      write-comm-impl-2 e p (just x) with ŒΩ-impl p (right x) | ŒΩ-impl-isNormal p (right x)
      ... | .(_ , id-Q , _) | by-[] = right (_ , refl)
      ... | .(_ , id-Q , just _) | by-eval x‚ÇÅ id-Q = right (_ , refl)
      ... | .(_ , some x‚ÇÇ , just _) | by-eval x‚ÇÅ (some x‚ÇÇ) = left refl

      write-comm-impl : {j k l : K} -> (e : Edge {{of Q}} l k) -> (p : QPath {{of Q}} k j) -> (x : ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> ŒΩ (write e (ŒΩ-impl p x)) ‚â° ŒΩ-impl (e ‚à∑ p) x
      write-comm-impl e p x with write-comm-impl-2 e p x
      ... | left P = {!!}
      write-comm-impl e p (left x) | just (fst‚ÇÅ , P) = {!!}
      write-comm-impl e p (just x) | just (y , P) with ŒΩ-impl p (just x) | P
      write-comm-impl e p (just x) | just (left x' , P) | .(_ , id-Q , left x') | refl-StrId = {!!}
      write-comm-impl e p (just x) | just (just x' , P) | .(_ , id-Q , just x') | refl-StrId with split-+-Str (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      ... | left x‚ÇÅ = {!!}
      write-comm-impl (left x‚ÇÇ) p (just x) | just (just x' , P) | .(_ , id-Q , just x') | refl-StrId | just x‚ÇÅ = refl
      write-comm-impl (just x‚ÇÇ) p (just x) | just (just x' , P) | .(_ , id-Q , just x') | refl-StrId | just (x'' , x''p) with split-+-Str (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      write-comm-impl (just x‚ÇÇ) p (just x) | just (just x' , P) | .(_ , id-Q , just x') | refl-StrId | just (x'' , x''p) | left (x''2 , x''2p) with x''2p ‚Åª¬π ‚àô x''p
      ... | ()
      write-comm-impl (just x‚ÇÇ) p (just x) | just (just x' , P) | .(_ , id-Q , just x') | refl-StrId | just (x'' , x''p) | right (x''2 , x''2p) with x''2p ‚Åª¬π ‚àô x''p
      ... | refl-StrId = refl

      -- write-comm-impl e p (left x) = refl
      -- write-comm-impl e (last nothing) (just x) = refl
      -- write-comm-impl e (last (just x‚ÇÅ)) (just x) = {!!} -- with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x)
      -- write-comm-impl f (e ‚à∑ p) (just x) with ŒΩ-impl p (right x) | ŒΩ-impl-isNormal p (right x)
      -- ... | _ , some x‚ÇÅ , just x‚ÇÇ | Y = {!!}
      -- ... | _ , id-Q , left x‚ÇÅ | Y = {!!}
      -- ... | _ , id-Q , just x' | Y with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      -- ... | left _ = {!!}
      -- write-comm-impl f (left x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | Y | just x'' = {!!}
      -- write-comm-impl f (just x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | Y | just (x'' , _) = {!!}

      -- ... | _ , id-Q , left x‚ÇÅ = {!!}
      -- ... | _ , some x‚ÇÇ , left x‚ÇÅ = {!!}
      -- ... | _ , p' , just x‚ÇÅ = {!!}

      -- with ŒΩ-impl p (right x) | ŒΩ-impl (e ‚à∑ p) (right x)
      -- ... | _ , some x‚ÇÅ , x' | _ , id-Q , left x‚ÇÇ = {!!}
      -- ... | _ , some x‚ÇÅ , x' | _ , id-Q , just x‚ÇÇ = {!!}
      -- ... | _ , some x‚ÇÅ , x' | _ , some x‚ÇÇ , x'2 = {!!}
      -- ... | _ , id-Q , left x' | _ , id-Q , left x‚ÇÅ = {!!}
      -- ... | _ , id-Q , left x' | _ , id-Q , just x‚ÇÅ = {!!}
      -- ... | _ , id-Q , left x' | _ , some x‚ÇÅ , left x‚ÇÇ = {!!}
      -- ... | _ , id-Q , left x' | _ , some x‚ÇÅ , just x‚ÇÇ = {!!}
      -- ... | _ , id-Q , just x' | Z = {!!}


      -- with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      -- ... | left x‚ÇÅ = {!!}
      -- write-comm-impl f (left x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | just (x'' , _) = {!!}
      -- write-comm-impl f (just x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | just (x'' , _) = {!!}

      -- write-comm-impl f (e ‚à∑ p) (just x) with ŒΩ-impl p (right x)
      -- ... | _ , some x‚ÇÅ , x' = {!!}
      -- ... | _ , id-Q , left x' = {!!}
      -- ... | _ , id-Q , just x' with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      -- ... | left x‚ÇÅ = {!!}
      -- write-comm-impl f (left x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | just (x'' , _) = {!!}
      -- write-comm-impl f (just x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | just (x'' , _) = {!!}


      -- write-comm-impl e p (left x) = refl
      -- write-comm-impl f (last (nothing)) (just x) = refl
      -- write-comm-impl f (last (just x‚ÇÅ)) (just x) with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x)
      -- ... | just _ = refl
      -- ... | left P with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x)
      -- ... | left _ = refl
      -- ... | just Q = {!!} -- ùüò-elim (left‚â¢right (snd P ‚Åª¬π ‚àô snd Q))
      -- write-comm-impl f (e ‚à∑ p) (just x) = {!!}

      write-comm : ‚àÄ{k j} -> (e : Edge {{of Q}} j k) -> (x : ‚ü® Mod X k ‚ü©)-> ŒΩ (write e (ŒΩ x)) ‚â° ŒΩ (write e x)
      write-comm e (j , id-Q , x) = refl
      write-comm e (j , some p , x) = write-comm-impl e p x

      -- write-comm e (j , p , left x) = refl
      -- write-comm e (j , id-Q , just x) = refl
      -- write-comm e (j , some p , just x) = ?

    module _ {X Y : IdxSet K ùëñ} where
      apply : ‚àÄ{k} -> (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod Y k ‚ü©
      apply f (_ , p , left x) = (_ , p , left x)
      apply f (_ , p , right x) = (_ , p , right (‚ü® f =<< ‚ü© _ x))

      apply-comm : ‚àÄ{k} -> (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> (x : ‚ü® Mod X k ‚ü©) -> ŒΩ (apply f (ŒΩ x)) ‚â° ŒΩ (apply f x)
      apply-comm f (_ , id-Q , x) = refl
      apply-comm f (_ , some x‚ÇÅ , x) = {!!}

  ùë∫ : IdxSet K ùëñ -> PSh ùîá ùëñ
  ùë∫ X = mirror-Functor (free-Diagram f)
    where f : QuiverHom (Q) (ForgetCategory (` Set ùëñ ` ·µí·µñ))
          ‚ü® f ‚ü© k = Mod-Normal X k
          ‚ü® IQuiverHom.qmap (of f) e ‚ü© (x , _) = ŒΩ‚ÇÅ (write e x)
          of IQuiverHom.qmap (of f) e = record {}

  private
    module _ {X Y : IdxSet K ùëñ} (f : X ‚ü∂ ‚ü® T ‚ü© Y) where
      g' : ‚àÄ{k} -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod Y k ‚ü©
      g' ((j , p , left a)) = ((j , p , left a)) -- normaliz
      g' ((j , p , just x)) = (j , p , just (‚ü® f =<< ‚ü© j x))

      g : ‚àÄ(k : K) -> ‚ü® ùë∫ X ‚ü© k ‚ü∂ ‚ü® ùë∫ Y ‚ü© k
      ‚ü® g k ‚ü© (x , xp) = ŒΩ‚ÇÅ (apply f x)

      -- ‚ü® g k ‚ü© ((j , p , left a) , _) = ŒΩ ((j , p , left a)) -- ŒΩ (j , p , {!!}) -- (j , p ,  ‚ü® f =<< ‚ü© j x)
      -- ‚ü® g k ‚ü© ((j , p , just x) , _) = ŒΩ (j , p , just (‚ü® f =<< ‚ü© j x)) -- (j , p ,  ‚ü® f =<< ‚ü© j x)
      of g k = record {}

      gp : {a b : K} (e : Maybe (Edge {{Dir}} b a)) (x : ‚ü® ‚ü® ùë∫ X ‚ü© a ‚ü©) ‚Üí
            ‚ü® map {{of ùë∫ Y}} (‚©ö e) ‚ü© (‚ü® g a ‚ü© x) ‚â°
            ‚ü® g b ‚ü© (‚ü® map {{of ùë∫ X}} (‚©ö e) ‚ü© x)
      gp e ((j , p , just x) , pp) = byFirstP P

       where P : ŒΩ (write e (ŒΩ (apply f (j , p , just x))))
                  ‚â°
                ŒΩ (apply f (ŒΩ (write e (j , p , just x))))
             P = write-comm e (apply f (j , p , just x)) ‚àô apply-comm f (write e (j , p , just x)) ‚Åª¬π

      gp e ((j , id-Q , left x) , _) = byFirstP refl


  module _ {X Y : IdxSet K ùëñ} where
    map-ùë∫ : (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> ùë∫ X ‚ü∂ ùë∫ Y
    map-ùë∫ f = mirror-Nat (free-Diagram-Natimpl (g f) (Œª e x -> gp f e x ‚Åª¬π))





    -- (free-Diagram-Natimpl (g f) (Œª e x -> gp f e x))



      -- where g : ‚àÄ(k : K) -> ‚ü® ùë∫ X ‚ü© k ‚ü∂ ‚ü® ùë∫ Y ‚ü© k
      --       ‚ü® g k ‚ü© ((j , p , left a) , _) = ŒΩ ((j , p , left a)) -- ŒΩ (j , p , {!!}) -- (j , p ,  ‚ü® f =<< ‚ü© j x)
      --       ‚ü® g k ‚ü© ((j , p , just x) , _) = ŒΩ (j , p , just (‚ü® f =<< ‚ü© j x)) -- (j , p ,  ‚ü® f =<< ‚ü© j x)
      --       of g k = record {}

      --       gp : {a b : K} (e : Maybe (Edge {{Dir}} a b)) (x : ‚ü® ‚ü® ùë∫ X ‚ü© a ‚ü©) ‚Üí
      --             ‚ü® map {{of ùë∫ Y}} (‚©ö e) ‚ü© (‚ü® g a ‚ü© x) ‚â°
      --             ‚ü® g b ‚ü© (‚ü® map {{of ùë∫ X}} (‚©ö e) ‚ü© x)
      --       gp e ((j , p , left x) , _) = {!!}
      --       gp e ((j , p , just x) , _) = {!!}


            -- gp2 : {a b : K}
            --         (e : ùüô-ùí∞ +-ùí∞ Edge {{Dir}} a b)
            --         (x
            --         : Œ£ (Œ£ K (Œª j ‚Üí Œ£ (Hom {{of ùîá ·µí·µñ}} j a) (Œª a‚ÇÅ ‚Üí ùüô-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j)))
            --           (isNormal X a)) ‚Üí
            --         ŒΩ
            --         (fst (fst (‚ü® g a ‚ü© x)) ,
            --         (some (last e)) ‚óÜ (fst (snd (fst (‚ü® g a ‚ü© x)))) ,
            --         snd (snd (fst (‚ü® g a ‚ü© x))))
            --         ‚â°
            --         ‚ü® g b ‚ü©
            --         (ŒΩ
            --         (fst (fst x) ,
            --           (some (last e)) ‚óÜ (fst (snd (fst x)))  ,
            --           snd (snd (fst x))))
            -- gp2 = {!!}
    -- ‚ü® ‚ü® map-ùë∫ f ‚ü© {x = k} ‚ü© ((j , p , x) , _) = ŒΩ (j , p ,  ‚ü® f =<< ‚ü© j x)
    -- of ‚ü® map-ùë∫ f ‚ü© = record {}
    -- INatural.naturality (of map-ùë∫ f) = {!!}


  -- Functor:ùë∫ : Functor `(Kleisli ` T `)` `(PSh ùîá ùëñ)`
  -- ‚ü® Functor:ùë∫ ‚ü© = ùë∫
  -- IFunctor.map (of Functor:ùë∫) = map-ùë∫
  -- IFunctor.functoriality-id (of Functor:ùë∫) = {!!}
  -- IFunctor.functoriality-‚óÜ (of Functor:ùë∫) = {!!}
  -- IFunctor.functoriality-‚â£ (of Functor:ùë∫) = {!!}


{-
  ùîá = Monoid:Free Dir

  private
    Mon : ‚àÄ(A : ùí∞ ùëñ) -> MonoidModule ùîá ùëñ
    Mon A = MonoidModule:Free ùîá (‚ü® T ‚ü© A)

  norm' : ‚ü® ùîá ‚ü© -> ‚ü® T ‚ü© A -> ‚ü® Mon A ‚ü©
  norm' [] a = ([] , a)
  norm' (d ‚à∑ ds) a with ‚ü® decompose ‚ü© a
  ... | left x = (d ‚à∑ ds , a)
  ... | just x = norm' ds (x d)

  norm : ‚ü® Mon A ‚ü© -> ‚ü® Mon A ‚ü©
  norm (ds , a) = norm' ds a



  private
    data isNormal : ‚ü® Mon A ‚ü© -> ùí∞ (ùëñ ‚Å∫) where
       by-[] : ‚àÄ{a : ‚ü® T ‚ü© A} -> (depth a ‚â° 0 -> ùüò-ùí∞) -> isNormal ([] , a)
       by-depth : ‚àÄ{ds} -> ‚àÄ{a : ‚ü® T ‚ü© A} -> depth a ‚â° 0 -> isNormal (ds , a)

    lem::1 : ‚àÄ(a : ‚ü® Mon A ‚ü©) -> isNormal a -> norm a ‚â° a
    lem::1 ([] , a) P = refl
    lem::1 (d ‚à∑ ds , a) (by-depth P) with ‚ü® decompose ‚ü© a | strict a
    ... | left a‚ÇÇ | X = refl
    ... | just a‚ÇÇ | X =
      let P‚ÇÇ : depth (a‚ÇÇ d) < depth a
          P‚ÇÇ = X d

          P‚ÇÉ : depth (a‚ÇÇ d) < 0
          P‚ÇÉ = transport (Œª i -> depth (a‚ÇÇ d) < P i) P‚ÇÇ

          P‚ÇÑ : ùüò-ùí∞
          P‚ÇÑ = P‚ÇÉ .snd (‚â§0‚Üí‚â°0 (P‚ÇÉ .fst))

      in ùüò-elim P‚ÇÑ

    lem::2 : ‚àÄ(ds : ‚ü® ùîá ‚ü©) -> (a : ‚ü® T ‚ü© A) -> isNormal (norm' ds a)
    lem::2 [] a with split-‚Ñï (depth a)
    ... | left x = by-depth x
    ... | just x = by-[] (Œª a‚â°0 -> zero‚â¢suc (a‚â°0 ‚Åª¬π ‚àô snd x))
    lem::2 (d ‚à∑ ds) a with ‚ü® decompose ‚ü© a | strict a
    ... | left x | P = by-depth (transport (Œª i -> depth (P (~ i)) ‚â° 0) depth/return)
    ... | just x | P = lem::2 ds (x d)

    lem::3 : ‚àÄ(a : ‚ü® Mon A ‚ü©) -> norm (norm a) ‚â° norm a
    lem::3 a = lem::1 (norm a) (lem::2 (fst a) (snd a))

  -}




