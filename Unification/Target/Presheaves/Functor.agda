

module Verification.Unification.Target.Presheaves.Functor where

open import Verification.Conventions
open import Verification.Core.Type
-- open import Verification.Core.Algebra
open import Verification.Core.Order
open import Verification.Core.Category.Definition
open import Verification.Core.Category.Functor.Presheaf
open import Verification.Core.Category.Quiver
open import Verification.Core.Category.FreeCategory
open import Verification.Core.Category.Instance.Cat
open import Verification.Core.Category.Instance.Functor
open import Verification.Core.Category.Instance.Type
open import Verification.Core.Category.Instance.Type.Coproducts
open import Verification.Core.Category.Instance.Kleisli
open import Verification.Core.Category.Instance.SmallCategories
open import Verification.Core.Category.Instance.TypeProperties
open import Verification.Core.Category.Instance.Set
open import Verification.Core.Category.Instance.IdxSet
open import Verification.Core.Category.Limit.Kan.Definition
open import Verification.Core.Category.Limit.Specific
open import Verification.Core.Category.Monad.Definition
open import Verification.Unification.RecAccessible
open import Verification.Core.Homotopy.Level



-- {-# BUILTIN REWRITE _‚â°_ #-}

--------------------------------------------------------------------
-- == The functor to Recursion Modules
-- | Let A, B, C be sets, and let $T$ be a fixed \AD{RecMonad} in this section.

-- Monoid:Path : Quiver ùëñ -> Monoid (ùëñ ‚åÑ 0 ‚äî ùëñ ‚åÑ 1)
-- ‚ü® Monoid:Path Q ‚ü© = Maybe (‚àë Œª (x : ‚ü® Q ‚ü©) -> ‚àë Œª (y : ‚ü® Q ‚ü©) -> Edge {{of Q}} x y)
-- IMonoid.ùü∑ (of Monoid:Path Q) = {!!}
-- IMonoid._‚ãÖ_ (of Monoid:Path Q) = {!!}
-- IMonoid.assoc-‚ãÖ (of Monoid:Path Q) = {!!}
-- IMonoid.unit-l-‚ãÖ (of Monoid:Path Q) = {!!}
-- IMonoid.unit-r-‚ãÖ (of Monoid:Path Q) = {!!}

-- FFF = Functor:Either ùüô-ùí∞

-- module _ {K : ùí∞ ùëñ} (E : K -> K -> ùí∞ ùëó) where
--   data Edge‚Çä : (a b : Maybe K) -> ùí∞ (ùëñ ÔΩ§ ùëó) where
--     edge : ‚àÄ {a b} -> E a b -> Edge‚Çä (just a) (just b)
--     zedge : ‚àÄ{a} -> Edge‚Çä nothing (just a)

instance
  Cast:‚â°Str : ‚àÄ{X : ùí∞ ùëñ} -> ‚àÄ{a b : X} -> Cast (a ‚â°-Str b) IAnything (a ‚â° b)
  Cast.cast Cast:‚â°Str refl-StrId = refl

‚â°-Str‚Üí‚â° : ‚àÄ{X : ùí∞ ùëñ} -> ‚àÄ{a b : X} -> (a ‚â°-Str b) -> (a ‚â° b)
‚â°-Str‚Üí‚â° refl-StrId = refl

‚â°‚Üí‚â°-Str : ‚àÄ{X : ùí∞ ùëñ} -> ‚àÄ{a b : X} -> (a ‚â° b) -> (a ‚â°-Str b)
‚â°‚Üí‚â°-Str = {!!}

cong-Str : ‚àÄ{A : ùí∞ ùëñ} {B : ùí∞ ùëó} {a b : A} -> (f : A -> B) -> (a ‚â°-Str b) -> (f a ‚â°-Str f b)
cong-Str f refl-StrId = refl-StrId

-- right‚â¢left-Str : ‚àÄ{a : A}



module _ {K : ùí∞ ùëñ} (T' : Monad `(IdxSet K ùëñ)`) {{_ : IRecAccessible T'}} where
  T = ‚ü® T' ‚ü©
  private
    Q : Quiver (ùëñ , ùëñ , ùëñ)
    ‚ü® Q ‚ü© = K
    IQuiver.Edge (of Q) = Edge {{Dir}}
    --Maybe (Edge {{Dir}} a b)
    IQuiver._‚âà_ (of Q) = _‚â°_
    IQuiver.IEquivInst (of Q) = IEquiv:Path

  ùîá = (Category:Free Q)

  instance _ = of ùîá
  instance _ = of Q
  instance _ = of T
  instance _ = of T'



  -- WithTerm : ‚àÄ(A : K -> ùí∞ ùëô) -> Maybe K -> ùí∞ ùëô
  -- WithTerm A nothing = `ùüô`
  -- WithTerm A (just x) = A x


  Mod : IdxSet K ùëñ -> K -> Set ùëñ
  ‚ü® Mod X k ‚ü© = ‚àë Œª j -> Hom {{of ùîá}} k j √ó-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j
  of Mod X k = {!!}



  private
    data isNormal {A : IdxSet K ùëñ} : ‚àÄ{k} -> ‚ü® Mod A k ‚ü© -> ùí∞ (ùëñ) where
      by-id : ‚àÄ{k} -> ‚àÄ{a : ‚ü® ‚ü® T ‚ü© A ‚ü© k} -> isNormal (_ , id-Q , a)
      by-nothing : ‚àÄ{k j} -> ‚àÄ{a : ‚ü® ‚ü® T ‚ü© A ‚ü© j} -> (e : Edge {{of Q}} k j) -> ‚ü® ‚ü® decompose ‚ü© ‚ü© _ a _ e ‚â°-Str nothing -> isNormal (_ , some (last e) , a)
      by-later : ‚àÄ{j k‚ÇÅ k‚ÇÇ} -> ‚àÄ{a : ‚ü® ‚ü® T ‚ü© A ‚ü© j} -> (p : QPath {{of Q}} k‚ÇÇ j) -> (e : Edge {{of Q}} k‚ÇÅ k‚ÇÇ) -> isNormal (_ , some p , a) -> isNormal (_ , some (e ‚à∑ p) , a)

      -- by-[] : ‚àÄ{a : ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© A ‚ü© k} -> isNormal (_ , id-Q , a)
      -- by-eval : ‚àÄ{j} -> ‚àÄ{a : ‚ü® ‚ü® T ‚ü© A ‚ü© j} -> {a' : ‚ü® A ‚ü© j} -> ‚ü® ‚ü® decompose ‚ü© ‚ü© _ a ‚â°-Str left a'
      --            -> (p : Hom k j) -> isNormal (_ , p , right a)

        -- by-[] : ‚àÄ{a : ‚ü® T ‚ü© A} -> (depth a ‚â° 0 -> ùüò-ùí∞) -> isNormal ([] , a)
        -- by-depth : ‚àÄ{ds} -> ‚àÄ{a : ‚ü® T ‚ü© A} -> depth a ‚â° 0 -> isNormal (ds , a)

    instance
      IProp:isNormal : ‚àÄ{A : IdxSet K ùëñ} {k} {a : ‚ü® Mod A k ‚ü©} -> IHType 1 (isNormal a)
      IProp:isNormal = {!!}

  Mod-Normal : IdxSet K ùëñ -> K -> Set ùëñ
  ‚ü® Mod-Normal X k ‚ü© = ‚àë Œª (a : ‚ü® Mod X k ‚ü©) -> isNormal a
  of Mod-Normal X k = {!!}

  private
    module _ {X : IdxSet K ùëñ} where
{-
      -- ŒΩ-impl-1 : {j : K} {k : K} -> (p : Edge {{of Q}} k j) -> ‚ü® ‚ü® T ‚ü© X ‚ü© j -> Maybe (ùüö-ùí∞ +-ùí∞ (‚ü® ‚ü® T ‚ü© X ‚ü© k))
      -- ŒΩ-impl-1 nothing x = just (left ‚ÇÄ)
      -- ŒΩ-impl-1 (just e) x with ‚ü® ‚ü® decompose ‚ü© ‚ü© _ x
      -- ... | left _ = nothing
      -- ... | just xs = just (xs _ e)

      -- ŒΩ-impl‚ÇÅ : {j : K} {k : K} -> (p : QPath {{of Q}} k j) -> ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j -> ‚ü® Mod-Normal X k ‚ü©

      ŒΩ-impl : {j : K} {k : K} -> (p : QPath {{of Q}} k j) -> ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j -> ‚ü® Mod X k ‚ü©
      ŒΩ-impl = {!!}
      -- ŒΩ-impl p (left x) = _ , id , left ‚ÇÄ
      -- ŒΩ-impl (last nothing) (right x) = _ , id , left ‚ÇÄ
      -- ŒΩ-impl (last (just e)) (right x) with split-+-Str (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x)
      -- ... | left _        = _ , some (last (just e)) , right x
      -- ... | just (xs , _) = _ , id , (xs _ e)
      -- -- ŒΩ-impl (nothing ‚à∑ p) (right x) = _ , id , left ‚ÇÄ
      -- ŒΩ-impl (e ‚à∑ p) (right x) with ŒΩ-impl p (right x)
      -- ... | (_ , some p' , x')       = _ , some (e ‚à∑ p') , x'
      -- ... | (_ , id-Q , left x‚ÇÅ)     = _ , id , left ‚ÇÄ
      -- ... | (_ , id-Q , just x')     with split-+-Str (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      -- ... | left _         = _ , some (last (e)) , just x' -- restore old x', with last existing edge e
      -- ŒΩ-impl (nothing ‚à∑ p) (just x) | (_ , id-Q , just x')     | just (x'' , _) = _ , id , left ‚ÇÄ
      -- ŒΩ-impl (just e ‚à∑ p) (just x)  | (_ , id-Q , just x')     | just (x'' , _) = _ , id-Q , x'' _ e

      ŒΩ-impl-isNormal : {j : K} {k : K} -> (p : QPath {{of Q}} k j) -> (x : ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> isNormal (ŒΩ-impl p x)
      ŒΩ-impl-isNormal = {!!}

      -- ŒΩ-impl‚ÇÅ p x = ŒΩ-impl p x , ?

-}

      -- ŒΩ-impl-2 : {j k : K} -> (p : QPath {{of Q}} (k) (j)) -> ‚ü® ‚ü® T ‚ü© X ‚ü© j -> ‚ü® Mod X k ‚ü©


      ŒΩ-impl : {j k : K} -> (p : QPath {{of Q}} (k) (j)) -> ‚ü® ‚ü® T ‚ü© X ‚ü© j -> ‚ü® Mod-Normal X k ‚ü©
      ŒΩ-impl (last e) x with split-+-Str (Œ¥ x e)
      ... | left (tt , z) = (_ , some (last e) , x) , by-nothing e z
      ... | just (x' , _) = (_ , id-Q , x') , by-id
      ŒΩ-impl (e ‚à∑ p) x with ŒΩ-impl p x
      ... | (_ , some p' , x') , N = (_ , some (e ‚à∑ p') , x') , by-later _ _ N
      ... | (_ , id-Q , x') , N with split-+-Str (Œ¥ x' e)
      ... | left (tt , z) = (_ , some (last e) , x') , by-nothing e z
      ... | just (x'' , _) = (_ , id-Q , x'') , by-id


      ŒΩ : ‚àÄ{k} -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod-Normal X k ‚ü©
      ŒΩ {.j} (j , id-Q , x) = (_ , id-Q , x) , by-id
      ŒΩ {k} (j , some p , x) = ŒΩ-impl p x

      ŒΩ‚ÇÅ : ‚àÄ{k} -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod X k ‚ü©
      ŒΩ‚ÇÅ x = fst (ŒΩ x)


      write : ‚àÄ{k j} -> (e : Edge {{of Q}} j k) -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod X j ‚ü©
      write e (_ , p , x) = (_ , ` e ` ‚óÜ p , x)

{-

      isNormal-ŒΩ : ‚àÄ{k} -> ‚àÄ(x : ‚ü® Mod X k ‚ü©) -> isNormal (ŒΩ x)
      isNormal-ŒΩ x = {!!}

      ŒΩ‚ÇÅ : ‚àÄ{k} -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod-Normal X k ‚ü©
      ŒΩ‚ÇÅ x = ŒΩ x , isNormal-ŒΩ x

      idempotent-ŒΩ : ‚àÄ{k} -> ‚àÄ{x : ‚ü® Mod X k ‚ü©} -> ŒΩ (ŒΩ x) ‚â° ŒΩ x
      idempotent-ŒΩ = {!!}




      write-comm-impl-2 : {j k l : K} -> (e : Edge {{of Q}} l k) -> (p : QPath {{of Q}} k j) -> (x : ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> (ŒΩ-impl (e ‚à∑ p) x ‚â°-Str write e (ŒΩ-impl p x)) +-ùí∞ (‚àë Œª y -> ŒΩ-impl p x ‚â°-Str (_ , id-Q , y))
      write-comm-impl-2 e p (left x) = right (_ , refl)
      write-comm-impl-2 e p (just x) with ŒΩ-impl p (right x) | ŒΩ-impl-isNormal p (right x)
      ... | .(_ , id-Q , _) | by-[] = right (_ , refl)
      ... | .(_ , id-Q , just _) | by-eval x‚ÇÅ id-Q = right (_ , refl)
      ... | .(_ , some x‚ÇÇ , just _) | by-eval x‚ÇÅ (some x‚ÇÇ) = left refl


-}

      ŒΩ-idempotent-impl : ‚àÄ{k j} -> (p : QPath {{of Q}} j k) (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) -> isNormal (_ , some p , x) -> ŒΩ‚ÇÅ (_ , some p , x) ‚â°-Str (_ , some p , x)
      ŒΩ-idempotent-impl .(last e) x (by-nothing e P) with split-+-Str (Œ¥ x e)
      ... | left _ = refl
      ... | just (_ , Q) = ùüò-rec (left‚â¢right `(P ‚Åª¬π ‚àô Q)`)
      ŒΩ-idempotent-impl .(e ‚à∑ p) x (by-later p e N) with ŒΩ-impl p x | ŒΩ-idempotent-impl p x N
      ... | .(_ , some p , x) , snd‚ÇÅ | refl-StrId = refl

      ŒΩ-idempotent : ‚àÄ{k} -> ‚àÄ(a : ‚ü® Mod-Normal X k ‚ü©) -> ŒΩ‚ÇÅ (fst a) ‚â°-Str fst a
      ŒΩ-idempotent ((_ , (some p) , x) , N) = ŒΩ-idempotent-impl p x N
      ŒΩ-idempotent ((_ , .id-Q , x) , by-id) = refl

      -- with split-+-Str (Œ¥ x e)
      -- ŒΩ-idempotent ((_ , .id-Q , x) , by-id) = refl
      -- ŒΩ-idempotent ((_ , .(some (last e)) , x) , by-nothing e P) with split-+-Str (Œ¥ x e)
      -- ... | left _ = refl
      -- ... | just (_ , Q) = ùüò-rec (left‚â¢right `(P ‚Åª¬π ‚àô Q)`)
      -- ŒΩ-idempotent ((_ , .(some (e ‚à∑ p)) , x) , by-later p e N) with ŒΩ-idempotent ((_ , some p , x) , N)
      -- ... | X = {!!}


      write-comm-impl : {j k l : K} -> (e : Edge {{of Q}} l k) -> (p : QPath {{of Q}} k j) -> (x : ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> ŒΩ‚ÇÅ (write e (fst (ŒΩ-impl p x))) ‚â°-Str fst (ŒΩ-impl (e ‚à∑ p) x)
      write-comm-impl f (last e) x with split-+-Str (Œ¥ x e)
      ... | just (x' , P) with split-+-Str (Œ¥ x' f)
      ... | left x‚ÇÅ = refl
      ... | just x‚ÇÅ = refl
      write-comm-impl f (last e) x | left (tt , P) with split-+-Str (Œ¥ x e)
      ... | left x‚ÇÅ = refl
      ... | just (_ , Q) = ùüò-rec (left‚â¢right `(P ‚Åª¬π ‚àô Q)`)
      write-comm-impl f (e ‚à∑ p) x with ŒΩ-impl p x
      ... | (_ , some p' , x') , N = ŒΩ-idempotent-impl (f ‚à∑ e ‚à∑ p') x' (by-later _ _ (by-later _ _ N))
      ... | (_ , id-Q , x') , N with split-+-Str (Œ¥ x' e)
      ... | left (tt , P) with split-+-Str (Œ¥ x' e)
      ... | left _ = refl
      ... | just (_ , Q) = ùüò-rec (left‚â¢right `(P ‚Åª¬π ‚àô Q)`)
      write-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | just (x'' , _) with split-+-Str (Œ¥ x'' f)
      ... | left _ = refl
      ... | just _ = refl


      -- write-comm-impl e p x with write-comm-impl-2 e p x
      -- ... | left P = {!!}
      -- write-comm-impl e p (left x) | just (fst‚ÇÅ , P) = refl
      -- write-comm-impl e p (just x) | just (y , P) with ŒΩ-impl p (just x) | P
      -- write-comm-impl e p (just x) | just (left x' , P) | .(_ , id-Q , left x') | refl-StrId = refl
      -- write-comm-impl e p (just x) | just (just x' , P) | .(_ , id-Q , just x') | refl-StrId with split-+-Str (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      -- ... | left x‚ÇÅ = {!!}
      -- write-comm-impl (left x‚ÇÇ) p (just x) | just (just x' , P) | .(_ , id-Q , just x') | refl-StrId | just x‚ÇÅ = refl
      -- write-comm-impl (just x‚ÇÇ) p (just x) | just (just x' , P) | .(_ , id-Q , just x') | refl-StrId | just (x'' , x''p) with split-+-Str (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      -- write-comm-impl (just x‚ÇÇ) p (just x) | just (just x' , P) | .(_ , id-Q , just x') | refl-StrId | just (x'' , x''p) | left (x''2 , x''2p) with x''2p ‚Åª¬π ‚àô x''p
      -- ... | ()
      -- write-comm-impl (just x‚ÇÇ) p (just x) | just (just x' , P) | .(_ , id-Q , just x') | refl-StrId | just (x'' , x''p) | right (x''2 , x''2p) with x''2p ‚Åª¬π ‚àô x''p
      -- ... | refl-StrId = refl

{-

      -- write-comm-impl e p (left x) = refl
      -- write-comm-impl e (last nothing) (just x) = refl
      -- write-comm-impl e (last (just x‚ÇÅ)) (just x) = {!!} -- with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x)
      -- write-comm-impl f (e ‚à∑ p) (just x) with ŒΩ-impl p (right x) | ŒΩ-impl-isNormal p (right x)
      -- ... | _ , some x‚ÇÅ , just x‚ÇÇ | Y = {!!}
      -- ... | _ , id-Q , left x‚ÇÅ | Y = {!!}
      -- ... | _ , id-Q , just x' | Y with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      -- ... | left _ = {!!}
      -- write-comm-impl f (left x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | Y | just x'' = {!!}
      -- write-comm-impl f (just x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | Y | just (x'' , _) = {!!}

      -- ... | _ , id-Q , left x‚ÇÅ = {!!}
      -- ... | _ , some x‚ÇÇ , left x‚ÇÅ = {!!}
      -- ... | _ , p' , just x‚ÇÅ = {!!}

      -- with ŒΩ-impl p (right x) | ŒΩ-impl (e ‚à∑ p) (right x)
      -- ... | _ , some x‚ÇÅ , x' | _ , id-Q , left x‚ÇÇ = {!!}
      -- ... | _ , some x‚ÇÅ , x' | _ , id-Q , just x‚ÇÇ = {!!}
      -- ... | _ , some x‚ÇÅ , x' | _ , some x‚ÇÇ , x'2 = {!!}
      -- ... | _ , id-Q , left x' | _ , id-Q , left x‚ÇÅ = {!!}
      -- ... | _ , id-Q , left x' | _ , id-Q , just x‚ÇÅ = {!!}
      -- ... | _ , id-Q , left x' | _ , some x‚ÇÅ , left x‚ÇÇ = {!!}
      -- ... | _ , id-Q , left x' | _ , some x‚ÇÅ , just x‚ÇÇ = {!!}
      -- ... | _ , id-Q , just x' | Z = {!!}


      -- with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      -- ... | left x‚ÇÅ = {!!}
      -- write-comm-impl f (left x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | just (x'' , _) = {!!}
      -- write-comm-impl f (just x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | just (x'' , _) = {!!}

      -- write-comm-impl f (e ‚à∑ p) (just x) with ŒΩ-impl p (right x)
      -- ... | _ , some x‚ÇÅ , x' = {!!}
      -- ... | _ , id-Q , left x' = {!!}
      -- ... | _ , id-Q , just x' with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x')
      -- ... | left x‚ÇÅ = {!!}
      -- write-comm-impl f (left x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | just (x'' , _) = {!!}
      -- write-comm-impl f (just x‚ÇÅ ‚à∑ p) (just x) | _ , id-Q , just x' | just (x'' , _) = {!!}


      -- write-comm-impl e p (left x) = refl
      -- write-comm-impl f (last (nothing)) (just x) = refl
      -- write-comm-impl f (last (just x‚ÇÅ)) (just x) with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x)
      -- ... | just _ = refl
      -- ... | left P with split-+ (‚ü® ‚ü® decompose ‚ü© ‚ü© _ x)
      -- ... | left _ = refl
      -- ... | just Q = {!!} -- ùüò-elim (left‚â¢right (snd P ‚Åª¬π ‚àô snd Q))
      -- write-comm-impl f (e ‚à∑ p) (just x) = {!!}

-}
      write-comm : ‚àÄ{k j} -> (e : Edge {{of Q}} j k) -> (x : ‚ü® Mod X k ‚ü©)-> ŒΩ‚ÇÅ (write e (ŒΩ‚ÇÅ x)) ‚â° ŒΩ‚ÇÅ (write e x)
      write-comm e (j , id-Q , x) = refl
      write-comm e (j , some p , x) = ` write-comm-impl e p x `
      -- write-comm e (j , id-Q , x) = refl
      -- write-comm e (j , some p , x) = write-comm-impl e p x
{-
      -- write-comm e (j , p , left x) = refl
      -- write-comm e (j , id-Q , just x) = refl
      -- write-comm e (j , some p , just x) = ?

-}
    module _ {X Y : IdxSet K ùëñ} where
      apply : ‚àÄ{k} -> (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod Y k ‚ü©
      apply f (_ , p , x) = (_ , p , ‚ü® _=<< {{of T'}} f ‚ü© _ x)
      -- apply f (_ , p , left x) = (_ , p , left x)
      -- apply f (_ , p , right x) = (_ , p , right (‚ü® f =<< ‚ü© _ x))


      -- % https://q.uiver.app/?q=WzAsNixbMCwwLCJUWCJdLFswLDEsIlRUWSJdLFswLDIsIlRZIl0sWzEsMCwiRFRYIl0sWzEsMSwiRFRUWSJdLFsxLDIsIkRUWSJdLFswLDMsIlxcZGVsdGEiXSxbMCwxLCJUZiIsMl0sWzMsNCwiRFRmIl0sWzEsMiwiXFxtdSIsMl0sWzIsNSwiXFxkZWx0YSIsMl0sWzQsNSwiRFxcbXUiXV0=
      -- | Here we do the following:
      -- \[\begin{tikzcd}
      -- 	TX & DTX \\
      -- 	TTY & DTTY \\
      -- 	TY & DTY
      -- 	\arrow["\delta", from=1-1, to=1-2]
      -- 	\arrow["Tf"', from=1-1, to=2-1]
      -- 	\arrow["DTf", from=1-2, to=2-2]
      -- 	\arrow["\mu"', from=2-1, to=3-1]
      -- 	\arrow["\delta"', from=3-1, to=3-2]
      -- 	\arrow["D\mu", from=2-2, to=3-2]
      -- \end{tikzcd}\]
      Œ¥-comm : ‚àÄ(f : X ‚ü∂ ‚ü® T ‚ü© Y) -> ‚àÄ{j k} -> ‚àÄ(e : Edge {{of Q}} k j) (x : ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> map-Maybe (‚ü® map f ‚óÜ join ‚ü© _) (Œ¥ x e) ‚â° Œ¥ (‚ü® map f ‚óÜ join ‚ü© _ x) e
      Œ¥-comm f e x =
        let P1 : ‚ü® decompose ‚ü© ‚óÜ map {{of T ‚óÜ Decomp Dir}} f ‚â£ map f ‚óÜ ‚ü® decompose ‚ü©
            P1 = naturality {{of decompose}} f
            P2 : ‚ü® decompose ‚ü© ‚óÜ map {{of Decomp Dir}} (‚ü® Œº T' ‚ü© {Y}) ‚â£ ‚ü® Œº T' ‚ü© ‚óÜ ‚ü® decompose ‚ü©
            P2 = commutes:decompose
            -- P3 : ‚ü® decompose ‚ü© ‚óÜ map {{of T ‚óÜ Decomp Dir}} f ‚óÜ map {{of Decomp Dir}} (‚ü® Œº T' ‚ü©)
            --      ‚â£ map f ‚óÜ ‚ü® Œº T' ‚ü© ‚óÜ ‚ü® decompose ‚ü©
            -- P3 = {!!}

            P3 : ‚ü® decompose ‚ü© ‚óÜ map {{of Decomp Dir}} (map {{of T}} f ‚óÜ ‚ü® Œº T' ‚ü©)
                 ‚â£ map f ‚óÜ ‚ü® Œº T' ‚ü© ‚óÜ ‚ü® decompose ‚ü©
            P3 = {!!}
            -- P4 : map-Maybe
            --       (Œª a ‚Üí
            --         ‚ü® IMonad.join (of T') ‚ü© _ (‚ü® IFunctor.map (of ‚ü® T' ‚ü©) f ‚ü© _ a))
            --       (Œ¥ x e)
            --       ‚â°
            --       Œ¥ (‚ü® IMonad.join (of T') ‚ü© _ (‚ü® IFunctor.map (of ‚ü® T' ‚ü©) f ‚ü© _ x))
            --       e
            P4 = funExt‚Åª¬π (funExt‚Åª¬π (P3 _ x) _) e
        in P4

      apply-comm-impl : {j k : K} -> (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> (p : QPath {{of Q}} k j) -> (x : ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> ŒΩ‚ÇÅ (apply f (fst (ŒΩ-impl p x))) ‚â° fst (ŒΩ ((_ , some p , ‚ü® map f ‚óÜ join ‚ü© _ x)))
      apply-comm-impl f (last e) x with (Œ¥-comm f e x) | split-+-Str (Œ¥ x e)
      ... | X | left x‚ÇÅ = refl
      ... | X | just (a , P) with split-+-Str (Œ¥ (‚ü® map f ‚óÜ join ‚ü© _ x) e)
      ... | left (tt , Q) =
        let R : map-Maybe (‚ü® map f ‚óÜ join ‚ü© _) (just a) ‚â° nothing
            R = cong (map-Maybe (‚ü® map f ‚óÜ join ‚ü© _)) (‚â°-Str‚Üí‚â° (P ‚Åª¬π)) ‚àô X ‚àô ` Q `
        in ùüò-rec (right‚â¢left R)
      ... | just (b , Q) =
        let R : map-Maybe (‚ü® map f ‚óÜ join ‚ü© _) (just a) ‚â° just b
            R = cong (map-Maybe (‚ü® map f ‚óÜ join ‚ü© _)) (‚â°-Str‚Üí‚â° (P ‚Åª¬π)) ‚àô X ‚àô ` Q `

        in Œª i -> (_ , id-Q , isInjective:right R i)

      -- see 2021-02-20:
      apply-comm-impl f (e ‚à∑ p) x with ŒΩ-impl p x | ŒΩ-impl p (‚ü® map f ‚óÜ join ‚ü© _ x) | ‚â°‚Üí‚â°-Str (apply-comm-impl f p x)
      ... | (_ , some p' , x') , N    | (_ , p'2 , x'2) , N2 | Y with ŒΩ-impl p' (‚ü® map f ‚óÜ join ‚ü© _ x')
      apply-comm-impl f (e ‚à∑ p) x | (_ , some p' , x') , N | (_ , id-Q , x'2) , N2 | refl-StrId | .(_ , id-Q , x'2) , snd‚ÇÅ = refl
      apply-comm-impl f (e ‚à∑ p) x | (_ , some p' , x') , N | (_ , some x‚ÇÅ , x'2) , N2 | refl-StrId | .(_ , some x‚ÇÅ , x'2) , snd‚ÇÅ = refl

      apply-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | .(fst (ŒΩ (_ , id-Q , _))) , snd‚ÇÅ | refl-StrId with split-+-Str (Œ¥ x' e) | split-+-Str (Œ¥ (‚ü® map f ‚óÜ join ‚ü© _ x') e)
      ... | just (a , P) | left (tt , Q) =
        -- NOTE: here we do the same as in the `last e` case above
        let R : map-Maybe (‚ü® map f ‚óÜ join ‚ü© _) (just a) ‚â° nothing
            R = cong (map-Maybe (‚ü® map f ‚óÜ join ‚ü© _)) (‚â°-Str‚Üí‚â° (P ‚Åª¬π)) ‚àô Œ¥-comm f e x' ‚àô ` Q `
        in ùüò-rec (right‚â¢left R)
        -- NOTE: here we do the same as in the `last e` case above
      ... | just (a , P) | just (b , Q) =
        let R : map-Maybe (‚ü® map f ‚óÜ join ‚ü© _) (just a) ‚â° just b
            R = cong (map-Maybe (‚ü® map f ‚óÜ join ‚ü© _)) (‚â°-Str‚Üí‚â° (P ‚Åª¬π)) ‚àô Œ¥-comm f e x' ‚àô ` Q `
        in Œª i -> (_ , id-Q , isInjective:right R i)

      ... | left (tt , Q) | Z with split-+-Str (Œ¥ (‚ü® map f ‚óÜ join ‚ü© _ x') e)
      apply-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | .(_) , snd‚ÇÅ | refl-StrId | left (tt , Q) | just (_ , Z1) | left (_ , Z2) = ùüò-rec (left‚â¢right `(Z2 ‚Åª¬π ‚àô Z1)`)
      apply-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | .(_) , snd‚ÇÅ | refl-StrId | left (tt , Q) | just (_ , Z1) | just (_ , Z2) = Œª i -> (_ , id-Q , isInjective:right R i)
        where R = `(Z2 ‚Åª¬π ‚àô Z1)`
      apply-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | .(_) , snd‚ÇÅ | refl-StrId | left (tt , Q) | left x‚ÇÅ | left x‚ÇÇ = refl
      apply-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | .(_) , snd‚ÇÅ | refl-StrId | left (tt , Q) | left (_ , Z1) | just (_ , Z2) = ùüò-rec (right‚â¢left `(Z2 ‚Åª¬π ‚àô Z1)`)


-- ... | (_ , some p' , x') , N    | (_ , id-Q , x'2) , N2 | Y  = {!!}
      -- ... | (_ , some p' , x') , N    | (_ , some p'2 , x'2) , N2 | Y with ŒΩ-impl p' (‚ü® map f ‚óÜ join ‚ü© _ x')
      -- apply-comm-impl f (e ‚à∑ p) x | (_ , some p' , x') , N | (_ , some p'2 , x'2) , N2 | refl-StrId | .(_ , some p'2 , x'2) , snd‚ÇÅ = refl


      apply-comm : ‚àÄ{k} -> (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> (x : ‚ü® Mod X k ‚ü©) -> ŒΩ‚ÇÅ (apply f (ŒΩ‚ÇÅ x)) ‚â° ŒΩ‚ÇÅ (apply f x)
      apply-comm f (_ , id-Q , x) = refl
      apply-comm f (_ , some p , x) = apply-comm-impl f p x
      -- apply-comm f (_ , id-Q , x) = refl
      -- apply-comm f (_ , some x‚ÇÅ , x) = {!!}

  ùë∫ : IdxSet K ùëñ -> PSh ùîá ùëñ
  ùë∫ X = mirror-Functor (free-Diagram f)
    where f : QuiverHom (Q) (ForgetCategory (` Set ùëñ ` ·µí·µñ))
          ‚ü® f ‚ü© k = Mod-Normal X k
          ‚ü® IQuiverHom.qmap (of f) e ‚ü© (x , _) = ŒΩ (write e x)
          of IQuiverHom.qmap (of f) e = record {}


  private
    module _ {X Y : IdxSet K ùëñ} (f : X ‚ü∂ ‚ü® T ‚ü© Y) where

  {-
      g' : ‚àÄ{k} -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod Y k ‚ü©
      g' ((j , p , left a)) = ((j , p , left a)) -- normaliz
      g' ((j , p , just x)) = (j , p , just (‚ü® f =<< ‚ü© j x))
      -}

      g : ‚àÄ(k : K) -> ‚ü® ùë∫ X ‚ü© k ‚ü∂ ‚ü® ùë∫ Y ‚ü© k
      ‚ü® g k ‚ü© (x , xp) = ŒΩ (apply f x)


      gp : {a b : K} (e : (Edge {{Dir}} b a)) (x : ‚ü® ‚ü® ùë∫ X ‚ü© a ‚ü©) ‚Üí
            ‚ü® map {{of ùë∫ Y}} (‚©ö e) ‚ü© (‚ü® g a ‚ü© x) ‚â°
            ‚ü® g b ‚ü© (‚ü® map {{of ùë∫ X}} (‚©ö e) ‚ü© x)
      gp e ((j , p , x) , pp) = byFirstP P

       where P : ŒΩ‚ÇÅ (write e (ŒΩ‚ÇÅ (apply f (j , p , x))))
                  ‚â°
                ŒΩ‚ÇÅ (apply f (ŒΩ‚ÇÅ (write e (j , p , x))))
             P = write-comm e (apply f (j , p , x)) ‚àô apply-comm f (write e (j , p , x)) ‚Åª¬π

  module _ {X Y : IdxSet K ùëñ} where
    map-ùë∫ : (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> ùë∫ X ‚ü∂ ùë∫ Y
    map-ùë∫ f = mirror-Nat (free-Diagram-Natimpl (g f) (Œª e x -> gp f e x ‚Åª¬π))

  private
    module _ {X : IdxSet K ùëñ} where
      Œπ : ‚àÄ{k} -> (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) -> ‚ü® Mod-Normal X k ‚ü©
      Œπ x = (_ , id-Q , x) , by-id

      infixr 40 _‚Ü∑_
      _‚Ü∑_ : ‚àÄ{k j} -> Hom {{of ùîá}} j k -> (x : ‚ü® Mod-Normal X k ‚ü©) -> ‚ü® Mod-Normal X j ‚ü©
      _‚Ü∑_ f x = ‚ü® map {{of ùë∫ X}} f ‚ü© x

      assoc-‚Ü∑ : ‚àÄ{j k l} -> {f : Hom {{of ùîá}} l k} -> {g : Hom {{of ùîá}} k j} -> {x : ‚ü® Mod-Normal X j ‚ü©}
                -> f ‚Ü∑ g ‚Ü∑ x ‚â° (f ‚óÜ g) ‚Ü∑ x
      assoc-‚Ü∑ {f = f} {g = g} {x} = functoriality-‚óÜ {{of ùë∫ X}} {f = g} {g = f} x ‚Åª¬π

      lem-0 : ‚àÄ{k} -> (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) -> ` a0 ` ‚Ü∑ Œπ x ‚â° Œπ e0
      lem-0 {k = k} x with split-+-Str (Œ¥ x a0) | ‚â°‚Üí‚â°-Str (a0-adsorb x)
      ... | left (_ , P) | Q = ùüò-rec (left‚â¢right `(P ‚Åª¬π ‚àô Q)`)
      ... | just (b , P) | Q with P ‚Åª¬π ‚àô Q
      ... | refl-StrId = refl


    module _ {X Y : IdxSet K ùëñ} (Œ± : ùë∫ X ‚ü∂ ùë∫ Y) where
      -- lem-1 : ‚àÄ{k : K} -> {} -> ‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ {k = k} e0) ‚â° Œπ e0

      module lem-1 {k : K} (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) where
        Œ±' = ‚ü® ‚ü® Œ± ‚ü© {k} ‚ü©
        P1 : ‚àÄ y -> ` a0 ` ‚Ü∑ Œ±' (Œπ y) ‚â° Œ±' (Œπ e0)
        P1 = Œª y -> ` a0 ` ‚Ü∑ Œ±' (Œπ y) ‚â°‚ü® naturality {{of Œ±}} ` a0 ` (Œπ y) ‚ü©
                    Œ±' (` a0 ` ‚Ü∑ Œπ y) ‚â°[ i ]‚ü® Œ±' (lem-0 y i) ‚ü©
                    Œ±' (Œπ e0)          ‚àé

        P1-1 : ` a0 ` ‚Ü∑ Œ±' (Œπ x) ‚â° Œ±' (Œπ e0)
        P1-1 = P1 x

        P1-2 : (` a0 ` ‚óÜ ` a0 `) ‚Ü∑ Œ±' (Œπ x) ‚â° Œ±' (Œπ e0)
        P1-2 = (` a0 ` ‚óÜ ` a0 `) ‚Ü∑ Œ±' (Œπ x) ‚â°‚ü® assoc-‚Ü∑ {f = ` a0 `} {g = ` a0 `} {x = Œ±' (Œπ x)} ‚ü©
                ` a0 ` ‚Ü∑ (` a0 ` ‚Ü∑ Œ±' (Œπ x)) ‚â°[ i ]‚ü® ` a0 ` ‚Ü∑ P1 x i ‚ü©
                ` a0 ` ‚Ü∑ Œ±' (Œπ e0)          ‚â°‚ü® P1 e0 ‚ü©
                Œ±' (Œπ e0)                    ‚àé

        P2 : ` a0 ` ‚Ü∑ Œ±' (Œπ x) ‚â° (` a0 ` ‚óÜ ` a0 `) ‚Ü∑ Œ±' (Œπ x)
        P2 = P1-1 ‚àô P1-2 ‚Åª¬π

        proof : ‚àë Œª y -> ‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ x) ‚â° Œπ y
        proof with Œ±' (Œπ x) | ‚â°‚Üí‚â°-Str P2
        ... | (_ , id-Q , x') , by-id | _ = _ , refl
        ... | (_ , some p' , x') , N   | Q with ŒΩ-impl p' x' | ŒΩ-idempotent-impl p' x' N
        ... | .(_ , some p' , x') , N2 | refl-StrId with ŒΩ-impl p' x' | ŒΩ-idempotent-impl p' x' N2
        proof | (_ , some p' , x') , N | () | .(_ , some p' , x') , N2 | refl-StrId | .(_ , some p' , x') , snd‚ÇÅ | refl-StrId


  module _ {X Y : IdxSet K ùëñ} where
    map‚Åª¬π-ùë∫ : (ùë∫ X ‚ü∂ ùë∫ Y) -> (X ‚ü∂ ‚ü® T ‚ü© Y)
    ‚ü® map‚Åª¬π-ùë∫ Œ± ‚ü© k x = lem-1.proof Œ± (‚ü® return ‚ü© _ x) .fst



    -- with ‚ü® ‚ü® f ‚ü© ‚ü© (Œπ (‚ü® return ‚ü© _ x))
    -- ... | a = {!!}

      -- ((_ , id-Q , ‚ü® return {{of T'}} ‚ü© _ x) , by-id)

    -- ‚ü® map‚Åª¬π-ùë∫ f ‚ü© k x with ‚ü® ‚ü® f ‚ü© ‚ü© ((_ , id , right (‚ü® return ‚ü© _ x)) , by-[])
    -- ... | (_ , q , left y) , _ = {!!}
    -- ... | (_ , id-Q , just y) , _ = y
    -- ... | (_ , some x‚ÇÅ , just y) , _ = {!!}
    -- of map‚Åª¬π-ùë∫ f = record {}
    -- -- (free-Diagram-Natimpl (g f) (Œª e x -> gp f e x))

{-



      -- where g : ‚àÄ(k : K) -> ‚ü® ùë∫ X ‚ü© k ‚ü∂ ‚ü® ùë∫ Y ‚ü© k
      --       ‚ü® g k ‚ü© ((j , p , left a) , _) = ŒΩ ((j , p , left a)) -- ŒΩ (j , p , {!!}) -- (j , p ,  ‚ü® f =<< ‚ü© j x)
      --       ‚ü® g k ‚ü© ((j , p , just x) , _) = ŒΩ (j , p , just (‚ü® f =<< ‚ü© j x)) -- (j , p ,  ‚ü® f =<< ‚ü© j x)
      --       of g k = record {}

      --       gp : {a b : K} (e : Maybe (Edge {{Dir}} a b)) (x : ‚ü® ‚ü® ùë∫ X ‚ü© a ‚ü©) ‚Üí
      --             ‚ü® map {{of ùë∫ Y}} (‚©ö e) ‚ü© (‚ü® g a ‚ü© x) ‚â°
      --             ‚ü® g b ‚ü© (‚ü® map {{of ùë∫ X}} (‚©ö e) ‚ü© x)
      --       gp e ((j , p , left x) , _) = {!!}
      --       gp e ((j , p , just x) , _) = {!!}


            -- gp2 : {a b : K}
            --         (e : ùüô-ùí∞ +-ùí∞ Edge {{Dir}} a b)
            --         (x
            --         : Œ£ (Œ£ K (Œª j ‚Üí Œ£ (Hom {{of ùîá ·µí·µñ}} j a) (Œª a‚ÇÅ ‚Üí ùüô-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j)))
            --           (isNormal X a)) ‚Üí
            --         ŒΩ
            --         (fst (fst (‚ü® g a ‚ü© x)) ,
            --         (some (last e)) ‚óÜ (fst (snd (fst (‚ü® g a ‚ü© x)))) ,
            --         snd (snd (fst (‚ü® g a ‚ü© x))))
            --         ‚â°
            --         ‚ü® g b ‚ü©
            --         (ŒΩ
            --         (fst (fst x) ,
            --           (some (last e)) ‚óÜ (fst (snd (fst x)))  ,
            --           snd (snd (fst x))))
            -- gp2 = {!!}
    -- ‚ü® ‚ü® map-ùë∫ f ‚ü© {x = k} ‚ü© ((j , p , x) , _) = ŒΩ (j , p ,  ‚ü® f =<< ‚ü© j x)
    -- of ‚ü® map-ùë∫ f ‚ü© = record {}
    -- INatural.naturality (of map-ùë∫ f) = {!!}

-}


  Functor:ùë∫ : Functor (` IdxSet K ùëñ ` ‚åÑ T') `(PSh ùîá ùëñ)`
  ‚ü® Functor:ùë∫ ‚ü© X = ùë∫ ‚ü® X ‚ü©
  IFunctor.map (of Functor:ùë∫) f = map-ùë∫ ‚ü® f ‚ü©
  IFunctor.functoriality-id (of Functor:ùë∫) = {!!}
  IFunctor.functoriality-‚óÜ (of Functor:ùë∫) = {!!}
  IFunctor.functoriality-‚â£ (of Functor:ùë∫) = {!!}



{-
  ùîá = Monoid:Free Dir

  private
    Mon : ‚àÄ(A : ùí∞ ùëñ) -> MonoidModule ùîá ùëñ
    Mon A = MonoidModule:Free ùîá (‚ü® T ‚ü© A)

  norm' : ‚ü® ùîá ‚ü© -> ‚ü® T ‚ü© A -> ‚ü® Mon A ‚ü©
  norm' [] a = ([] , a)
  norm' (d ‚à∑ ds) a with ‚ü® decompose ‚ü© a
  ... | left x = (d ‚à∑ ds , a)
  ... | just x = norm' ds (x d)

  norm : ‚ü® Mon A ‚ü© -> ‚ü® Mon A ‚ü©
  norm (ds , a) = norm' ds a



  private
    data isNormal : ‚ü® Mon A ‚ü© -> ùí∞ (ùëñ ‚Å∫) where
       by-[] : ‚àÄ{a : ‚ü® T ‚ü© A} -> (depth a ‚â° 0 -> ùüò-ùí∞) -> isNormal ([] , a)
       by-depth : ‚àÄ{ds} -> ‚àÄ{a : ‚ü® T ‚ü© A} -> depth a ‚â° 0 -> isNormal (ds , a)

    lem::1 : ‚àÄ(a : ‚ü® Mon A ‚ü©) -> isNormal a -> norm a ‚â° a
    lem::1 ([] , a) P = refl
    lem::1 (d ‚à∑ ds , a) (by-depth P) with ‚ü® decompose ‚ü© a | strict a
    ... | left a‚ÇÇ | X = refl
    ... | just a‚ÇÇ | X =
      let P‚ÇÇ : depth (a‚ÇÇ d) < depth a
          P‚ÇÇ = X d

          P‚ÇÉ : depth (a‚ÇÇ d) < 0
          P‚ÇÉ = transport (Œª i -> depth (a‚ÇÇ d) < P i) P‚ÇÇ

          P‚ÇÑ : ùüò-ùí∞
          P‚ÇÑ = P‚ÇÉ .snd (‚â§0‚Üí‚â°0 (P‚ÇÉ .fst))

      in ùüò-elim P‚ÇÑ

    lem::2 : ‚àÄ(ds : ‚ü® ùîá ‚ü©) -> (a : ‚ü® T ‚ü© A) -> isNormal (norm' ds a)
    lem::2 [] a with split-‚Ñï (depth a)
    ... | left x = by-depth x
    ... | just x = by-[] (Œª a‚â°0 -> zero‚â¢suc (a‚â°0 ‚Åª¬π ‚àô snd x))
    lem::2 (d ‚à∑ ds) a with ‚ü® decompose ‚ü© a | strict a
    ... | left x | P = by-depth (transport (Œª i -> depth (P (~ i)) ‚â° 0) depth/return)
    ... | just x | P = lem::2 ds (x d)

    lem::3 : ‚àÄ(a : ‚ü® Mon A ‚ü©) -> norm (norm a) ‚â° norm a
    lem::3 a = lem::1 (norm a) (lem::2 (fst a) (snd a))

  -}




