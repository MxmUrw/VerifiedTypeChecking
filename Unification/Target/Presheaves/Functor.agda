

module Verification.Unification.Target.Presheaves.Functor where

open import Verification.Conventions
open import Verification.Core.Type
-- open import Verification.Core.Algebra
open import Verification.Core.Order
open import Verification.Core.Category.Definition
open import Verification.Core.Category.Functor.Presheaf
open import Verification.Core.Category.Quiver
open import Verification.Core.Category.Natural
open import Verification.Core.Category.FreeCategory
open import Verification.Core.Category.Instance.Cat
open import Verification.Core.Category.Instance.Functor
open import Verification.Core.Category.Instance.Type
open import Verification.Core.Category.Instance.Type.Coproducts
open import Verification.Core.Category.Instance.Kleisli
open import Verification.Core.Category.Instance.SmallCategories
open import Verification.Core.Category.Instance.TypeProperties
open import Verification.Core.Category.Instance.Set
open import Verification.Core.Category.Instance.IdxSet
open import Verification.Core.Category.Limit.Kan.Definition
open import Verification.Core.Category.Limit.Specific
open import Verification.Core.Category.Monad.Definition
open import Verification.Unification.RecAccessible
open import Verification.Core.Homotopy.Level


      -- % https://q.uiver.app/?q=WzAsNixbMCwwLCJUWCJdLFswLDEsIlRUWSJdLFswLDIsIlRZIl0sWzEsMCwiRFRYIl0sWzEsMSwiRFRUWSJdLFsxLDIsIkRUWSJdLFswLDMsIlxcZGVsdGEiXSxbMCwxLCJUZiIsMl0sWzMsNCwiRFRmIl0sWzEsMiwiXFxtdSIsMl0sWzIsNSwiXFxkZWx0YSIsMl0sWzQsNSwiRFxcbXUiXV0=
      -- | Here we do the following:
      -- \[\begin{tikzcd}
      -- 	TX & DTX \\
      -- 	TTY & DTTY \\
      -- 	TY & DTY
      -- 	\arrow["\delta", from=1-1, to=1-2]
      -- 	\arrow["Tf"', from=1-1, to=2-1]
      -- 	\arrow["DTf", from=1-2, to=2-2]
      -- 	\arrow["\mu"', from=2-1, to=3-1]
      -- 	\arrow["\delta"', from=3-1, to=3-2]
      -- 	\arrow["D\mu", from=2-2, to=3-2]
      -- \end{tikzcd}\]
module _ {ùíû : Category ùëñ} {T : Monad ùíû} {D : Functor ùíû ùíû} (Œ¥ : Natural ‚ü® T ‚ü© (‚ü® T ‚ü© ‚óÜ D)) where
  module _ {X Y : ‚ü® ùíû ‚ü©} (f : X ‚ü∂ ‚ü® ‚ü® T ‚ü© ‚ü© Y) (P : commutes-Nat (Œº T) Œ¥) where
    private
            T' = ‚ü® T ‚ü©
    naturalJoinCommute : ‚ü® Œ¥ ‚ü© ‚óÜ map (map f ‚óÜ join) ‚â£ map f ‚óÜ join ‚óÜ ‚ü® Œ¥ ‚ü©
    naturalJoinCommute = ‚ü® Œ¥ ‚ü© ‚óÜ map (map f ‚óÜ join)

                         ‚â£‚ü® refl ‚óà functoriality-‚óÜ ‚ü©

                         ‚ü® Œ¥ ‚ü© ‚óÜ (map (map f) ‚óÜ map join)

                         ‚â£‚ü® assoc-r-‚óÜ ‚ü©

                         ‚ü® Œ¥ ‚ü© ‚óÜ map (map f) ‚óÜ map join

                         ‚â£‚ü® naturality f ‚óà refl ‚ü©

                         map f ‚óÜ ‚ü® Œ¥ ‚ü© ‚óÜ map join

                         ‚â£‚ü® assoc-l-‚óÜ ‚ü©

                         map f ‚óÜ (‚ü® Œ¥ ‚ü© ‚óÜ map join)

                         ‚â£‚ü® refl ‚óà P ‚ü©

                         map f ‚óÜ (join ‚óÜ ‚ü® Œ¥ ‚ü©)

                         ‚â£‚ü® assoc-r-‚óÜ ‚ü©

                         map f ‚óÜ join ‚óÜ ‚ü® Œ¥ ‚ü©       ‚àé



-- {-# BUILTIN REWRITE _‚â°_ #-}

--------------------------------------------------------------------
-- == The functor to Recursion Modules
-- | Let A, B, C be sets, and let $T$ be a fixed \AD{RecMonad} in this section.

-- Monoid:Path : Quiver ùëñ -> Monoid (ùëñ ‚åÑ 0 ‚äî ùëñ ‚åÑ 1)
-- ‚ü® Monoid:Path Q ‚ü© = Maybe (‚àë Œª (x : ‚ü® Q ‚ü©) -> ‚àë Œª (y : ‚ü® Q ‚ü©) -> Edge {{of Q}} x y)
-- IMonoid.ùü∑ (of Monoid:Path Q) = {!!}
-- IMonoid._‚ãÖ_ (of Monoid:Path Q) = {!!}
-- IMonoid.assoc-‚ãÖ (of Monoid:Path Q) = {!!}
-- IMonoid.unit-l-‚ãÖ (of Monoid:Path Q) = {!!}
-- IMonoid.unit-r-‚ãÖ (of Monoid:Path Q) = {!!}

-- FFF = Functor:Either ùüô-ùí∞

-- module _ {K : ùí∞ ùëñ} (E : K -> K -> ùí∞ ùëó) where
--   data Edge‚Çä : (a b : Maybe K) -> ùí∞ (ùëñ ÔΩ§ ùëó) where
--     edge : ‚àÄ {a b} -> E a b -> Edge‚Çä (just a) (just b)
--     zedge : ‚àÄ{a} -> Edge‚Çä nothing (just a)


module _ {A : ùí∞ ùëñ} {a b : A} (P : isSet A) where
  isSet-Str : ‚àÄ(p q : a ‚â°-Str b) -> p ‚â° q
  isSet-Str refl-StrId q =
    let P1 : ‚â°-Str‚Üí‚â° q ‚â° refl
        P1 = P _ _ _ refl
        P2 : q ‚â° refl
        P2 = ‚â°-change-iso q ‚Åª¬π ‚àô cong ‚â°‚Üí‚â°-Str P1 ‚àô ‚â°-change-iso refl
    in P2 ‚Åª¬π



module _ {K : ùí∞ ùëñ} (T' : Monad `(IdxSet K ùëñ)`) {{_ : IRecAccessible T'}} where
  T = ‚ü® T' ‚ü©
  private
    Q : Quiver (ùëñ , ùëñ , ùëñ)
    ‚ü® Q ‚ü© = K
    IQuiver.Edge (of Q) = Edge {{Dir}}
    --Maybe (Edge {{Dir}} a b)
    IQuiver._‚âà_ (of Q) = _‚â°_
    IQuiver.isEquivRelInst (of Q) = isEquivRel:Path

  ùîá = (Category:Free Q)

  instance _ = of ùîá
  instance _ = of Q
  instance _ = of T
  instance _ = of T'

  Mod : IdxSet K ùëñ -> K -> Set ùëñ
  ‚ü® Mod X k ‚ü© = ‚àë Œª j -> Hom {{of ùîá}} k j √ó-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j
  of Mod X k = {!!}


  private
    data isNormal {A : IdxSet K ùëñ} : ‚àÄ{k} -> ‚ü® Mod A k ‚ü© -> ùí∞ (ùëñ) where
      by-id : ‚àÄ{k} -> ‚àÄ{a : ‚ü® ‚ü® T ‚ü© A ‚ü© k} -> isNormal (_ , id-Q , a)
      by-nothing : ‚àÄ{k j} -> ‚àÄ{a : ‚ü® ‚ü® T ‚ü© A ‚ü© j} -> (e : Edge {{of Q}} k j) -> Œ¥ a e ‚â°-Str nothing -> isNormal (_ , some (last e) , a)
      by-later : ‚àÄ{j k‚ÇÅ k‚ÇÇ} -> ‚àÄ{a : ‚ü® ‚ü® T ‚ü© A ‚ü© j} -> (p : QPath {{of Q}} k‚ÇÇ j) -> (e : Edge {{of Q}} k‚ÇÅ k‚ÇÇ) -> isNormal (_ , some p , a) -> isNormal (_ , some (e ‚à∑ p) , a)

      -- by-[] : ‚àÄ{a : ùüö-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© A ‚ü© k} -> isNormal (_ , id-Q , a)
      -- by-eval : ‚àÄ{j} -> ‚àÄ{a : ‚ü® ‚ü® T ‚ü© A ‚ü© j} -> {a' : ‚ü® A ‚ü© j} -> ‚ü® ‚ü® decompose ‚ü© ‚ü© _ a ‚â°-Str left a'
      --            -> (p : Hom k j) -> isNormal (_ , p , right a)

        -- by-[] : ‚àÄ{a : ‚ü® T ‚ü© A} -> (depth a ‚â° 0 -> ùüò-ùí∞) -> isNormal ([] , a)
        -- by-depth : ‚àÄ{ds} -> ‚àÄ{a : ‚ü® T ‚ü© A} -> depth a ‚â° 0 -> isNormal (ds , a)

    lem-10 : ‚àÄ{A : IdxSet K ùëñ} {k} {a : ‚ü® Mod A k ‚ü©} -> isProp (isNormal a)
    lem-10 by-id by-id = refl
    lem-10 {A} {k} (by-nothing e p) (by-nothing .e q) i = by-nothing e (isSet-Str {!!}  p q i) -- (hlevel {{ISet:this {{of ‚ü® T ‚ü© A}}}})
    lem-10 (by-later p e x) (by-later .p .e y) i = by-later p e (lem-10 x y i)

    instance
      IProp:isNormal : ‚àÄ{A : IdxSet K ùëñ} {k} {a : ‚ü® Mod A k ‚ü©} -> IHType 1 (isNormal a)
      IHType.hlevel IProp:isNormal = lem-10


  Mod-Normal : IdxSet K ùëñ -> K -> Set ùëñ
  ‚ü® Mod-Normal X k ‚ü© = ‚àë Œª (a : ‚ü® Mod X k ‚ü©) -> isNormal a
  of Mod-Normal X k = {!!}


  private
    module _ {X : IdxSet K ùëñ} where


      ŒΩ-impl : {j k : K} -> (p : QPath {{of Q}} (k) (j)) -> ‚ü® ‚ü® T ‚ü© X ‚ü© j -> ‚ü® Mod-Normal X k ‚ü©
      ŒΩ-impl (last e) x with split-+-Str (Œ¥ x e)
      ... | left (tt , z) = (_ , some (last e) , x) , by-nothing e z
      ... | just (x' , _) = (_ , id-Q , x') , by-id
      ŒΩ-impl (e ‚à∑ p) x with ŒΩ-impl p x
      ... | (_ , some p' , x') , N = (_ , some (e ‚à∑ p') , x') , by-later _ _ N
      ... | (_ , id-Q , x') , N with split-+-Str (Œ¥ x' e)
      ... | left (tt , z) = (_ , some (last e) , x') , by-nothing e z
      ... | just (x'' , _) = (_ , id-Q , x'') , by-id


      ŒΩ : ‚àÄ{k} -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod-Normal X k ‚ü©
      ŒΩ {.j} (j , id-Q , x) = (_ , id-Q , x) , by-id
      ŒΩ {k} (j , some p , x) = ŒΩ-impl p x

      ŒΩ‚ÇÅ : ‚àÄ{k} -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod X k ‚ü©
      ŒΩ‚ÇÅ x = fst (ŒΩ x)


      write : ‚àÄ{k j} -> (e : Edge {{of Q}} j k) -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod X j ‚ü©
      write e (_ , p , x) = (_ , ` e ` ‚óÜ p , x)


      ŒΩ-idempotent-impl : ‚àÄ{k j} -> (p : QPath {{of Q}} j k) (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) -> isNormal (_ , some p , x) -> ŒΩ‚ÇÅ (_ , some p , x) ‚â°-Str (_ , some p , x)
      ŒΩ-idempotent-impl .(last e) x (by-nothing e P) with split-+-Str (Œ¥ x e)
      ... | left _ = refl
      ... | just (_ , Q) = ùüò-rec (left‚â¢right `(P ‚Åª¬π ‚àô Q)`)
      ŒΩ-idempotent-impl .(e ‚à∑ p) x (by-later p e N) with ŒΩ-impl p x | ŒΩ-idempotent-impl p x N
      ... | .(_ , some p , x) , snd‚ÇÅ | refl-StrId = refl

      ŒΩ-idempotent : ‚àÄ{k} -> ‚àÄ(a : ‚ü® Mod-Normal X k ‚ü©) -> ŒΩ‚ÇÅ (fst a) ‚â°-Str fst a
      ŒΩ-idempotent ((_ , (some p) , x) , N) = ŒΩ-idempotent-impl p x N
      ŒΩ-idempotent ((_ , .id-Q , x) , by-id) = refl



      write-comm-impl : {j k l : K} -> (e : Edge {{of Q}} l k) -> (p : QPath {{of Q}} k j) -> (x : ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> ŒΩ‚ÇÅ (write e (fst (ŒΩ-impl p x))) ‚â°-Str fst (ŒΩ-impl (e ‚à∑ p) x)
      write-comm-impl f (last e) x with split-+-Str (Œ¥ x e)
      ... | just (x' , P) with split-+-Str (Œ¥ x' f)
      ... | left x‚ÇÅ = refl
      ... | just x‚ÇÅ = refl
      write-comm-impl f (last e) x | left (tt , P) with split-+-Str (Œ¥ x e)
      ... | left x‚ÇÅ = refl
      ... | just (_ , Q) = ùüò-rec (left‚â¢right `(P ‚Åª¬π ‚àô Q)`)
      write-comm-impl f (e ‚à∑ p) x with ŒΩ-impl p x
      ... | (_ , some p' , x') , N = ŒΩ-idempotent-impl (f ‚à∑ e ‚à∑ p') x' (by-later _ _ (by-later _ _ N))
      ... | (_ , id-Q , x') , N with split-+-Str (Œ¥ x' e)
      ... | left (tt , P) with split-+-Str (Œ¥ x' e)
      ... | left _ = refl
      ... | just (_ , Q) = ùüò-rec (left‚â¢right `(P ‚Åª¬π ‚àô Q)`)
      write-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | just (x'' , _) with split-+-Str (Œ¥ x'' f)
      ... | left _ = refl
      ... | just _ = refl




      write-comm : ‚àÄ{k j} -> (e : Edge {{of Q}} j k) -> (x : ‚ü® Mod X k ‚ü©)-> ŒΩ‚ÇÅ (write e (ŒΩ‚ÇÅ x)) ‚â° ŒΩ‚ÇÅ (write e x)
      write-comm e (j , id-Q , x) = refl
      write-comm e (j , some p , x) = ` write-comm-impl e p x `

    module _ {X Y : IdxSet K ùëñ} where
      apply : ‚àÄ{k} -> (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod Y k ‚ü©
      apply f (_ , p , x) = (_ , p , ‚ü® _=<< {{of T'}} f ‚ü© x)


      -- Œ¥-comm : ‚àÄ(f : X ‚ü∂ ‚ü® T ‚ü© Y) -> ‚àÄ{j k} -> ‚àÄ(e : Edge {{of Q}} k j) (x : ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> map-Maybe (‚ü® map f ‚óÜ join ‚ü© {_}) (Œ¥ x e) ‚â° Œ¥ (‚ü® map f ‚óÜ join ‚ü© x) e
      -- Œ¥-comm f {j} {k} e x i = naturalJoinCommute {T = T'} decompose f commutes:decompose {_} x i {_} e



      apply-comm-impl : {j k : K} -> (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> (p : QPath {{of Q}} k j) -> (x : ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> ŒΩ‚ÇÅ (apply f (fst (ŒΩ-impl p x))) ‚â° fst (ŒΩ ((_ , some p , ‚ü® map f ‚óÜ join ‚ü© {_} x)))
      apply-comm-impl f (last e) x with (Œ¥-comm f e x) | split-+-Str (Œ¥ x e)
      ... | X | left x‚ÇÅ = refl
      ... | X | just (a , P) with split-+-Str (Œ¥ (‚ü® map f ‚óÜ join ‚ü© {_} x) e)
      ... | left (tt , Q) =
        let R : map-Maybe (‚ü® map f ‚óÜ join ‚ü© {_}) (just a) ‚â° nothing
            R = cong (map-Maybe (‚ü® map f ‚óÜ join ‚ü© {_})) (‚â°-Str‚Üí‚â° (P ‚Åª¬π)) ‚àô X (Œª P' -> right‚â¢left (` P ‚Åª¬π ` ‚àô P')) ‚àô ` Q `
        in ùüò-rec (right‚â¢left R)
      ... | just (b , Q) =
        let R : map-Maybe (‚ü® map f ‚óÜ join ‚ü© {_}) (just a) ‚â° just b
            R = cong (map-Maybe (‚ü® map f ‚óÜ join ‚ü© {_})) (‚â°-Str‚Üí‚â° (P ‚Åª¬π)) ‚àô X (Œª P' -> right‚â¢left (` P ‚Åª¬π ` ‚àô P')) ‚àô ` Q `

        in Œª i -> (_ , id-Q , isInjective:right R i)

      -- see 2021-02-20:
      apply-comm-impl f (e ‚à∑ p) x with ŒΩ-impl p x | ŒΩ-impl p (‚ü® map f ‚óÜ join ‚ü© {_} x) | ‚â°‚Üí‚â°-Str (apply-comm-impl f p x)
      ... | (_ , some p' , x') , N    | (_ , p'2 , x'2) , N2 | Y with ŒΩ-impl p' (‚ü® map f ‚óÜ join ‚ü© {_} x')
      apply-comm-impl f (e ‚à∑ p) x | (_ , some p' , x') , N | (_ , id-Q , x'2) , N2 | refl-StrId | .(_ , id-Q , x'2) , snd‚ÇÅ = refl
      apply-comm-impl f (e ‚à∑ p) x | (_ , some p' , x') , N | (_ , some x‚ÇÅ , x'2) , N2 | refl-StrId | .(_ , some x‚ÇÅ , x'2) , snd‚ÇÅ = refl

      apply-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | .(fst (ŒΩ (_ , id-Q , _))) , snd‚ÇÅ | refl-StrId with split-+-Str (Œ¥ x' e) | split-+-Str (Œ¥ (‚ü® map f ‚óÜ join ‚ü© {_} x') e)
      ... | just (a , P) | left (tt , Q) =
        -- NOTE: here we do the same as in the `last e` case above
        let R : map-Maybe (‚ü® map f ‚óÜ join ‚ü© {_}) (just a) ‚â° nothing
            R = cong (map-Maybe (‚ü® map f ‚óÜ join ‚ü© {_})) (‚â°-Str‚Üí‚â° (P ‚Åª¬π)) ‚àô Œ¥-comm f e x' (Œª P' -> right‚â¢left (` P ‚Åª¬π ` ‚àô P')) ‚àô ` Q `
        in ùüò-rec (right‚â¢left R)
        -- NOTE: here we do the same as in the `last e` case above
      ... | just (a , P) | just (b , Q) =
        let R : map-Maybe (‚ü® map f ‚óÜ join ‚ü© {_}) (just a) ‚â° just b
            R = cong (map-Maybe (‚ü® map f ‚óÜ join ‚ü© {_})) (‚â°-Str‚Üí‚â° (P ‚Åª¬π)) ‚àô Œ¥-comm f e x' (Œª P' -> right‚â¢left (` P ‚Åª¬π ` ‚àô P')) ‚àô ` Q `
        in Œª i -> (_ , id-Q , isInjective:right R i)

      ... | left (tt , Q) | Z with split-+-Str (Œ¥ (‚ü® map f ‚óÜ join ‚ü© {_} x') e)
      apply-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | .(_) , snd‚ÇÅ | refl-StrId | left (tt , Q) | just (_ , Z1) | left (_ , Z2) = ùüò-rec (left‚â¢right `(Z2 ‚Åª¬π ‚àô Z1)`)
      apply-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | .(_) , snd‚ÇÅ | refl-StrId | left (tt , Q) | just (_ , Z1) | just (_ , Z2) = Œª i -> (_ , id-Q , isInjective:right R i)
        where R = `(Z2 ‚Åª¬π ‚àô Z1)`
      apply-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | .(_) , snd‚ÇÅ | refl-StrId | left (tt , Q) | left x‚ÇÅ | left x‚ÇÇ = refl
      apply-comm-impl f (e ‚à∑ p) x | (_ , id-Q , x') , N | .(_) , snd‚ÇÅ | refl-StrId | left (tt , Q) | left (_ , Z1) | just (_ , Z2) = ùüò-rec (right‚â¢left `(Z2 ‚Åª¬π ‚àô Z1)`)


-- ... | (_ , some p' , x') , N    | (_ , id-Q , x'2) , N2 | Y  = {!!}
      -- ... | (_ , some p' , x') , N    | (_ , some p'2 , x'2) , N2 | Y with ŒΩ-impl p' (‚ü® map f ‚óÜ join ‚ü© {_} x')
      -- apply-comm-impl f (e ‚à∑ p) x | (_ , some p' , x') , N | (_ , some p'2 , x'2) , N2 | refl-StrId | .(_ , some p'2 , x'2) , snd‚ÇÅ = refl


      apply-comm : ‚àÄ{k} -> (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> (x : ‚ü® Mod X k ‚ü©) -> ŒΩ‚ÇÅ (apply f (ŒΩ‚ÇÅ x)) ‚â° ŒΩ‚ÇÅ (apply f x)
      apply-comm f (_ , id-Q , x) = refl
      apply-comm f (_ , some p , x) = apply-comm-impl f p x
      -- apply-comm f (_ , id-Q , x) = refl
      -- apply-comm f (_ , some x‚ÇÅ , x) = {!!}

  ùë∫ : IdxSet K ùëñ -> PSh ùîá ùëñ
  ùë∫ X = mirror-Functor (free-Diagram f)
    where f : QuiverHom (Q) (ForgetCategory (` Set ùëñ ` ·µí·µñ))
          ‚ü® f ‚ü© k = Mod-Normal X k
          ‚ü® IQuiverHom.qmap (of f) e ‚ü© (x , _) = ŒΩ (write e x)
          of IQuiverHom.qmap (of f) e = record {}


  private
    module _ {X Y : IdxSet K ùëñ} (f : X ‚ü∂ ‚ü® T ‚ü© Y) where

  {-
      g' : ‚àÄ{k} -> ‚ü® Mod X k ‚ü© -> ‚ü® Mod Y k ‚ü©
      g' ((j , p , left a)) = ((j , p , left a)) -- normaliz
      g' ((j , p , just x)) = (j , p , just (‚ü® f =<< ‚ü© j x))
      -}

      g : ‚àÄ(k : K) -> ‚ü® ùë∫ X ‚ü© k ‚ü∂ ‚ü® ùë∫ Y ‚ü© k
      ‚ü® g k ‚ü© (x , xp) = ŒΩ (apply f x)


      gp : {a b : K} (e : (Edge {{Dir}} b a)) (x : ‚ü® ‚ü® ùë∫ X ‚ü© a ‚ü©) ‚Üí
            ‚ü® map {{of ùë∫ Y}} (‚©ö e) ‚ü© (‚ü® g a ‚ü© x) ‚â°
            ‚ü® g b ‚ü© (‚ü® map {{of ùë∫ X}} (‚©ö e) ‚ü© x)
      gp e ((j , p , x) , pp) = byFirstP P

       where P : ŒΩ‚ÇÅ (write e (ŒΩ‚ÇÅ (apply f (j , p , x))))
                  ‚â°
                ŒΩ‚ÇÅ (apply f (ŒΩ‚ÇÅ (write e (j , p , x))))
             P = write-comm e (apply f (j , p , x)) ‚àô apply-comm f (write e (j , p , x)) ‚Åª¬π

  module _ {X Y : IdxSet K ùëñ} where
    map-ùë∫ : (f : X ‚ü∂ ‚ü® T ‚ü© Y) -> ùë∫ X ‚ü∂ ùë∫ Y
    map-ùë∫ f = mirror-Nat (free-Diagram-Natimpl (g f) (Œª e x -> gp f e x ‚Åª¬π))

  private
    module _ {X : IdxSet K ùëñ} where
      Œπ : ‚àÄ{k} -> (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) -> ‚ü® Mod-Normal X k ‚ü©
      Œπ x = (_ , id-Q , x) , by-id

      infixr 40 _‚Ü∑_
      _‚Ü∑_ : ‚àÄ{k j} -> Hom {{of ùîá}} j k -> (x : ‚ü® Mod-Normal X k ‚ü©) -> ‚ü® Mod-Normal X j ‚ü©
      _‚Ü∑_ f x = ‚ü® map {{of ùë∫ X}} f ‚ü© x

      assoc-‚Ü∑ : ‚àÄ{j k l} -> {f : Hom {{of ùîá}} l k} -> {g : Hom {{of ùîá}} k j} -> {x : ‚ü® Mod-Normal X j ‚ü©}
                -> f ‚Ü∑ g ‚Ü∑ x ‚â° (f ‚óÜ g) ‚Ü∑ x
      assoc-‚Ü∑ {f = f} {g = g} {x} = functoriality-‚óÜ {{of ùë∫ X}} {f = g} {g = f} x ‚Åª¬π

      mModNormal : ‚àÄ k j p x -> ‚ü® Mod X k ‚ü©
      mModNormal k j p x = (j , p , x)

      QPath-break : ‚àÄ{k l1 l2 j} -> {e : Edge {{of Q}} k l1} {f : Edge {{of Q}} k l2} {p : QPath {{of Q}} l1 j} {q : QPath {{of Q}} l2 j} -> _‚â°-Str_ {A = QPath k j} (e ‚à∑ p) (f ‚à∑ q) -> (QQ : l1 ‚â° l2)
                  -> transport (Œª i -> QPath {{of Q}} (QQ i) j) p ‚â° q
      QPath-break {l1 = l1} {l2} {j} {e} {f} {p} {q} refl-StrId QQ = X3
        where X1 : refl ‚â° QQ
              X1 = hlevel {{ISet:K}} l1 l1 refl QQ
              X2 : transport (Œª i -> QPath {{of Q}} l1 j) p ‚â° p
              X2 = transportRefl p
              X3 : transport (Œª i -> QPath {{of Q}} (QQ i) j) p ‚â° p
              X3 = transport (Œª k -> transport (Œª i -> QPath {{of Q}} (X1 k i) j) p ‚â° p) X2


      lem-000 : ‚àÄ{k} -> ‚àÄ j1 j2 -> ‚àÄ (e1 : Edge {{Dir}} k k) (e2 : Edge {{Dir}} k k) -> (p1 : QPath {{of Q}} k j1) (p2 : QPath {{of Q}} k j2)
                -> (p : j1 ‚â° j2) -> PathP (Œª i -> QPath‚Çä k (p i)) (some (e1 ‚à∑ p1)) (some (e2 ‚à∑ p2)) -> PathP (Œª i -> QPath k (p i)) p1 p2
      lem-000 {k} j1 j2 e1 e2 p1 p2 p q with ‚â°‚Üí‚â°-Str p
      ... | refl-StrId = q5
        where
            P1 : p ‚â° refl
            P1 = hlevel {{ISet:K}} _ _ p refl

            P0 : Path (QPath‚Çä k j1) (some (e1 ‚à∑ p1)) (some (e2 ‚à∑ p2))
            P0 = transport (Œª Œ± -> PathP (Œª i ‚Üí QPath‚Çä k (P1 Œ± i)) (some (e1 ‚à∑ p1)) (some (e2 ‚à∑ p2))) q

            f : (pp : QPath‚Çä {{of Q}} k j1) -> QPath {{of Q}} k j1
            f id-Q = last a0
            f (some x) = x

            q2 : PathP (Œª i -> QPath k j1) ((e1 ‚à∑ p1)) ((e2 ‚à∑ p2))
            q2 i = f (P0 i)

            q3 : PathP (Œª i -> QPath k j1) (transport (Œª i -> QPath {{of Q}} k j1) p1) (p2)
            q3 = QPath-break (‚â°‚Üí‚â°-Str q2) refl

            q4 : PathP (Œª i -> QPath k j1) (p1) (p2)
            q4 = transport (Œª Œ± -> PathP (Œª i -> QPath k j1) (transportRefl p1 Œ±) (p2)) q3

            q5 : PathP (Œª i -> QPath k (p i)) (p1) (p2)
            q5 = transport (Œª Œ± -> PathP (Œª i -> QPath k (P1 (~ Œ±) i)) p1 p2) q4


      lem-00 : ‚àÄ {k} -> ‚àÄ j1 j2 -> ‚àÄ x1 x2 -> ‚àÄ (e1 : Edge {{Dir}} k k) (e2 : Edge {{Dir}} k k) -> (p1 : QPath {{of Q}} k j1) (p2 : QPath {{of Q}} k j2)
               -> mModNormal k j1 (some (e1 ‚à∑ p1)) x1 ‚â° mModNormal k j2 (some (e2 ‚à∑ p2)) x2
               -> mModNormal k j1 (some p1) x1 ‚â° mModNormal k j2 (some p2) x2
      lem-00 _ _ _ _ _ _ _ _ p = Œª i -> p i .fst , some (lem-000 _ _ _ _ _ _ (Œª i -> p i .fst) (Œª i -> p i .snd .fst) i) , (p i .snd .snd)

      -- cancel-‚Ü∑-impl-2 : ‚àÄ{k} -> (x y : ‚ü® ‚ü® T ‚ü© X ‚ü© k) -> (‚àÄ{j} -> (e : Edge {{Dir}} j k) -> ` e ` ‚Ü∑ Œπ x ‚â° ` e ` ‚Ü∑ Œπ y) -> x ‚â° y
      -- cancel-‚Ü∑-impl-2 x y P with decideDecompose x | decideDecompose y
      -- cancel-‚Ü∑-impl-2 {k} x y P | left (Px , _) | left (Py , _) with split-+-Str (Œ¥ x a1) | split-+-Str (Œ¥ y a1) | (P a1) | ‚â°‚Üí‚â°-Str (P a1)
      -- ... | left x‚ÇÅ | left x‚ÇÇ | XX | _ =
      --   let œÅ : k ‚â° k
      --       œÅ = Œª i -> XX i .fst .fst
      --       œÅ-refl : œÅ ‚â° refl
      --       œÅ-refl = hlevel {{ISet:K}} _ _ œÅ refl
      --       P : PathP (Œª i -> ‚ü® ‚ü® T ‚ü© X ‚ü© (œÅ i)) x y
      --       P i = XX i .fst .snd .snd
      --   in transport (Œª Œ± -> PathP (Œª i -> ‚ü® ‚ü® T ‚ü© X ‚ü© (œÅ-refl Œ± i)) x y) P
      -- ... | left (_ , R) | just (_ , S) | _ | ()
      -- ... | just (_ , R) | just x‚ÇÇ | XX | _ = ùüò-rec (right‚â¢left (` R ‚Åª¬π ‚àô Px `))
      -- cancel-‚Ü∑-impl-2 x y P | left (Px , _) | just Dy       = {!!} -- ùüò-rec (right‚â¢left (` Dy a1 .snd ‚Åª¬π ‚àô Px `))
      -- cancel-‚Ü∑-impl-2 x y P | just Dx       | left (Py , _) = {!!}
      -- cancel-‚Ü∑-impl-2 x y P | just Dx       | just Dy       = {!!}

      Œ¥-decomp : ‚àÄ{k j} -> (e : Edge {{of Q}} k j) -> (x : ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> (Dx : isDecomposable x) -> ` e ` ‚Ü∑ Œπ x ‚â° Œπ (Dx e .fst)
      Œ¥-decomp e x Dx with split-+-Str (Œ¥ x e)
      ... | left (_ , R) = ùüò-rec (right‚â¢left (` Dx e .snd ‚Åª¬π ‚àô R `))
      ... | just (a , S) with Dx e .snd ‚Åª¬π ‚àô S
      ... | refl-StrId = refl

      injective-Œπ : ‚àÄ{k j} -> {p q : QPath‚Çä {{of Q}} j k} {x y : ‚ü® ‚ü® T ‚ü© X ‚ü© k} -> {N : isNormal (_ , p , x)} {M : isNormal (_ , q , y)} -> Path (‚ü® Mod-Normal X j ‚ü©) ((k , p , x) , N) ((k , q , y) , M) -> x ‚â° y
      injective-Œπ {k} {x = x} {y = y} XX = P1
        where œÅ : k ‚â° k
              œÅ = Œª i -> XX i .fst .fst
              œÅ-refl : œÅ ‚â° refl
              œÅ-refl = hlevel {{ISet:K}} _ _ œÅ refl
              P0 : PathP (Œª i -> ‚ü® ‚ü® T ‚ü© X ‚ü© (œÅ i)) x y
              P0 i = XX i .fst .snd .snd
              P1 : PathP (Œª i -> ‚ü® ‚ü® T ‚ü© X ‚ü© k) x y
              P1 = transport (Œª Œ± -> PathP (Œª i -> ‚ü® ‚ü® T ‚ü© X ‚ü© (œÅ-refl Œ± i)) x y) P0

      cancel-‚Ü∑-impl-2 : ‚àÄ{k} -> (x y : ‚ü® ‚ü® T ‚ü© X ‚ü© k) -> (‚àÄ{j} -> (e : Edge {{Dir}} j k) -> ` e ` ‚Ü∑ Œπ x ‚â° ` e ` ‚Ü∑ Œπ y) -> x ‚â° y
      cancel-‚Ü∑-impl-2 {k} x y P with split-+-Str (Œ¥ x a1) | split-+-Str (Œ¥ y a1) | (P a1) | ‚â°‚Üí‚â°-Str (P a1)
      ... | left x‚ÇÅ | left x‚ÇÇ | XX | _ = injective-Œπ XX
      ... | just (a , R) | just (b , S) | XX | _ with decideDecompose x | decideDecompose y
      ... | left (Px) | just Dy = let Px = makePure Px .fst; Dy = makeDec Dy       in ùüò-rec (left‚â¢right (` Px ‚Åª¬π ‚àô R ` ‚àô cong (right {A = ùüô-ùí∞}) (injective-Œπ XX)  ‚àô ` S ‚Åª¬π ‚àô Dy a1 .snd `)) 
      ... | just Dx   | left Py = let Py = makePure Py .fst; Dx = makeDec Dx       in ùüò-rec (left‚â¢right (` Py ‚Åª¬π ‚àô S ` ‚àô cong (right {A = ùüô-ùí∞}) (injective-Œπ XX) ‚Åª¬π  ‚àô ` R ‚Åª¬π ‚àô Dx a1 .snd `))
      ... | left Px   | left Py = let Px = makePure Px .fst; Py = makePure Py .fst in ùüò-rec (left‚â¢right (` Px ‚Åª¬π ‚àô R `))
      ... | just Dx   | just Dy = let Dx' = makeDec Dx      ; Dy' = makeDec Dy       in cancel-Œ¥ x y Dx Dy (Œª e -> ` Dx' e .snd ` ‚àô cong (right {A = ùüô-ùí∞}) (injective-Œπ (Œ¥-decomp e x Dx' ‚Åª¬π ‚àô P e ‚àô Œ¥-decomp e y Dy')) ‚àô ` Dy' e .snd ‚Åª¬π `)


      cancel-‚Ü∑-impl : ‚àÄ{k} -> (x y : ‚ü® Mod-Normal X k ‚ü©) -> (‚àÄ{j} -> ‚àÄ(e : Edge {{Dir}} j k) -> ` e ` ‚Ü∑ x ‚â° ` e ` ‚Ü∑ y) -> fst x ‚â° fst y
      cancel-‚Ü∑-impl ((_ , p , x) , N) ((_ , q , y) , M) P with (P a0)
      cancel-‚Ü∑-impl ((_ , id-Q , x) , N) ((_ , id-Q , y) , M) P | X = Œª i -> (_ , id-Q , cancel-‚Ü∑-impl-2 x y P i)
      cancel-‚Ü∑-impl ((_ , id-Q , x) , N) ((_ , some q , y) , M) P | X with ŒΩ-impl q y | ŒΩ-idempotent-impl q y M | split-+-Str (Œ¥ x a0) | ‚â°‚Üí‚â°-Str X
      ... | .(_ , some q , y) , snd‚ÇÅ | refl-StrId | left x‚ÇÅ | ()
      ... | .(_ , some q , y) , snd‚ÇÅ | refl-StrId | just x‚ÇÅ | ()
      cancel-‚Ü∑-impl ((_ , some p , x) , N) ((_ , id-Q , y) , M) P | X with ŒΩ-impl p x | ŒΩ-idempotent-impl p x N | split-+-Str (Œ¥ y a0) | ‚â°‚Üí‚â°-Str X
      ... | .(_ , some p , x) , snd‚ÇÅ | refl-StrId | left x‚ÇÅ | ()
      ... | .(_ , some p , x) , snd‚ÇÅ | refl-StrId | just x‚ÇÅ | ()
      cancel-‚Ü∑-impl ((k , some p , x) , N) ((_ , some q , y) , M) P | X with ŒΩ-impl p x | ŒΩ-impl q y | ŒΩ-idempotent-impl p x N | ŒΩ-idempotent-impl q y M
      ... | .(_ , some p , x) , snd‚ÇÅ | .(_ , some q , y) , snd‚ÇÇ | refl-StrId | refl-StrId = lem-00 _ _ _ _ _ _ _ _ (cong fst X)

      cancel-‚Ü∑ : ‚àÄ{k} -> (x y : ‚ü® Mod-Normal X k ‚ü©) -> (‚àÄ{j} -> ‚àÄ(e : Edge {{Dir}} j k) -> ` e ` ‚Ü∑ x ‚â° ` e ` ‚Ü∑ y) -> x ‚â° y
      cancel-‚Ü∑ x y P = byFirstP (cancel-‚Ü∑-impl x y P)

      -- with ‚â°‚Üí‚â°-Str (Œª i -> X i .fst .fst)
      -- ... | refl-StrId = Œª i -> (k , some (F a1 a1 p q (Œª i -> X i .fst .snd .fst)) , ?) , ?
      --   where F : ‚àÄ{l k j} -> (e1 e2 : Edge {{of Q}} l k) -> (p1 p2 : QPath {{of Q}} k j) -> (Path (QPath‚Çä l j) (some (e1 ‚à∑ p1)) (some (e2 ‚à∑ p2))) -> p1 ‚â° p2
      --         F = {!!}

      -- cong-Str (Œª Œæ -> F Œæ .snd) X
        -- where F : ‚àÄ{k A} -> ‚ü® Mod-Normal A k ‚ü© -> ‚àë Œª j -> ‚ü® Mod-Normal A j ‚ü©
        --       F ((j , id-Q , x) , N) = {!!}
        --       F ((j , some (last x‚ÇÅ) , x) , N) = {!!}
        --       F ((j , some (x‚ÇÅ ‚à∑ p) , x) , by-later .p .x‚ÇÅ N) = _ , ((_ , some p , x) , N)


        -- where P : ‚àÄ{k1 k2 j1 j2 i1 i2} -> (p : )

-- with cong-Str (Œª Œæ -> fst (fst Œæ)) X
--       ... | refl-StrId with cong-Str (Œª Œæ -> (fst Œæ)) X
--       ... | X' = {!!}

      lem-0 : ‚àÄ{k} -> (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) -> ` a0 ` ‚Ü∑ Œπ x ‚â° Œπ e0
      lem-0 {k = k} x with split-+-Str (Œ¥ x a0) | ‚â°‚Üí‚â°-Str (a0-adsorb x)
      ... | left (_ , P) | Q = ùüò-rec (left‚â¢right `(P ‚Åª¬π ‚àô Q)`)
      ... | just (b , P) | Q with P ‚Åª¬π ‚àô Q
      ... | refl-StrId = refl

      module lem-01 {k} (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) where
        proof : ‚àÄ {j} -> (p : Hom {{of ùîá}} j k) -> (N : isNormal (k , p , x)) -> p ‚Ü∑ ((k , id-Q , x) , by-id) ‚â° ((k , p , x) , N)

        P1 : ‚àÄ {j l} -> (e : Edge {{of Q}} l j) -> (p : QPath {{of Q}} j k) -> (N : isNormal (k , ` p ` , x)) -> (` e ` ‚Ü∑ ((k , ` p ` , x) , N)) ‚â° ((k , ` e ` ‚óÜ ` p ` , x) , by-later _ _ N)
        P1 e p N with ŒΩ-impl p x | ŒΩ-idempotent-impl p x N
        ... | .(k , some p , x) , snd‚ÇÅ | refl-StrId = byFirstP refl

        P0 : ‚àÄ {j} -> (p : QPath {{of Q}} j k) -> (N : isNormal (k , ` p ` , x)) -> (` p ` ‚Ü∑ ((k , id-Q , x) , by-id)) ‚â° ((k , ` p ` , x) , N)
        P0 (last e) N with split-+-Str (Œ¥ x e)
        P0 (last e) (by-nothing .e x‚ÇÅ) | left x = byFirstP refl
        P0 (last e) (by-nothing .e P) | just (_ , Q) = ùüò-rec (left‚â¢right (` P ‚Åª¬π ‚àô Q `))
        P0 (e ‚à∑ p) (by-later .p .e N) =
          -- let Q : (` e ‚à∑ p ` ‚Ü∑ ((k , id-Q , x) , by-id)) ‚â° (k , ` e ‚à∑ p ` , x)
          let Q = (some (e ‚à∑ p) ‚Ü∑ ((k , id-Q , x) , by-id)) ‚â°‚ü® assoc-‚Ü∑ {f = ` e `} {g = ` p `} {x = ((k , id-Q , x) , by-id)} ‚Åª¬π ‚ü©
                  (` e ` ‚Ü∑ ` p ` ‚Ü∑ ((k , id-Q , x) , by-id)) ‚â°[ i ]‚ü® ` e ` ‚Ü∑ P0 p N i ‚ü©
                  (` e ` ‚Ü∑ ((k , ` p ` , x) , N))           ‚â°‚ü® (P1 e p N) ‚ü©
                  ((k , some (e ‚à∑ p) , x) , by-later p e N)     ‚àé
          in Q

        proof id-Q by-id = refl
        proof (some p) = P0 p

      module lem-02 {k} (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) (x‚â¢e0 : x ‚â¢-Str e0) {j} (e : Edge {{of Q}} j k) (D : isDecomposable x) where
        proof : ‚àë Œª y -> (` e ` ‚Ü∑ Œπ x ‚â° Œπ y) √ó-ùí∞ ((_ , y) ‚â∫ (_ , x))
        proof with split-+-Str (Œ¥ x e) | D e
        ... | left (a , P) | y , Q = ùüò-rec (right‚â¢left `(Q ‚Åª¬π ‚àô P)`)
        ... | just (a , P) | y , Q with P ‚Åª¬π ‚àô Q
        ... | refl-StrId = y , refl , (x‚â¢e0 , (e , P))



    module _ {X Y : IdxSet K ùëñ} (Œ± : ùë∫ X ‚ü∂ ùë∫ Y) where
      -- lem-1 : ‚àÄ{k : K} -> {} -> ‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ {k = k} e0) ‚â° Œπ e0


      module lem-1 {k : K} (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) where
        Œ±' = ‚ü® ‚ü® Œ± ‚ü© {k} ‚ü©
        P1 : ‚àÄ y -> ` a0 ` ‚Ü∑ Œ±' (Œπ y) ‚â° Œ±' (Œπ e0)
        P1 = Œª y -> ` a0 ` ‚Ü∑ Œ±' (Œπ y) ‚â°‚ü® naturality {{of Œ±}} ` a0 ` (Œπ y) ‚ü©
                    Œ±' (` a0 ` ‚Ü∑ Œπ y) ‚â°[ i ]‚ü® Œ±' (lem-0 y i) ‚ü©
                    Œ±' (Œπ e0)          ‚àé

        P1-1 : ` a0 ` ‚Ü∑ Œ±' (Œπ x) ‚â° Œ±' (Œπ e0)
        P1-1 = P1 x

        P1-2 : (` a0 ` ‚óÜ ` a0 `) ‚Ü∑ Œ±' (Œπ x) ‚â° Œ±' (Œπ e0)
        P1-2 = (` a0 ` ‚óÜ ` a0 `) ‚Ü∑ Œ±' (Œπ x) ‚â°‚ü® assoc-‚Ü∑ {f = ` a0 `} {g = ` a0 `} {x = Œ±' (Œπ x)} ‚ü©
                ` a0 ` ‚Ü∑ (` a0 ` ‚Ü∑ Œ±' (Œπ x)) ‚â°[ i ]‚ü® ` a0 ` ‚Ü∑ P1 x i ‚ü©
                ` a0 ` ‚Ü∑ Œ±' (Œπ e0)          ‚â°‚ü® P1 e0 ‚ü©
                Œ±' (Œπ e0)                    ‚àé

        P2 : ` a0 ` ‚Ü∑ Œ±' (Œπ x) ‚â° (` a0 ` ‚óÜ ` a0 `) ‚Ü∑ Œ±' (Œπ x)
        P2 = P1-1 ‚àô P1-2 ‚Åª¬π

        proof : ‚àë Œª y -> ‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ x) ‚â° Œπ y
        proof with Œ±' (Œπ x) | ‚â°‚Üí‚â°-Str P2
        ... | (_ , id-Q , x') , by-id | _ = _ , refl
        ... | (_ , some p' , x') , N   | Q with ŒΩ-impl p' x' | ŒΩ-idempotent-impl p' x' N
        ... | .(_ , some p' , x') , N2 | refl-StrId with ŒΩ-impl p' x' | ŒΩ-idempotent-impl p' x' N2
        proof | (_ , some p' , x') , N | () | .(_ , some p' , x') , N2 | refl-StrId | .(_ , some p' , x') , snd‚ÇÅ | refl-StrId

      module lem-15 {k : K} where
        Œ±' = ‚ü® ‚ü® Œ± ‚ü© {k} ‚ü©
        proof : Œ±' (Œπ e0) ‚â° Œπ e0
        proof = Œ±' (Œπ e0) ‚â°[ i ]‚ü® Œ±' ((lem-0 e0 ‚Åª¬π) i) ‚ü©
                Œ±' (` a0 ` ‚Ü∑ Œπ e0) ‚â°‚ü® naturality {{of Œ±}} ` a0 ` (Œπ e0) ‚Åª¬π ‚ü©
                ` a0 ` ‚Ü∑ Œ±' (Œπ e0) ‚â°[ i ]‚ü® ` a0 ` ‚Ü∑ lem-1.proof e0 .snd i ‚ü©
                ` a0 ` ‚Ü∑ (Œπ _)     ‚â°‚ü® lem-0 _ ‚ü©
                Œπ e0 ‚àé


  module _ {X Y : IdxSet K ùëñ} where
    map‚Åª¬π-ùë∫ : (ùë∫ X ‚ü∂ ùë∫ Y) -> (X ‚ü∂ ‚ü® T ‚ü© Y)
    ‚ü® map‚Åª¬π-ùë∫ Œ± ‚ü© x = lem-1.proof Œ± (‚ü® return ‚ü© {_} x) .fst

    module lem-2 (f : X ‚ü∂ ‚ü® T ‚ü© Y) where
      proof : map‚Åª¬π-ùë∫ (map-ùë∫ f) ‚â£ f

      -- | It is enough to show that:
      P0 : ‚àÄ {k} (x : ‚ü® X ‚ü© k) ‚Üí ‚ü® return ‚óÜ map f ‚óÜ join ‚ü© {k} x ‚â° ‚ü® f ‚ü© {k} x
      P0 {k} x = ‚ü® return ‚óÜ map f ‚óÜ join ‚ü© {k} x ‚â°[ i ]‚ü®  ‚ü® join ‚ü© (naturality f {k} x i) ‚ü©
               ‚ü® f ‚óÜ return ‚óÜ join ‚ü© {k} x     ‚â°‚ü® unit-l-join (‚ü® f ‚ü© {k} x) ‚ü©
               ‚ü® f ‚ü© {k} x                     ‚àé

      proof = P0

    module lem-3 (Œ± : ùë∫ X ‚ü∂ ùë∫ Y) where
      proof : map-ùë∫ (map‚Åª¬π-ùë∫ Œ±) ‚â£ Œ±

      -- | We set [..].
      Œ≤ = map-ùë∫ (map‚Åª¬π-ùë∫ Œ±)
      Œû = ‚àë Œª k -> ‚ü® ‚ü® T ‚ü© X ‚ü© k
      Œ∑' : ‚àÄ{k} -> ‚àÄ{A : IdxSet K ùëñ} -> ‚ü® A ‚ü© k -> ‚ü® ‚ü® T ‚ü© A ‚ü© k
      Œ∑' = ‚ü® return ‚ü© {_}

      Œº' : ‚àÄ{k} -> ‚àÄ{A : IdxSet K ùëñ} -> ‚ü® ‚ü® T ‚óÜ T ‚ü© A ‚ü© k -> ‚ü® ‚ü® T ‚ü© A ‚ü© k
      Œº' = ‚ü® join ‚ü© {_}


      -- | We want to show:
      ùëÉ : Œû -> ùí∞ _
      ùëÉ (k , x) = ‚ü® ‚ü® Œ≤ ‚ü© ‚ü© (Œπ x) ‚â° ‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ x)

      -- | We do this with an induction, the base case is:
      P3-base : ‚àÄ {k} -> (x : ‚ü® X ‚ü© k) -> ùëÉ (k , Œ∑' x)
      P3-base x = byFirstP P0
        where P0 = (_ , id-Q , Œº' (‚ü® map (map‚Åª¬π-ùë∫ Œ±) ‚ü© {_} (Œ∑' x))) ‚â°[ i ]‚ü® _ , id-Q , Œº' (naturality (map‚Åª¬π-ùë∫ Œ±) {_} x i) ‚ü©
                   (_ , id-Q , Œº' ( Œ∑' (‚ü® map‚Åª¬π-ùë∫ Œ± ‚ü© {_} x)))      ‚â°[ i ]‚ü® _ , id-Q , unit-l-join (‚ü® map‚Åª¬π-ùë∫ Œ± ‚ü© {_} x) i ‚ü©
                   (_ , id-Q , (‚ü® map‚Åª¬π-ùë∫ Œ± ‚ü© {_} x))               ‚â°‚ü® refl ‚ü©
                   (_ , id-Q , (lem-1.proof Œ± (Œ∑' x) .fst))       ‚â°[ i ]‚ü® lem-1.proof Œ± (Œ∑' x) .snd (~ i) .fst ‚ü©
                   fst (‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ (Œ∑' x)))                      ‚àé

      P3-step : ‚àÄ (x : Œû) -> (x .snd ‚â¢-Str e0) -> (isDecomposable (snd x)) -> (‚àÄ y -> y ‚â∫ x -> ùëÉ y) -> ùëÉ x
      P3-step (k , x) x‚â¢e0 D Hyp = cancel-‚Ü∑ (‚ü® ‚ü® Œ≤ ‚ü© ‚ü© (Œπ x)) (‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ x)) P0
        where P0 : ‚àÄ{j} -> (e : Edge {{of Q}} j k) -> ` e ` ‚Ü∑ ‚ü® ‚ü® Œ≤ ‚ü© ‚ü© (Œπ x) ‚â° ` e ` ‚Ü∑ ‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ x)
              P0 e = ` e ` ‚Ü∑ ‚ü® ‚ü® Œ≤ ‚ü© ‚ü© (Œπ x) ‚â°‚ü® naturality {{of Œ≤}} ` e ` (Œπ x) ‚ü©
                     ‚ü® ‚ü® Œ≤ ‚ü© ‚ü© (` e ` ‚Ü∑ Œπ x) ‚â°[ i ]‚ü® ‚ü® ‚ü® Œ≤ ‚ü© ‚ü©  (lem-02.proof x x‚â¢e0 e D .snd .fst i) ‚ü©
                     ‚ü® ‚ü® Œ≤ ‚ü© ‚ü© (Œπ _)          ‚â°‚ü® Hyp _          (lem-02.proof x x‚â¢e0 e D .snd .snd) ‚ü©
                     ‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ _)          ‚â°[ i ]‚ü® ‚ü® ‚ü® Œ± ‚ü© ‚ü© (lem-02.proof x x‚â¢e0 e D .snd .fst (~ i)) ‚ü©
                     ‚ü® ‚ü® Œ± ‚ü© ‚ü© (` e ` ‚Ü∑ Œπ x) ‚â°‚ü® naturality {{of Œ±}} ` e ` (Œπ x) ‚Åª¬π ‚ü©
                     ` e ` ‚Ü∑ ‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ x) ‚àé


      P3 : ‚àÄ x -> (‚àÄ y -> y ‚â∫ x -> ùëÉ y) -> ùëÉ x
      P3 (k , x) Q with decideDecompose x
      ... | (right D) with decide-e0 x
      ... | yes refl-StrId = lem-15.proof Œ≤ ‚àô lem-15.proof Œ± ‚Åª¬π
      ... | no ¬¨p = P3-step (k , x) ¬¨p (makeDec D) Q
      P3 (k , x) Q | (left Px) with makePure Px
      ... | (_ , (x' , refl-StrId)) = P3-base x'

      P3' : ‚àÄ x -> (‚àÄ y -> y ‚â∫P x -> ùëÉ y) -> ùëÉ x
      P3' x P = P3 x (Œª y y‚â∫x -> P y (recreate-‚â∫ y‚â∫x))


      -- | Now we use well foundedness to conclude that the statement holds for all |x|.
      P2 : (k : K) (x : ‚ü® ‚ü® T ‚ü© X ‚ü© k) -> ‚ü® ‚ü® map-ùë∫ (map‚Åª¬π-ùë∫ Œ±) ‚ü© ‚ü© (Œπ x) ‚â° ‚ü® ‚ü® Œ± ‚ü© ‚ü© (Œπ x)
      P2 k x = WFI.induction isWellfounded::‚â∫P {P = ùëÉ} P3' (k , x)


      P1 : (k : K) (j : K) -> (p : Hom {{of ùîá}} k j) -> (x : ‚ü® ‚ü® T ‚ü© X ‚ü© j) -> (N : isNormal (j , p , x)) ->

              ‚ü® ‚ü® Œ≤ ‚ü© ‚ü© ((j , p , x) , N) ‚â° ‚ü® ‚ü® Œ± ‚ü© ‚ü© ((j , p , x) , N)

      P1 k j p x N = ‚ü® ‚ü® Œ≤ ‚ü© ‚ü© ((j , p , x) , N)               ‚â°[ i ]‚ü® ‚ü® ‚ü® Œ≤ ‚ü© ‚ü© (lem-01.proof x p N (~ i)) ‚ü©
                     ‚ü® ‚ü® Œ≤ ‚ü© ‚ü© (p ‚Ü∑ ((j , id-Q , x) , by-id)) ‚â°‚ü® naturality {{of Œ≤}} p _ ‚Åª¬π ‚ü©
                     p ‚Ü∑ ‚ü® ‚ü® Œ≤ ‚ü© ‚ü© (((j , id-Q , x) , by-id)) ‚â°[ i ]‚ü® p ‚Ü∑ P2 j x i ‚ü©
                     p ‚Ü∑ ‚ü® ‚ü® Œ± ‚ü© ‚ü© (((j , id-Q , x) , by-id)) ‚â°‚ü® naturality {{of Œ±}} p _ ‚ü©
                     ‚ü® ‚ü® Œ± ‚ü© ‚ü© (p ‚Ü∑ ((j , id-Q , x) , by-id)) ‚â°[ i ]‚ü® ‚ü® ‚ü® Œ± ‚ü© ‚ü© (lem-01.proof x p N i) ‚ü©
                     ‚ü® ‚ü® Œ± ‚ü© ‚ü© ((j , p , x) , N) ‚àé

      proof k ((j , p , x) , N) = P1 k j p x N



    -- with ‚ü® ‚ü® f ‚ü© ‚ü© (Œπ (‚ü® return ‚ü© _ x))
    -- ... | a = {!!}

      -- ((_ , id-Q , ‚ü® return {{of T'}} ‚ü© _ x) , by-id)

    -- ‚ü® map‚Åª¬π-ùë∫ f ‚ü© k x with ‚ü® ‚ü® f ‚ü© ‚ü© ((_ , id , right (‚ü® return ‚ü© _ x)) , by-[])
    -- ... | (_ , q , left y) , _ = {!!}
    -- ... | (_ , id-Q , just y) , _ = y
    -- ... | (_ , some x‚ÇÅ , just y) , _ = {!!}
    -- of map‚Åª¬π-ùë∫ f = record {}
    -- -- (free-Diagram-Natimpl (g f) (Œª e x -> gp f e x))

{-



      -- where g : ‚àÄ(k : K) -> ‚ü® ùë∫ X ‚ü© k ‚ü∂ ‚ü® ùë∫ Y ‚ü© k
      --       ‚ü® g k ‚ü© ((j , p , left a) , _) = ŒΩ ((j , p , left a)) -- ŒΩ (j , p , {!!}) -- (j , p ,  ‚ü® f =<< ‚ü© j x)
      --       ‚ü® g k ‚ü© ((j , p , just x) , _) = ŒΩ (j , p , just (‚ü® f =<< ‚ü© j x)) -- (j , p ,  ‚ü® f =<< ‚ü© j x)
      --       of g k = record {}

      --       gp : {a b : K} (e : Maybe (Edge {{Dir}} a b)) (x : ‚ü® ‚ü® ùë∫ X ‚ü© a ‚ü©) ‚Üí
      --             ‚ü® map {{of ùë∫ Y}} (‚©ö e) ‚ü© (‚ü® g a ‚ü© x) ‚â°
      --             ‚ü® g b ‚ü© (‚ü® map {{of ùë∫ X}} (‚©ö e) ‚ü© x)
      --       gp e ((j , p , left x) , _) = {!!}
      --       gp e ((j , p , just x) , _) = {!!}


            -- gp2 : {a b : K}
            --         (e : ùüô-ùí∞ +-ùí∞ Edge {{Dir}} a b)
            --         (x
            --         : Œ£ (Œ£ K (Œª j ‚Üí Œ£ (Hom {{of ùîá ·µí·µñ}} j a) (Œª a‚ÇÅ ‚Üí ùüô-ùí∞ +-ùí∞ ‚ü® ‚ü® T ‚ü© X ‚ü© j)))
            --           (isNormal X a)) ‚Üí
            --         ŒΩ
            --         (fst (fst (‚ü® g a ‚ü© x)) ,
            --         (some (last e)) ‚óÜ (fst (snd (fst (‚ü® g a ‚ü© x)))) ,
            --         snd (snd (fst (‚ü® g a ‚ü© x))))
            --         ‚â°
            --         ‚ü® g b ‚ü©
            --         (ŒΩ
            --         (fst (fst x) ,
            --           (some (last e)) ‚óÜ (fst (snd (fst x)))  ,
            --           snd (snd (fst x))))
            -- gp2 = {!!}
    -- ‚ü® ‚ü® map-ùë∫ f ‚ü© {x = k} ‚ü© ((j , p , x) , _) = ŒΩ (j , p ,  ‚ü® f =<< ‚ü© j x)
    -- of ‚ü® map-ùë∫ f ‚ü© = record {}
    -- INatural.naturality (of map-ùë∫ f) = {!!}

-}


  Functor:ùë∫ : Functor (` IdxSet K ùëñ ` ‚åÑ T') `(PSh ùîá ùëñ)`
  ‚ü® Functor:ùë∫ ‚ü© X = ùë∫ ‚ü® X ‚ü©
  IFunctor.map (of Functor:ùë∫) f = map-ùë∫ ‚ü® f ‚ü©
  IFunctor.functoriality-id (of Functor:ùë∫) = {!!}
  IFunctor.functoriality-‚óÜ (of Functor:ùë∫) = {!!}
  IFunctor.functoriality-‚â£ (of Functor:ùë∫) = {!!}



{-
  ùîá = Monoid:Free Dir

  private
    Mon : ‚àÄ(A : ùí∞ ùëñ) -> MonoidModule ùîá ùëñ
    Mon A = MonoidModule:Free ùîá (‚ü® T ‚ü© A)

  norm' : ‚ü® ùîá ‚ü© -> ‚ü® T ‚ü© A -> ‚ü® Mon A ‚ü©
  norm' [] a = ([] , a)
  norm' (d ‚à∑ ds) a with ‚ü® decompose ‚ü© a
  ... | left x = (d ‚à∑ ds , a)
  ... | just x = norm' ds (x d)

  norm : ‚ü® Mon A ‚ü© -> ‚ü® Mon A ‚ü©
  norm (ds , a) = norm' ds a



  private
    data isNormal : ‚ü® Mon A ‚ü© -> ùí∞ (ùëñ ‚Å∫) where
       by-[] : ‚àÄ{a : ‚ü® T ‚ü© A} -> (depth a ‚â° 0 -> ùüò-ùí∞) -> isNormal ([] , a)
       by-depth : ‚àÄ{ds} -> ‚àÄ{a : ‚ü® T ‚ü© A} -> depth a ‚â° 0 -> isNormal (ds , a)

    lem::1 : ‚àÄ(a : ‚ü® Mon A ‚ü©) -> isNormal a -> norm a ‚â° a
    lem::1 ([] , a) P = refl
    lem::1 (d ‚à∑ ds , a) (by-depth P) with ‚ü® decompose ‚ü© a | strict a
    ... | left a‚ÇÇ | X = refl
    ... | just a‚ÇÇ | X =
      let P‚ÇÇ : depth (a‚ÇÇ d) < depth a
          P‚ÇÇ = X d

          P‚ÇÉ : depth (a‚ÇÇ d) < 0
          P‚ÇÉ = transport (Œª i -> depth (a‚ÇÇ d) < P i) P‚ÇÇ

          P‚ÇÑ : ùüò-ùí∞
          P‚ÇÑ = P‚ÇÉ .snd (‚â§0‚Üí‚â°0 (P‚ÇÉ .fst))

      in ùüò-elim P‚ÇÑ

    lem::2 : ‚àÄ(ds : ‚ü® ùîá ‚ü©) -> (a : ‚ü® T ‚ü© A) -> isNormal (norm' ds a)
    lem::2 [] a with split-‚Ñï (depth a)
    ... | left x = by-depth x
    ... | just x = by-[] (Œª a‚â°0 -> zero‚â¢suc (a‚â°0 ‚Åª¬π ‚àô snd x))
    lem::2 (d ‚à∑ ds) a with ‚ü® decompose ‚ü© a | strict a
    ... | left x | P = by-depth (transport (Œª i -> depth (P (~ i)) ‚â° 0) depth/return)
    ... | just x | P = lem::2 ds (x d)

    lem::3 : ‚àÄ(a : ‚ü® Mon A ‚ü©) -> norm (norm a) ‚â° norm a
    lem::3 a = lem::1 (norm a) (lem::2 (fst a) (snd a))

  -}





{-
-------------- OLD TRY TO GET the (_‚à∑ p) ‚â° (_‚à∑ q) -> p ‚â° q working -------------------

      data QPath-‚â° : ‚àÄ{k j} -> (p q : QPath {{of Q}} k j) -> ùí∞ ùëñ where
        last : ‚àÄ{k j} -> (e : Edge {{of Q}} k j) -> QPath-‚â° (last e) (last e)
        _‚à∑_ : ‚àÄ{l k j} -> (e : Edge {{of Q}} l k) -> {p q : QPath {{of Q}} k j}
              -> QPath-‚â° p q -> QPath-‚â° (e ‚à∑ p) (e ‚à∑ q)

      data QPath-‚â¢ : ‚àÄ{k j} -> (p q : QPath {{of Q}} k j) -> ùí∞ ùëñ where
        last-‚â¢ : ‚àÄ{k j} -> {e f : Edge {{of Q}} k j} -> (e ‚â¢-Str f) -> QPath-‚â¢ (last e) (last f)
        lengthMismatch-l : ‚àÄ{k l j} -> (e : Edge {{of Q}} k j) (f : Edge {{of Q}} k l) (p : QPath {{of Q}} l j)
                        -> QPath-‚â¢ (last e) (f ‚à∑ p)
        lengthMismatch-r : ‚àÄ{k l j} -> (e : Edge {{of Q}} k j) (f : Edge {{of Q}} k l) (p : QPath {{of Q}} l j)
                        -> QPath-‚â¢ (f ‚à∑ p) (last e)
        ‚à∑-‚â¢ : ‚àÄ{k l j} -> {e f : Edge {{of Q}} k l} {p q : QPath {{of Q}} l j} -> (e ‚â¢-Str f) -> QPath-‚â¢ (e ‚à∑ p) (f ‚à∑ q)
        nodeMismatch : ‚àÄ{k l1 l2 j} -> {e : Edge {{of Q}} k l1} {f : Edge {{of Q}} k l2} {p : QPath {{of Q}} l1 j} {q : QPath {{of Q}} l2 j} -> (l1 ‚â¢-Str l2) -> QPath-‚â¢ (e ‚à∑ p) (f ‚à∑ q)
        _‚à∑_ : ‚àÄ{l k j} -> (e : Edge {{of Q}} l k) -> {p q : QPath {{of Q}} k j}
        -- _‚à∑_ : ‚àÄ{k l1 l2 j} -> {e : Edge {{of Q}} k l1} {f : Edge {{of Q}} k l2} {p : QPath {{of Q}} l1 j} {q : QPath {{of Q}} l2 j}
              -> QPath-‚â¢ p q -> QPath-‚â¢ (e ‚à∑ p) (e ‚à∑ q)



      decide-QPath-‚â° : ‚àÄ{k j} -> (p q : QPath {{of Q}} k j) -> (QPath-‚â¢ p q) + (QPath-‚â° p q)
      decide-QPath-‚â° (last e) (last f) with e ‚âü-Str f
      ... | yes refl-StrId = right (last e)
      ... | no ¬¨p = left (last-‚â¢ ¬¨p)
      decide-QPath-‚â° (last e) (f ‚à∑ p) = left (lengthMismatch-l e f p)
      decide-QPath-‚â° (f ‚à∑ p) (last e) = left (lengthMismatch-r e f p)
      decide-QPath-‚â° (_‚à∑_ {b = l1} e p) (_‚à∑_ {b = l2} f q) with l1 ‚âü-Str l2
      ... | no ¬¨p = left (nodeMismatch ¬¨p)
      ... | yes refl-StrId with e ‚âü-Str f
      ... | no ¬¨p = left (‚à∑-‚â¢ ¬¨p)
      ... | yes refl-StrId with decide-QPath-‚â° p q
      ... | left x = left (e ‚à∑ x)
      ... | just x = right (e ‚à∑ x)



      QPath-‚ä• : ‚àÄ{k j} -> (p q : QPath {{of Q}} k j) -> (QPath-‚â¢ p q) -> p ‚â°-Str q -> ùüò-ùí∞
      QPath-‚ä• .(last _) .(last _) (last-‚â¢ x) refl-StrId = x refl
      QPath-‚ä• (e ‚à∑ _) (f ‚à∑ _) (‚à∑-‚â¢ x) S = {!!}
      QPath-‚ä• .(_ ‚à∑ _) .(_ ‚à∑ _) (nodeMismatch x) refl-StrId = x refl
      QPath-‚ä• .(e ‚à∑ _) .(e ‚à∑ _) (e ‚à∑ R) S = {!!}
        -- where gg : ‚àÄ{k j} -> QPath {{of Q}} k j -> ‚àë Œª l -> Edge {{of Q}} k l
        --       gg (last x) = {!!}
        --       gg (x ‚à∑ p) = _ , x

        --       P : (_ , e) ‚â°-Str (_ , f)
        --       P = cong-Str gg S

        --       P2 : e ‚â°-Str f
        --       P2 with cong-Str fst P
        --       ... | Z = {!!}

      -- QPath-‚â°-from-‚â° : ‚àÄ{k j} -> (p q : QPath {{of Q}} k j) -> p ‚â° q -> 


      -- lem-000-impl : ‚àÄ{k} -> ‚àÄ j -> ‚àÄ (e1 : Edge {{Dir}} k k) (e2 : Edge {{Dir}} k k) -> (p1 : QPath {{of Q}} k j) (p2 : QPath {{of Q}} k j)
      --           -> Path (QPath‚Çä k j) (some (e1 ‚à∑ p1)) (some (e2 ‚à∑ p2)) -> Path (QPath k j) p1 p2
      -- lem-000-impl {k} j e1 e2 p1 p2 q = {!!}

  {-
      lem-000-impl : ‚àÄ{k} -> ‚àÄ j1 j2 -> ‚àÄ (e1 : Edge {{Dir}} k k) (e2 : Edge {{Dir}} k k) -> (p1 : QPath {{of Q}} k j1) (p2 : QPath {{of Q}} k j2)
                -> (p : j1 ‚â°-Str j2) -> PathP (Œª i -> QPath‚Çä k (‚â°-Str‚Üí‚â° p i)) (some (e1 ‚à∑ p1)) (some (e2 ‚à∑ p2)) -> PathP (Œª i -> QPath k (‚â°-Str‚Üí‚â° p i)) p1 p2
      lem-000-impl {k} j1 .j1 e1 e2 p1 p2 refl-StrId q = {!!}

        where q2 : Path (QPath k j1) ((e1 ‚à∑ p1)) ((e2 ‚à∑ p2))
              q2 i = f (q i)
                  where f : (pp : QPath‚Çä {{of Q}} k j1) -> QPath {{of Q}} k j1
                        f id-Q = last a0
                        f (some x) = x

              q3 : œà (e1 ‚à∑ p1) ‚àº œà (e2 ‚à∑ p2)
              q3 = fromPath {{isEquivRel:‚àº}} (cong œà q2)

              P : œà  ‚àº œà p2
              P with q3
              ... | nodes‚â° , pat = {!!}

        -- where f : (pp : QPath‚Çä {{of Q}} k j1) -> QPath {{of Q}} k j1
        --       f id-Q = last a0
        --       f (some x) = {!!}
        --       -- f i .(some (e ‚à∑ p)) (isEndoP e p) = p

      data fstIsEndo k j (p : QPath {{of Q}} k j) : ùí∞ ùëñ where
        isEndoP : (‚àÄ l -> (e : Edge k l) -> (q : QPath {{of Q}} l j) -> (e ‚à∑ q ‚â° p) -> k ‚â°-Str l) -> fstIsEndo k j p

      -}



-}

