
-- {-# OPTIONS --overlapping-instances #-}

module Verification.Experimental.Algebra.Ring.Quotient where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Data.Prop.Everything
open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Algebra.Monoid.Definition
open import Verification.Experimental.Algebra.Group.Definition
open import Verification.Experimental.Algebra.Group.Quotient
open import Verification.Experimental.Algebra.Abelian.Definition
open import Verification.Experimental.Algebra.Ring.Definition



-- module _ {R : ùí∞ _} {I : ùí´ R} {{_ : Ring ùëó on R}} {{_ : Ideal ‚Ä≤ R ‚Ä≤ on I}} where
module _ {ùëó : ùîè ^ 2} {R : Ring ùëó} {I : Ideal R} where
  -- blabla : isCommutative ‚Ä≤ ‚ü® R ‚ü© ‚Ä≤
  -- blabla = it
  -- X = ‚ü® (‚Ä≤ ‚ü® R ‚ü© ‚Ä≤) /-Abelian ‚Ä≤ ‚ü® I ‚ü© ‚Ä≤ ‚ü©

  instance
    isSemiring:Quot : isSemiring ‚Ä≤ (‚ü® R ‚ü©) /-ùí∞ RelIdeal I ‚Ä≤
    -- isSemiring:Quot : isSemiring ‚Ä≤ ‚ü® (‚Ä≤ R ‚Ä≤) /-Abelian ‚Ä≤ I ‚Ä≤ ‚ü© ‚Ä≤
    isSemiring._‚ãÖ_ isSemiring:Quot [ a ] [ b ] = [ a ‚ãÖ b ]
    isSemiring.‚®° isSemiring:Quot = [ ‚®° ]
    isSemiring.unit-l-‚ãÖ isSemiring:Quot {a = [ a ]} = preserves-‚àº unit-l-‚ãÖ
    isSemiring.unit-r-‚ãÖ isSemiring:Quot {a = [ a ]} = preserves-‚àº unit-r-‚ãÖ
    isSemiring.assoc-l-‚ãÖ isSemiring:Quot {a = [ a ]} {b = [ b ]} {c = [ c ]} = preserves-‚àº assoc-l-‚ãÖ
    isSemiring.distr-l-‚ãÖ isSemiring:Quot {a = [ a ]} {b = [ b ]} {c = [ c ]} = preserves-‚àº distr-l-‚ãÖ
    isSemiring.distr-r-‚ãÖ isSemiring:Quot {a = [ a ]} {b = [ b ]} {c = [ c ]} = preserves-‚àº distr-r-‚ãÖ
    isSemiring._`cong-‚ãÖ`_ isSemiring:Quot {a‚ÇÄ = [ a‚ÇÄ ]} {a‚ÇÅ = [ a‚ÇÅ ]} {b‚ÇÄ = [ b‚ÇÄ ]} {b‚ÇÅ = [ b‚ÇÅ ]} (incl (incl p)) (incl (incl q)) =
      let P‚ÇÄ : ‚ü® ‚ü® I ‚ü© ((a‚ÇÄ ‚ãÜ ‚ó° a‚ÇÅ) ‚ãÖ b‚ÇÄ) ‚ü©
          P‚ÇÄ = ideal-r-‚ãÖ p

          P‚ÇÅ : ‚àÄ{x y z} -> ((x ‚ãÜ ‚ó° y) ‚ãÖ z) ‚àº x ‚ãÖ z ‚ãÜ ‚ó° (y ‚ãÖ z)
          P‚ÇÅ {x} {y} {z} =
               ((x ‚ãÜ ‚ó° y) ‚ãÖ z) ‚â£‚ü® distr-r-‚ãÖ ‚ü©
               (x ‚ãÖ z ‚ãÜ ‚ó° y ‚ãÖ z) ‚â£‚ü® refl `cong-‚ãÜ` switch-‚ó°-‚ãÖ-l ‚Åª¬π ‚ü©
               x ‚ãÖ z ‚ãÜ ‚ó° (y ‚ãÖ z) ‚àé

          P‚ÇÇ : ‚ü® ‚ü® I ‚ü© (a‚ÇÄ ‚ãÖ b‚ÇÄ ‚ãÜ ‚ó° (a‚ÇÅ ‚ãÖ b‚ÇÄ)) ‚ü©
          P‚ÇÇ = transp-Subsetoid P‚ÇÅ P‚ÇÄ

          P‚ÇÉ : ‚àÄ{x y z} -> (z ‚ãÖ (x ‚ãÜ ‚ó° y)) ‚àº z ‚ãÖ x ‚ãÜ ‚ó° (z ‚ãÖ y)
          P‚ÇÉ {x} {y} {z} =
               (z ‚ãÖ (x ‚ãÜ ‚ó° y)) ‚â£‚ü® distr-l-‚ãÖ ‚ü©
               (z ‚ãÖ x ‚ãÜ z ‚ãÖ ‚ó° y) ‚â£‚ü® refl `cong-‚ãÜ` switch-‚ó°-‚ãÖ-r ‚Åª¬π ‚ü©
               z ‚ãÖ x ‚ãÜ ‚ó° (z ‚ãÖ y) ‚àé

          P‚ÇÑ : ‚ü® ‚ü® I ‚ü© (a‚ÇÅ ‚ãÖ b‚ÇÄ ‚ãÜ ‚ó° (a‚ÇÅ ‚ãÖ b‚ÇÅ)) ‚ü©
          P‚ÇÑ = transp-Subsetoid P‚ÇÉ (ideal-l-‚ãÖ q)

          P‚ÇÖ : ‚ü® ‚ü® I ‚ü© ((a‚ÇÄ ‚ãÖ b‚ÇÄ ‚ãÜ ‚ó° (a‚ÇÅ ‚ãÖ b‚ÇÄ)) ‚ãÜ (a‚ÇÅ ‚ãÖ b‚ÇÄ ‚ãÜ ‚ó° (a‚ÇÅ ‚ãÖ b‚ÇÅ))) ‚ü©
          P‚ÇÖ = closed-‚ãÜ P‚ÇÇ P‚ÇÑ

          P‚ÇÜ : ‚àÄ {x y z} -> (x ‚ãÜ ‚ó° y) ‚ãÜ (y ‚ãÜ z) ‚àº x ‚ãÜ z
          P‚ÇÜ {x} {y} {z} =
            (x ‚ãÜ ‚ó° y) ‚ãÜ (y ‚ãÜ z)   ‚â£‚ü® assoc-l-‚ãÜ ‚ü©
            x ‚ãÜ (‚ó° y ‚ãÜ (y ‚ãÜ z))   ‚â£‚ü® refl `cong-‚ãÜ` assoc-r-‚ãÜ ‚ü©
            x ‚ãÜ (‚ó° y ‚ãÜ y ‚ãÜ z)     ‚â£‚ü® refl `cong-‚ãÜ` ((inv-l-‚ãÜ `cong-‚ãÜ` refl) ‚àô unit-l-‚ãÜ) ‚ü©
            x ‚ãÜ z                 ‚àé

          P‚Çá : ‚ü® ‚ü® I ‚ü© (a‚ÇÄ ‚ãÖ b‚ÇÄ ‚ãÜ ‚ó° (a‚ÇÅ ‚ãÖ b‚ÇÅ)) ‚ü©
          P‚Çá = transp-Subsetoid P‚ÇÜ P‚ÇÖ
      in incl (incl P‚Çá)

    -- isRing:Quot : isRing ‚Ä≤ ‚ü® (‚Ä≤ R ‚Ä≤) /-Abelian ‚Ä≤ I ‚Ä≤ ‚ü© ‚Ä≤
    -- -- isRing:Quot : isRing ‚Ä≤ ‚ü® (‚Ä≤ ‚ü® R ‚ü© ‚Ä≤) /-Abelian ‚Ä≤ ‚ü® I ‚ü© ‚Ä≤ ‚ü© ‚Ä≤
    -- isRing:Quot = record {}

-- _/-Ring_ : (R : Ring ùëó) -> (I : Ideal R) -> Ring _
-- _/-Ring_ R I = ‚Ä≤ ‚ü® ‚Ä≤ ‚ü® R ‚ü© ‚Ä≤ /-Abelian ‚Ä≤ ‚ü® I ‚ü© ‚Ä≤ ‚ü© ‚Ä≤


