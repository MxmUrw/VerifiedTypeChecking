
module Verification.Experimental.Algebra.MonoidWithZero.Ideal.Lattice where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Set.Setoid.Subsetoid
open import Verification.Experimental.Order.Preorder
open import Verification.Experimental.Order.Lattice
open import Verification.Experimental.Data.Prop.Everything
open import Verification.Experimental.Algebra.Monoid.Definition
open import Verification.Experimental.Algebra.MonoidWithZero.Definition
open import Verification.Experimental.Algebra.MonoidAction.Definition
open import Verification.Experimental.Algebra.MonoidWithZero.Ideal


module _ {M : Monoid‚ÇÄ ùëñ} where
  Leading-r : Ideal-r M -> ‚ü® M ‚ü© -> Prop _
  Leading-r I = Œª i ‚Üí ‚à£ (‚àÄ x -> (‚àë Œª a -> x ‚àº i ‚ãÜ a) -> ‚ü® ‚ü® I ‚ü© x ‚ü©) ‚à£

  module Leading-r:1 where
    lem-10 : ‚àÄ{I J : Ideal-r M} -> (I ‚â§ J) -> Leading-r I ‚â§ Leading-r J
    lem-10 {I} {J} I‚â§J = incl (Œª {a} LIa -> Œª x (a , x‚àºia) ‚Üí
                            let P‚ÇÅ : ‚ü® ‚ü® I ‚ü© x ‚ü©
                                P‚ÇÅ = LIa x (a , x‚àºia)
                            in ‚ü® I‚â§J ‚ü© P‚ÇÅ
                            )






