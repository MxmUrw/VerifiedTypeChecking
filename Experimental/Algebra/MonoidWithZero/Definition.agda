
module Verification.Experimental.Algebra.MonoidWithZero.Definition where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Set.Decidable
open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Algebra.Monoid.Definition


record hasZero (A : Monoid ùëñ) : ùí∞ ùëñ where
  field ‚óç : ‚ü® A ‚ü©
  field absorb-r-‚ãÜ : ‚àÄ{a : ‚ü® A ‚ü©} -> a ‚ãÜ ‚óç ‚àº ‚óç
  field absorb-l-‚ãÜ : ‚àÄ{a : ‚ü® A ‚ü©} -> ‚óç ‚ãÜ a ‚àº ‚óç
open hasZero {{...}} public

Monoid‚ÇÄ : ‚àÄ ùëñ -> ùí∞ _
Monoid‚ÇÄ ùëñ = Monoid ùëñ :& hasZero

record zeroIsDecidable (A : Monoid‚ÇÄ ùëñ) : ùí∞ ùëñ where
  field decide-‚óç : (a : ‚ü® A ‚ü©) -> isDecidable (a ‚àº ‚óç)
open zeroIsDecidable {{...}} public




