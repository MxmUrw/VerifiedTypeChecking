
{-# OPTIONS --overlapping-instances #-}

module Verification.Experimental.Algebra.Abelian.Definition where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Algebra.Setoid.Definition
open import Verification.Experimental.Algebra.Monoid.Definition
open import Verification.Experimental.Algebra.Group.Definition
open import Verification.Experimental.Algebra.Group.Quotient


Abelian : (ùëó : ùîè ^ 2) -> ùí∞ _
Abelian ùëó = Monoid ùëó :& (isGroup :, isCommutative)

Subabelian : (A : Abelian ùëó) -> ùí∞ _
Subabelian A = Subgroup ‚Ä≤ ‚ü® A ‚ü© ‚Ä≤

-- module _ {A : Abelian ùëó} where
--   RelSubabelian : Subabelian A -> ‚ü® A ‚ü© -> ‚ü® A ‚ü© -> ùí∞ _
--   RelSubabelian B = RelSubgroup ‚Ä≤ ‚ü® B ‚ü© ‚Ä≤

-- RelSubabelian : {A : Abelian ùëó} (B : Subabelian A) -> 

module _ {A : Abelian ùëó} {B : Subabelian A} where
  private
    instance
      isNormal:Subabelian : isNormal ‚Ä≤ ‚ü® B ‚ü© ‚Ä≤
      isNormal.normal isNormal:Subabelian a {b} b‚ààB =
        let P‚ÇÄ = b             ‚â£‚ü® unit-r-‚ãÜ ‚Åª¬π ‚ü©
                 b ‚ãÜ ‚óå         ‚â£‚ü® refl `cong-‚ãÜ` inv-r-‚ãÜ ‚Åª¬π ‚ü©
                 b ‚ãÜ (a ‚ãÜ ‚ó° a) ‚â£‚ü® assoc-r-‚ãÜ ‚ü©
                 b ‚ãÜ a ‚ãÜ ‚ó° a   ‚â£‚ü® comm-‚ãÜ `cong-‚ãÜ` refl ‚ü©
                 a ‚ãÜ b ‚ãÜ ‚ó° a   ‚àé

            P‚ÇÅ : ‚ü® B ‚ü© (a ‚ãÜ b ‚ãÜ ‚ó° a)
            P‚ÇÅ = transp-Subsetoid P‚ÇÄ b‚ààB
        in P‚ÇÅ

  instance
    isCommutative:AbelianQuot : isCommutative ‚Ä≤ ‚ü® A ‚ü© /-ùí∞ RelSubgroup B ‚Ä≤
    isCommutative.comm-‚ãÜ isCommutative:AbelianQuot {a = [ a ]} {b = [ b ]} = preserves-‚àº comm-‚ãÜ

-- _/-Abelian_ : (A : Abelian ùëó) -> (B : Subabelian A) -> Abelian _
-- _/-Abelian_ A B = ‚Ä≤ ‚ü® A ‚ü© ‚Ä≤ /-Group B


