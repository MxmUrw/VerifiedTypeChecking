
module Verification.Experimental.Data.Rational.Definition where

open import Verification.Conventions
open import Verification.Experimental.Data.Int.Definition
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Set.Setoid
open import Verification.Experimental.Algebra.Monoid
open import Verification.Experimental.Algebra.Group
open import Verification.Experimental.Algebra.Ring
open import Verification.Experimental.Algebra.Ring.Localization

private
  ‚Ñ§‚Å∫ : ùí´ ‚Ñ§
  ‚Ñ§‚Å∫ a = ‚àë Œª b -> a ‚â°-Str (pos (suc b))

instance
  isSubsetoid:‚Ñ§‚Å∫ : isSubsetoid ‚Ñ§‚Å∫
  isSubsetoid.transp-Subsetoid isSubsetoid:‚Ñ§‚Å∫ (incl p) (b , refl-StrId) = {!!} , {!!}

instance
  isMCS:‚Ñ§‚Å∫ : isMCS ‚Ä≤ ‚Ñ§ ‚Ä≤ ‚Ä≤ ‚Ñ§‚Å∫ ‚Ä≤
  isMCS.closed-‚ãÖ isMCS:‚Ñ§‚Å∫ = {!!}
  isMCS.closed-‚®° isMCS:‚Ñ§‚Å∫ = {!!}

instance
  hasNotZero-MCS:‚Ñ§‚Å∫ : hasNotZero-MCS ‚Ä≤ ‚Ñ§‚Å∫ ‚Ä≤
  hasNotZero-MCS:‚Ñ§‚Å∫ = {!!}

‚Ñö = Localize ‚Ä≤ ‚Ñ§ ‚Ä≤ ‚Ä≤ ‚Ñ§‚Å∫ ‚Ä≤

-- ta tb : ‚Ñö
-- ta = pos 1 / (pos 2 ‚àà (1 , it))

-- tb = negsuc 23 / (pos 3 ‚àà (2 , it))

-- tc = ta ‚ãÜ tb


