
module Verification.Experimental.Data.Fin.Definition where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Data.Int.Definition
open import Verification.Experimental.Data.Prop.Subset
open import Verification.Experimental.Set.Setoid
open import Verification.Experimental.Set.Discrete
-- open import Verification.Experimental.Set.Finite.Definition
open import Verification.Experimental.Order.Preorder
open import Verification.Experimental.Order.Totalorder


module _ {n : ‚Ñï} where
  instance
    isSetoid:Fin : isSetoid _ (Fin n)
    isSetoid._‚àº'_ (isSetoid:Fin) = _‚â°_
    isSetoid.isEquivRel:‚àº (isSetoid:Fin) = it

  instance
    isPreorder:Fin : isPreorder _ ‚Ä≤(Fin n)‚Ä≤
    isPreorder._‚â§'_ isPreorder:Fin (i , _) (j , _) = i ‚â§-‚Ñï j
    isPreorder.reflexive isPreorder:Fin = incl (0 , refl)
    isPreorder._‚ü°_ isPreorder:Fin = {!!}
    isPreorder.transp-‚â§ isPreorder:Fin = {!!}

  instance
    isPartialorder:Fin : isPartialorder ‚Ä≤(Fin n)‚Ä≤
    isPartialorder.antisym isPartialorder:Fin = {!!}

  instance
    isTotalorder‚Å∫:Fin : isTotalorder‚Å∫ ‚Ä≤(Fin n)‚Ä≤
    isTotalorder‚Å∫.total‚Å∫ isTotalorder‚Å∫:Fin = {!!}

  instance
    isDiscrete':Fin : isDiscrete' (Fin n)
    isùí´-Dec.decide-ùí´ (isDiscrete'.decidableEquality isDiscrete':Fin) = {!!}

  -- instance
  --   isFinite:Fin : isFinite ‚Ä≤(Fin n)‚Ä≤
  --   isFinite:Fin = {!!}


