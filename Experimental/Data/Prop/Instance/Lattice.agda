
module Verification.Experimental.Data.Prop.Instance.Lattice where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Order.Preorder
open import Verification.Experimental.Order.Lattice
open import Verification.Experimental.Data.Prop.Definition
open import Verification.Experimental.Data.Prop.Instance.Setoid
open import Verification.Experimental.Data.Prop.Instance.Preorder
open import Verification.Experimental.Data.Universe.Definition
open import Verification.Experimental.Data.Universe.Instance.Preorder
open import Verification.Experimental.Data.Universe.Instance.Lattice
open import Verification.Experimental.Data.Sum.Definition

-- data ‚ä•-Prop {ùëñ} : Prop ùëñ where

instance
  hasFiniteJoins:Prop : hasFiniteJoins ‚Ä≤ Prop ùëñ ‚Ä≤
  hasFiniteJoins.‚ä•         hasFiniteJoins:Prop = ‚à£ ‚ä•-ùí∞ ‚à£
  hasFiniteJoins.initial-‚ä• hasFiniteJoins:Prop = incl $ Œª {()}
  hasFiniteJoins._‚à®_       hasFiniteJoins:Prop = Œª A B -> ‚à£ ‚ü® A ‚ü© +-ùí∞ ‚ü® B ‚ü© ‚à£
  hasFiniteJoins.Œπ‚ÇÄ-‚à®      hasFiniteJoins:Prop = incl left
  hasFiniteJoins.Œπ‚ÇÅ-‚à®      hasFiniteJoins:Prop = incl right
  hasFiniteJoins.[_,_]-‚à®   hasFiniteJoins:Prop f g = incl $ either ‚ü® f ‚ü© ‚ü® g ‚ü©

