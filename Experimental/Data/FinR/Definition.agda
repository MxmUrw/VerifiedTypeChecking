
module Verification.Experimental.Data.FinR.Definition where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure

module VEDFD where
  private
    lem-10 : ‚àÄ{m n} -> m ‚â§-‚Ñï (m +-‚Ñï n)
    lem-10 {m} {n} = n , comm-+-‚Ñï n m
    <-k+ : ‚àÄ{m n k} -> m <-‚Ñï n -> k +-‚Ñï m <-‚Ñï k +-‚Ñï n
    <-k+ {m} {n} {k} p =
      let q : k +-‚Ñï (suc m) ‚â§-‚Ñï k +-‚Ñï n
          q = ‚â§-k+ p
      in transport (Œª i -> +-suc k m i ‚â§-‚Ñï k +-‚Ñï n) q

    lem-20 : ‚àÄ{m n o} -> (n ‚â§-‚Ñï m) -> m ‚â° n +-‚Ñï o -> m ‚à∏ n ‚â° o
    lem-20 {zero} {zero} {o} p1 p2 = p2
    lem-20 {zero} {suc n} {o} p1 p2 = {!!}
    lem-20 {suc m} {zero} {o} p1 p2 = p2
    lem-20 {suc m} {suc n} {o} p1 p2 = {!!}

    lem-30 : ‚àÄ{m n} -> (n ‚â§-‚Ñï m) -> suc (m ‚à∏ n) ‚â° suc m ‚à∏ n
    lem-30 = {!!}

  private
    f0 : ‚àÄ{m n} -> Fin m -> Fin (m +-‚Ñï n)
    f0 {m} {n} (i , ip) = i , trans-‚â§-‚Ñï ip lem-10

    f1 : ‚àÄ{m n} -> Fin n -> Fin (m +-‚Ñï n)
    f1 {m} {n} (i , ip) = (m +-‚Ñï i) , <-k+ ip

    f : ‚àÄ{m n} -> Fin m +-ùí∞ Fin n -> Fin (m +-‚Ñï n)
    f (left x) = f0 x
    f (just x) = f1 x

    g : ‚àÄ{m n} -> Fin (m +-‚Ñï n) -> Fin m +-ùí∞ Fin n
    g {m} {n} (x , xp) with x ‚âü-‚Ñï m
    ... | lt x<m = left (x , x<m)
    ... | eq x‚ÇÅ = right (0 , {!!})
    ... | gt m<x = right (x ‚à∏ m , 0 , lem-30 {x} {m} {!!} ‚àô (lem-20 {suc x} {m} {n} {!!} {!!}))




