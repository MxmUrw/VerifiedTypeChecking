
module Verification.Experimental.Set.Setoid.Definition where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Data.Prop.Definition


record ‚àº-Base {A : ùí∞ ùëñ} (R : A -> A -> ùí∞ ùëó) (a : A) (b : A) : ùí∞ (ùëó) where
  constructor incl
  field ‚ü®_‚ü© : R a b
  -- incl : R a b -> ‚àº-Base R a b -- a ‚àº[ R ] b
open ‚àº-Base public

instance
  isEquivRel:‚â°‚àº-Base : ‚àÄ{A : ùí∞ ùëñ} -> isEquivRel (‚àº-Base (_‚â°_ {A = A}))
  isEquivRel.refl isEquivRel:‚â°‚àº-Base = incl refl-Path
  isEquivRel.sym isEquivRel:‚â°‚àº-Base (incl p) = incl (sym-Path p)
  isEquivRel._‚àô_ isEquivRel:‚â°‚àº-Base (incl p) (incl q) = incl (trans-Path p q)

-- record isSetoid ùëó A {{_ : From (ùí∞ ùëñ) A}} : ùí∞ (ùëñ ÔΩ§ ùëó ‚Å∫) where
-- open isTypoid {{...}} public


record isSetoid (ùëó : ùîè) (A : ùí∞ ùëñ) : ùí∞ (ùëñ ÔΩ§ ùëó ‚Å∫) where
  -- field _‚àº_ : A -> A -> ùí∞ ùëó
  --       {{isEquivRel:‚àº}} : isEquivRel _‚àº_
  field _‚àº'_ : A -> A -> ùí∞ ùëó
  _‚àº_ : A -> A -> ùí∞ (ùëó)
  _‚àº_ = ‚àº-Base _‚àº'_ -- _‚àº[ _‚àº'_ ]_

  field {{isEquivRel:‚àº}} : isEquivRel _‚àº_

  _‚âÅ_ : A -> A -> ùí∞ (ùëó)
  _‚âÅ_ a b = ¬¨ a ‚àº b
open isSetoid {{...}} public

Setoid : (ùëó : ùîè ^ 2) -> ùí∞ _
Setoid ùëó = ùí∞ (ùëó ‚åÑ 0) :& isSetoid (ùëó ‚åÑ 1)

-- record isSetoidHom {ùëñ ùëó : ùîè ^ 2} (A : Setoid ùëñ) (B : Setoid ùëó) (f : ‚ü® A ‚ü© -> ‚ü® B ‚ü©) : ùí∞ (ùëñ ÔΩ§ ùëó) where
--   field preserves-‚àº : ‚àÄ{a b} -> a ‚àº b -> f a ‚àº f b
-- open isSetoidHom {{...}} public

record isSetoidHom {ùëñ ùëó : ùîè ^ 2} (A : Setoid ùëñ) (B : Setoid ùëó) (f : ‚ü® A ‚ü© -> ‚ü® B ‚ü©) : ùí∞ (ùëñ ÔΩ§ ùëó) where
-- record isSetoidHom {ùëñ ùëó : ùîè ^ 2} {A : ùí∞ _} {B : ùí∞ _} {{_ : Setoid ùëñ on A}} {{_ : Setoid ùëó on B}} (f : A -> B) : ùí∞ (ùëñ ÔΩ§ ùëó)where
  field preserves-‚àº : ‚àÄ{a b} -> a ‚àº b -> f a ‚àº f b
open isSetoidHom {{...}} public

SetoidHom : (A : Setoid ùëñ) (B : Setoid ùëó) -> ùí∞ _
SetoidHom A B = (‚ü® A ‚ü© -> ‚ü® B ‚ü©) :& isSetoidHom A B

module _ {A : Setoid ùëñ} {B : Setoid ùëó} where
  _‚àº-SetoidHom_ : (f g : SetoidHom A B) -> ùí∞ _
  _‚àº-SetoidHom_ f g = ‚àÄ{a} -> ‚ü® f ‚ü© a ‚àº ‚ü® g ‚ü© a

  instance
    isEquivRel:‚àº-SetoidHom : isEquivRel (‚àº-Base _‚àº-SetoidHom_)
    isEquivRel.refl isEquivRel:‚àº-SetoidHom = incl (Œª {a} ‚Üí refl)
    isEquivRel.sym isEquivRel:‚àº-SetoidHom (incl p) = incl (p ‚Åª¬π)
    isEquivRel._‚àô_ isEquivRel:‚àº-SetoidHom (incl p) (incl q) = incl (p ‚àô q)

  instance
    isSetoid:SetoidHom : isSetoid _ (SetoidHom A B)
    isSetoid._‚àº'_ isSetoid:SetoidHom = _‚àº-SetoidHom_


instance
  isSetoid:‚¶ãùí´‚¶å : ‚àÄ{ùëñ ùëó : ùîè} {A : ùí∞ ùëñ} -> {{_ : isSetoid ùëó A}} -> {P : ùí´ A} -> isSetoid _ ‚¶ã P ‚¶å
  isSetoid._‚àº'_ isSetoid:‚¶ãùí´‚¶å (a ‚à¢ _) (b ‚à¢ _) = a ‚àº b
  isEquivRel.refl (isSetoid.isEquivRel:‚àº isSetoid:‚¶ãùí´‚¶å) {x = a ‚à¢ x} = incl refl
  isEquivRel.sym (isSetoid.isEquivRel:‚àº isSetoid:‚¶ãùí´‚¶å) {a ‚à¢ x} {a‚ÇÅ ‚à¢ x‚ÇÅ} (incl p) = incl (sym p)
  isEquivRel._‚àô_ (isSetoid.isEquivRel:‚àº isSetoid:‚¶ãùí´‚¶å) {a ‚à¢ x} {a‚ÇÅ ‚à¢ x‚ÇÅ} {a‚ÇÇ ‚à¢ x‚ÇÇ} (incl p) (incl q) = incl (p ‚àô q)


-------------------------------------------------------------------------------
-- inheriting setoid structures

module _ {UU : ùí∞ ùëñ} {{U : hasU UU ùëó ùëò}} {{_ : isSetoid ùëô (getU U)}} where
  _‚àº-hasU_ : UU -> UU -> ùí∞ _
  _‚àº-hasU_ a b = destructEl U a ‚àº' destructEl U b

  isEquivRel:hasU : isEquivRel (‚àº-Base _‚àº-hasU_)
  isEquivRel.refl isEquivRel:hasU = incl ‚ü® refl ‚ü©
  isEquivRel.sym isEquivRel:hasU (incl p) = incl (‚ü® sym (incl p) ‚ü©)
  isEquivRel._‚àô_ isEquivRel:hasU (incl p) (incl q) = incl ‚ü® ((incl p) ‚àô (incl q)) ‚ü©

  isSetoid:hasU : isSetoid _ UU
  isSetoid._‚àº'_ isSetoid:hasU = _‚àº-hasU_
  isSetoid.isEquivRel:‚àº isSetoid:hasU = isEquivRel:hasU



--------------------------------------------------------------------------------
-- Subsetoids


-- record isSubsetoid {ùëó : ùîè ^ 2} (X : Setoid ùëó) (P : ùí´ ‚ü® X ‚ü©) : ùí∞ ùëó where

record isSubsetoid {ùëó : ùîè ^ 2} {X : ùí∞ _} {{_ : Setoid ùëó on X}} (P : ùí´ X) : ùí∞ ùëó where
  field transp-Subsetoid : ‚àÄ{a b : X} -> a ‚àº b -> a ‚àà P -> b ‚àà P

open isSubsetoid {{...}} public

Subsetoid : {ùëó : ùîè ^ 2} (X : Setoid ùëó) -> ùí∞ _
Subsetoid X = ùí´ ‚ü® X ‚ü© :& isSubsetoid

-- instance
--   isEquivRel:‚´ó : ‚àÄ{A : ùí∞ ùëñ} -> isEquivRel (‚àº-Base (Œª (P Q : A -> ùí∞ ùëó) -> P ‚´ó Q))
--   isEquivRel.refl isEquivRel:‚´ó = incl ((Œª x -> x) , (Œª x -> x))
--   isEquivRel.sym isEquivRel:‚´ó (incl (P , Q)) = incl (Q , P)
--   isEquivRel._‚àô_ isEquivRel:‚´ó (incl (P‚ÇÄ , Q‚ÇÄ)) (incl (P‚ÇÅ , Q‚ÇÅ)) = incl ((Œª x -> P‚ÇÅ (P‚ÇÄ x)) , (Œª x -> Q‚ÇÄ (Q‚ÇÅ x)))

-- instance
--   isEquivRel:‚´ó : ‚àÄ{ùëñ : ùîè ^ 2} -> ‚àÄ{A : Setoid ùëñ} -> isEquivRel (‚àº-Base (Œª (P Q : Subsetoid A) -> ‚ü® P ‚ü© ‚´ó ‚ü® Q ‚ü©))
--   isEquivRel.refl isEquivRel:‚´ó = incl ((Œª x -> x) , (Œª x -> x))
--   isEquivRel.sym isEquivRel:‚´ó (incl (P , Q)) = incl (Q , P)
--   isEquivRel._‚àô_ isEquivRel:‚´ó (incl (P‚ÇÄ , Q‚ÇÄ)) (incl (P‚ÇÅ , Q‚ÇÅ)) = incl ((Œª x -> P‚ÇÅ (P‚ÇÄ x)) , (Œª x -> Q‚ÇÄ (Q‚ÇÅ x)))

-- instance
--   isSetoid:Subsetoid : ‚àÄ{ùëó : ùîè ^ 2} -> {X : Setoid ùëó} -> isSetoid _ (Subsetoid X)
--   isSetoid._‚àº'_ isSetoid:Subsetoid A B = ‚ü® A ‚ü© ‚´ó ‚ü® B ‚ü©

--------------------------------------------------------------------------------
-- Quotients

data _/-ùí∞_ {ùëñ ùëó : ùîè} (A : ùí∞ ùëñ) (R : A -> A -> ùí∞ ùëó) : ùí∞ (ùëñ ) where
  [_] : A -> A /-ùí∞ R


instance
  isSetoid:/-ùí∞ : {ùëñ ùëò : ùîè} {A : ùí∞ ùëñ} -> {R : A -> A -> ùí∞ ùëò} -> {{_ : isEquivRel R}} -> isSetoid _ (A /-ùí∞ R)
  isSetoid._‚àº'_ (isSetoid:/-ùí∞ {R = R}) [ a ] [ b ] = R a b
  isEquivRel.refl (isSetoid.isEquivRel:‚àº isSetoid:/-ùí∞) {x = [ x ]} = incl refl
  isEquivRel.sym (isSetoid.isEquivRel:‚àº isSetoid:/-ùí∞) {x = [ x ]} {y = [ y ]} (incl p) = incl (sym p)
  isEquivRel._‚àô_ (isSetoid.isEquivRel:‚àº isSetoid:/-ùí∞) {x = [ x ]} {y = [ y ]} {z = [ z ]} (incl p) (incl q) = incl (p ‚àô q)

--------------------------------------------------------------------------------
-- Induced setoid

module _ {A : ùí∞ ùëñ} {{_ : isSetoid ùëó A}} {I : ùí∞ ùëò} where
  _‚àº-Family_ : (f g : I -> A) -> ùí∞ _
  _‚àº-Family_ f g = ‚àÄ{i} -> f i ‚àº' g i

  instance
    isEquivRel:‚àº-Family : isEquivRel (‚àº-Base _‚àº-Family_)
    isEquivRel.refl isEquivRel:‚àº-Family {f} = incl (Œª {a} -> ‚ü® refl {x = f a} ‚ü©)
    isEquivRel.sym isEquivRel:‚àº-Family (incl p) = incl (‚ü® incl p ‚Åª¬π ‚ü©)
    isEquivRel._‚àô_ isEquivRel:‚àº-Family (incl p) (incl q) = incl (‚ü® incl p ‚àô incl q ‚ü©)

  instance
    isSetoid:Family : isSetoid _ (I -> A)
    isSetoid._‚àº'_ isSetoid:Family f g = f ‚àº-Family g

    -- isEquivRel.refl (isSetoid.isEquivRel:‚àº isSetoid:Family) = incl (‚ü® refl ‚ü©)
    -- isEquivRel.sym (isSetoid.isEquivRel:‚àº isSetoid:Family) (incl p) = incl (‚ü® incl p ‚Åª¬π ‚ü©)
    -- isEquivRel._‚àô_ (isSetoid.isEquivRel:‚àº isSetoid:Family) (incl p) (incl q) = incl (‚ü® incl p ‚àô incl q ‚ü©)

-------------------------------------------------------------------------------
-- Isomorphism of setoids





