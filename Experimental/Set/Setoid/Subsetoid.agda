
module Verification.Experimental.Set.Setoid.Subsetoid where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Data.Prop.Everything
open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Order.Preorder
open import Verification.Experimental.Order.Lattice

module _ {X : Setoid ùëñ} where

  instance
    isSetoid:Subsetoid : isSetoid _ (Subsetoid X)
    isSetoid:Subsetoid = isSetoid:hasU

  instance
    isPreorder:Subsetoid : isPreorder _ ‚Ä≤(Subsetoid X)‚Ä≤
    isPreorder._‚â§'_ isPreorder:Subsetoid a b = ‚ü® a ‚ü© ‚â§' ‚ü® b ‚ü©
    isPreorder.reflexive isPreorder:Subsetoid = incl ‚ü® reflexive ‚ü©
    isPreorder._‚ü°_ isPreorder:Subsetoid p q = incl ‚ü® incl ‚ü® p ‚ü© ‚ü° incl ‚ü® q ‚ü© ‚ü©
    isPreorder.transp-‚â§ isPreorder:Subsetoid p q P = {!!}

  instance
    isSubsetoid:‚ä§ : isSubsetoid {A = ‚ü® X ‚ü©} ‚ä§
    isSubsetoid.transp-Subsetoid isSubsetoid:‚ä§ p _ = tt

  instance
    hasFiniteMeets:Subsetoid : hasFiniteMeets ‚Ä≤(Subsetoid X)‚Ä≤
    hasFiniteMeets.‚ä§ hasFiniteMeets:Subsetoid = ‚Ä≤ ‚ä§ ‚Ä≤
    hasFiniteMeets.terminal-‚ä§ hasFiniteMeets:Subsetoid = {!!}
    hasFiniteMeets._‚àß_ hasFiniteMeets:Subsetoid = {!!}
    hasFiniteMeets.œÄ‚ÇÄ-‚àß hasFiniteMeets:Subsetoid = {!!}
    hasFiniteMeets.œÄ‚ÇÅ-‚àß hasFiniteMeets:Subsetoid = {!!}
    hasFiniteMeets.‚ü®_,_‚ü©-‚àß hasFiniteMeets:Subsetoid = {!!}


