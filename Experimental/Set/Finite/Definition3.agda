
module Verification.Experimental.Set.Finite.Definition3 where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Set.Discrete
open import Verification.Experimental.Data.Prop.Everything
open import Verification.Experimental.Order.Preorder
open import Verification.Experimental.Order.Lattice



module _ {A : ùí∞ ùëñ} where
  ‚¶Ö_‚¶Ü : A -> A -> Prop ùëñ
  ‚¶Ö a ‚¶Ü b = ‚à£ (a ‚â° b) ‚à£

  data Reachable : {P Q : A -> Prop ùëñ} (_ : P ‚â§ Q) -> ùí∞ (ùëñ ‚Å∫) where
    refl-Reach : ‚àÄ{P : A -> Prop ùëñ} -> Reachable {P} {P} reflexive
    step-Reach : ‚àÄ{P Q : A -> Prop ùëñ} -> ‚àÄ{a : A}
                 -> (P‚â§Q : P ‚â§ Q)
                 -> ‚¶Ö a ‚¶Ü ‚â∞ P -> (Y : ‚¶Ö a ‚¶Ü ‚â§ Q)
                 -> Reachable {P ‚à® ‚¶Ö a ‚¶Ü} {Q} [ P‚â§Q , Y ]-‚à®
                 -> Reachable {P} {Q} P‚â§Q

  comp-Reach : ‚àÄ{P Q R : A -> Prop ùëñ} {X : P ‚â§ Q} {Y : Q ‚â§ R} -> Reachable X -> Reachable Y -> Reachable (X ‚ü° Y)
  comp-Reach refl-Reach q = q
  comp-Reach (step-Reach _ x Y p) q = {!!} -- step-Reach ? x ? (comp-Reach p q)

record ùí´-Dec (A : ùí∞ ùëñ) : ùí∞ (ùëñ ‚Å∫) where
  constructor _,_
  field ‚ü®_‚ü© : A -> Prop ùëñ
  field Proof : ‚àÄ a -> Decision (Prop.‚ü®_‚ü© (‚ü®_‚ü© a))
open ùí´-Dec public


-- ùí´-Dec : (A : ùí∞ ùëñ) -> ùí∞ (ùëñ ‚Å∫)
-- ùí´-Dec {ùëñ} A = (A -> Prop ùëñ) :& (Œª P -> ‚àÄ a -> Decision ‚ü® P a ‚ü©)

record isFinite (A : ùí∞ ùëñ) : ùí∞ (ùëñ ‚Å∫) where
  field reach : ‚àÄ (P Q : ùí´-Dec A) -> (R : ‚ü® P ‚ü© ‚â§ ‚ü® Q ‚ü©) -> Reachable R
open isFinite {{...}} public

Finite : (ùëñ : ùîè) -> ùí∞ _
Finite ùëñ = ùí∞ ùëñ :& isFinite

-- size : Finite ùëñ -> ‚Ñï
-- size A = f ‚ü® A ‚ü© (‚ä• , {!!}) {!!} {!!} (reach _ _ _)
--   where f : ‚àÄ(A : ùí∞ ùëñ) (P Q : ùí´-Dec A) -> (R : ‚ü® P ‚ü© ‚â§ ‚ü® Q ‚ü©) -> Reachable R -> ‚Ñï
--         f A P (.(‚ü® P ‚ü©) , Proof‚ÇÅ) (incl .(isPreorder.reflexive isPreorder:Prop)) refl-Reach = 0
--         f A P Q R (step-Reach .R x Y r) = suc (f _ _ _ _ r)


