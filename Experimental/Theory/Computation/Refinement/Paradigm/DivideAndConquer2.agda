
module Verification.Experimental.Theory.Computation.Problem.Paradigm.DivideAndConquer where

open import Verification.Experimental.Conventions
open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Set.Discrete
open import Verification.Experimental.Data.Universe.Everything
open import Verification.Experimental.Data.Prop.Everything
open import Verification.Experimental.Order.WellFounded.Definition
open import Verification.Experimental.Category.Std.Category.Definition
-- open import Verification.Experimental.Category.Std.Limit.Specific.Coequalizer
-- open import Verification.Experimental.Category.Std.Category.As.Monoid
-- open import Verification.Experimental.Algebra.MonoidWithZero.Definition
-- open import Verification.Experimental.Algebra.MonoidWithZero.Ideal
open import Verification.Experimental.Theory.Computation.Problem.Definition
-- open import Verification.Experimental.Theory.Computation.Unification.Monoidic.PrincipalFamilyCat


---------------------------------------------------------------
-- Every problem can be turned into the problem of
-- finding a divide and conquer solution

record DivideAndConquer (Œ† : Problem ùëñ) : ùí∞ (ùëñ ‚åÑ 0) where
  field original : ‚ü® Œ† ‚ü©
open DivideAndConquer {{...}} public

record DivideAndConquerProp (Œ† : Problem ùëñ) (P : DivideAndConquer Œ† -> ùí∞ _) : ùí∞ (fst ùëñ ÔΩ§ (fst (snd ùëñ)) ‚Å∫) where
  field Size : WFT (‚Ñì‚ÇÄ , ‚Ñì‚ÇÄ)
  field size : (‚àë P) -> ‚ü® Size ‚ü©
  field originalP : Property {{of Œ†}} (Œª x -> (P (record {original = x})))
  -- field ‚àÇ : ‚ü® Œ† ‚ü© -> ‚àë Œª n -> Fin-R n -> ‚ü® Œ† ‚ü©
  -- field size-‚àÇ : ‚àÄ p -> ‚àÄ i -> size (‚àÇ p .snd i) ‚â™ size p

open DivideAndConquerProp {{...}} public

DAC : ‚àÄ (Œ† : Problem ùëñ) -> SomeStructure
DAC Œ† = structureOn (DivideAndConquer Œ†)

instance
  isProblem:DAC : ‚àÄ{Œ† : Problem ùëñ} -> isProblem ((ùëñ ‚åÑ 1) , ùëñ ‚åÑ 2) (DAC Œ†)
  isProblem:DAC {Œ† = Œ†} = record
    { Property = DivideAndConquerProp Œ†
    ; Solution = {!!}
    }

„Å∂„Çì : Problem ùëñ -> Problem ùëñ
„Å∂„Çì Œ† = DAC Œ†

ÂàÜ : ‚àÄ {ùëñ} -> SomeStructure
ÂàÜ {ùëñ} = structureOn („Å∂„Çì {ùëñ})

private
  module _ {Œ† : Problem ùëñ} where
    Œµ : DAC Œ† -> ‚ü® Œ† ‚ü©
    Œµ x = x .original

    instance
      isReduction:Œµ : isReduction (DAC Œ†) Œ† Œµ
      isReduction:Œµ = record
        { propMap = Œª P x ‚Üí let y = originalP {{x}}
                            in {!!}
        ; solutionMap = {!!}
        }

Œµ-ÂàÜ : ‚àÄ{Œ† : Problem ùëñ} -> ÂàÜ Œ† ‚ü∂ Œ†
Œµ-ÂàÜ = incl ‚Ä≤ Œµ ‚Ä≤


{-
-- record DivideAndConquerSolution {Œ† : Problem ùëñ} (P : DivideAndConquer Œ†) : ùí∞ ùëñ where
--   field ‚àÇ-solves : ‚àÄ (p : ‚ü® Œ† ‚ü©) -> (‚àÄ i -> SolutionSpace (‚àÇ {{P}} p .snd i)) -> SolutionSpace p


module _ {Œ† : Problem ùëñ} where
  instance
    isProblem:DAC : isProblem (ùëñ ‚åÑ 1) (DAC Œ†)
    isProblem:DAC = record
      { Property = DivideAndConquerProp Œ†
      ; Solution = {!!}
      }
    -- record { SolutionSpace = DivideAndConquerSolution }

dac : Problem ùëñ -> Problem _
dac Œ† = DAC Œ†

fmap-dac : ‚àÄ{Œ© Œ† : Problem ùëñ} -> (f : Reduction Œ© Œ†) -> DAC Œ© -> DAC Œ†
fmap-dac f x = record { original = ‚ü® f ‚ü© (x .original) }

instance
  isReduction:fmap-dac : ‚àÄ{Œ© Œ† : Problem ùëñ} -> {f : Reduction Œ© Œ†} -> isReduction (DAC Œ©) (DAC Œ†) (fmap-dac f)
  isReduction:fmap-dac {f = f} = record
    { propMap = Œª P x ‚Üí record
                        { Size = x .Size
                        ; size = Œª (a , b , c) ‚Üí let Q = x .size
                                                 in Q (_ , c .fst )
                        ; originalP = let Q = x .originalP
                                          xx = propMap {{of f}} _ Q
                                      in {!!}
                        }
    ; solutionMap = {!!}
                         -- { Size = x .Size
                         -- ; size = Œª y ‚Üí let f = x .size
                         --                in f (_ , y .snd)
                         -- ; originalP = let Q = x .originalP
                         --                   xx = propMap {{of f}} _ Q
                         --               in xx
                         -- }
    }

module _ {Œ† : Problem ùëñ} where
  -- Œ∑-DAC : ‚ü® Œ† ‚ü© -> DAC Œ†
  -- Œ∑-DAC x = record { original = x }

  Œ∑-DAC : DAC Œ† -> ‚ü® Œ† ‚ü©
  Œ∑-DAC x = x .original

  instance
    isReduction:Œ∑-DAC : isReduction (DAC Œ†) Œ† Œ∑-DAC
    isReduction:Œ∑-DAC = record
      { propMap = Œª P x ‚Üí let y = originalP {{x}}
                          in {!!}
      ; solutionMap = {!!}
      }


-}
