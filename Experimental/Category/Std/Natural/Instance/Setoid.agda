
module Verification.Experimental.Category.Std.Natural.Instance.Setoid where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Functor.Definition
open import Verification.Experimental.Category.Std.Natural.Definition


module _ {ùíû : Category ùëñ} {ùíü : Category ùëó} {F G : Functor ùíû ùíü} where

  _‚àº-Natural_ : (Œ± Œ≤ : Natural F G) -> ùí∞ _
  Œ± ‚àº-Natural Œ≤ = ‚àÄ{x : ‚ü® ùíû ‚ü©} -> ‚ü® Œ± ‚ü© {x} ‚àº ‚ü® Œ≤ ‚ü© {x}

  instance
    isEquivRel:‚àº-Natural : isEquivRel (‚àº-Base (Œª (a b : Hom-Base Natural F G) -> ‚ü® a ‚ü© ‚àº-Natural ‚ü® b ‚ü©))
    isEquivRel.refl isEquivRel:‚àº-Natural = incl refl
    isEquivRel.sym isEquivRel:‚àº-Natural (incl p) = incl (sym p)
    isEquivRel._‚àô_ isEquivRel:‚àº-Natural (incl p) (incl q) = incl (p ‚àô q)

  instance
    isSetoid:Natural : isSetoid _ (Hom-Base Natural F G)
    isSetoid._‚àº'_ isSetoid:Natural a b = ‚ü® a ‚ü© ‚àº-Natural ‚ü® b ‚ü©
    isSetoid.isEquivRel:‚àº isSetoid:Natural = isEquivRel:‚àº-Natural

