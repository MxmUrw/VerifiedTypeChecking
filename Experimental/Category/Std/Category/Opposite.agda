
module Verification.Experimental.Category.Std.Category.Opposite where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Set.Setoid
open import Verification.Experimental.Category.Std.Category.Definition


-- | For a more general kind of example, consider an arbitrary category |­Юњъ|.
--   Then we can construct another category |­Юњъ рхњрхќ| which has the same objects
--   as |­Юњъ|, but where the direction of all arrows is reversed.

-- [Definition]
-- | There is a function [..], mapping a category to its opposite. It is defined as:
_рхњрхќ : Category ­ЮЉќ -> Category ­ЮЉќ
_рхњрхќ ­Юњъ = Рђ▓ РЪе ­Юњъ РЪЕ Рђ▓ {{Op}}
  where Op : isCategory _ РЪе ­Юњъ РЪЕ
        isCategory.Hom' Op a b = Hom' b a
        isSetoid._Рѕ╝'_ (isCategory.isSetoid:Hom Op {x} {y}) (incl f) (incl g) = _Рѕ╝'_ {{isSetoid:Hom {{of ­Юњъ}} {a = y} {x} }} (incl f) (incl g)
        isEquivRel.refl (isSetoid.isEquivRel:Рѕ╝ (isCategory.isSetoid:Hom Op {x} {y})) = incl РЪе refl {{isEquivRel:Рѕ╝ {{isSetoid:Hom {{of ­Юњъ}}}}}} РЪЕ
        isEquivRel.sym (isSetoid.isEquivRel:Рѕ╝ (isCategory.isSetoid:Hom Op {x} {y})) (incl p) = incl РЪе sym {{isEquivRel:Рѕ╝ {{isSetoid:Hom {{of ­Юњъ}}}}}} (incl p) РЪЕ
        isEquivRel._РѕЎ_ (isSetoid.isEquivRel:Рѕ╝ (isCategory.isSetoid:Hom Op {x} {y})) (incl p) (incl q) = incl РЪе _РѕЎ_ {{isEquivRel:Рѕ╝ {{isSetoid:Hom {{of ­Юњъ}}}}}} (incl p) (incl q) РЪЕ
        isCategory.id Op = incl РЪе id РЪЕ
        isCategory._РЌє_ Op f g = incl РЪе incl РЪе g РЪЕ РЌє incl РЪе f РЪЕ РЪЕ
        isCategory.unit-l-РЌє Op = incl РЪе unit-r-РЌє РЪЕ
        isCategory.unit-r-РЌє Op = incl РЪе unit-l-РЌє РЪЕ
        isCategory.unit-2-РЌє Op = incl РЪе unit-2-РЌє РЪЕ
        isCategory.assoc-l-РЌє Op = incl РЪе assoc-r-РЌє РЪЕ
        isCategory.assoc-r-РЌє Op = incl РЪе assoc-l-РЌє РЪЕ
        isCategory._РЌѕ_ Op (incl p) (incl q) = incl РЪе incl q РЌѕ incl p РЪЕ

module _ {­Юњъ : Category ­ЮЉќ} where
  рхњрхќрхњрхќ : (­Юњъ рхњрхќ рхњрхќ) РЅА-Str ­Юњъ
  рхњрхќрхњрхќ = refl

-- РЪе ­Юњъ рхњрхќ РЪЕ                         = РЪе ­Юњъ РЪЕ
-- isCategory.Hom' (of ­Юњъ рхњрхќ) a b  = Hom' {{of ­Юњъ}} b a

-- |> All equations for |­Юњъ рхњрхќ| can be proven by simply using their symmetric counterpart in $­Юњъ$.
-- isCategory._РЅБ_        (of ­Юњъ рхњрхќ)  = _РЅБ_
-- isCategory.isEquivRel:РЅБ   (of ­Юњъ рхњрхќ)  = isEquivRel:РЅБ
-- isCategory.id         (of ­Юњъ рхњрхќ)  = id
-- isCategory._РЌє_        (of ­Юњъ рхњрхќ)  = ╬╗ f g -> g РЌє f
-- isCategory._РЌѕ_        (of ­Юњъ рхњрхќ)  = ╬╗ p q -> q РЌѕ p
-- isCategory.unit-l-РЌє   (of ­Юњъ рхњрхќ)  = unit-r-РЌє
-- isCategory.unit-r-РЌє   (of ­Юњъ рхњрхќ)  = unit-l-РЌє
-- isCategory.unit-2-РЌє   (of ­Юњъ рхњрхќ)  = unit-2-РЌє
-- isCategory.assoc-l-РЌє  (of ­Юњъ рхњрхќ)  = assoc-r-РЌє
-- isCategory.assoc-r-РЌє  (of ­Юњъ рхњрхќ)  = assoc-l-РЌє
-- //

