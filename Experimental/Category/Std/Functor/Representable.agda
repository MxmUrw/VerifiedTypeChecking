
module Verification.Experimental.Category.Std.Functor.Representable where

open import Verification.Conventions
open import Verification.Experimental.Meta.Structure
open import Verification.Experimental.Set.Setoid.Definition
open import Verification.Experimental.Set.Setoid.Instance.Category
open import Verification.Experimental.Data.Universe.Definition
open import Verification.Experimental.Category.Std.Category.Definition
open import Verification.Experimental.Category.Std.Category.Opposite
open import Verification.Experimental.Category.Std.Functor.Definition
open import Verification.Experimental.Category.Std.Functor.Instance.Category
open import Verification.Experimental.Category.Std.Morphism.Iso
open import Verification.Experimental.Category.Std.Natural.Definition
open import Verification.Experimental.Category.Std.Natural.Instance.Setoid


record isIso-Std {a : Setoid ­ЮЉќ} {b : Setoid ­ЮЉЌ} (f : SetoidHom a b) : ­Юњ░ (­ЮЉќ №йц ­ЮЉЌ) where
  field inverse-Std : SetoidHom b a
        inv-r-РЌє-Std : (f РЌє-Std inverse-Std) Рѕ╝ id-Std
        inv-l-РЌє-Std : (inverse-Std РЌє-Std f) Рѕ╝ id-Std
open isIso-Std {{...}} public

_РЅЁ-Std_ : (A : Setoid ­ЮЉќ) (B : Setoid ­ЮЉЌ) -> ­Юњ░ (­ЮЉќ №йц ­ЮЉЌ)
A РЅЁ-Std B = (SetoidHom A B) :& isIso-Std


-- module _ {­Юњъ : ­Юњ░ _} {{_ : Category ­ЮЉќ on ­Юњъ}} where
-- module _ {­Юњъ : Category ­ЮЉќ} where
module _ {­Юњъ : ­Юњ░ ­ЮЉЌ} {{_ : isCategory ­ЮЉќ ­Юњъ}} where

  [_,_]-Std : ­Юњъ -> ­Юњъ -> РЪе Std _ РЪЕ
  [ x , y ]-Std = Рђ▓ x РЪХ y Рђ▓

  [_,_]­ЮЊѕ = [_,_]-Std

[_,_]­ЮЊі = _РЪХ_
_РЅЁ­ЮЊѕ_ = _РЅЁ-Std_


-- module _ {­Юњъ : Category ­ЮЉќ} where
module _ {­Юњъ : ­Юњ░ ­ЮЉЌ} {{_ : isCategory ­ЮЉќ ­Юњъ}} where
  instance
    isSetoidHom:map[,] : Рѕђ{a b c : ­Юњъ} -> {f : b РЪХ c} -> isSetoidHom [ a , b ]­ЮЊѕ [ a , c ]­ЮЊѕ (_РЌє f)
    isSetoidHom:map[,] {f = f} =
      record {
        preserves-Рѕ╝ = ╬╗ p -> p РЌѕ refl
      }

  instance
    isFunctor:Homрхњрхќ : Рѕђ{x : ­Юњъ} -> isFunctor (Рђ▓ ­Юњъ Рђ▓) (Std _) [ x ,_]-Std
    isFunctor.map isFunctor:Homрхњрхќ (f) = incl (Рђ▓ (╬╗ g -> g РЌє f) Рђ▓)
      -- where P : isSetoidHom _ _ (╬╗ g -> g РЌє f)
      --       isSetoidHom.preserves-Рѕ╝ P p = p РЌѕ refl
    isSetoidHom.preserves-Рѕ╝ (isFunctor.isSetoidHom:map isFunctor:Homрхњрхќ) p = incl (incl (refl РЌѕ p))
    isFunctor.functoriality-id isFunctor:Homрхњрхќ = incl (incl (unit-r-РЌє))
    isFunctor.functoriality-РЌє isFunctor:Homрхњрхќ = incl (incl assoc-r-РЌє)

  instance
    isSetoidHom:compose : Рѕђ{a b c : ­Юњъ} -> {f : a РЪХ b} -> isSetoidHom [ b , c ]­ЮЊѕ [ a , c ]­ЮЊѕ (f РЌє_)
    isSetoidHom:compose {f = f} = record { preserves-Рѕ╝ = refl РЌѕ_ }

  instance
    isFunctor:Hom : Рѕђ{y : ­Юњъ} -> isFunctor (Рђ▓ ­Юњъ Рђ▓ рхњрхќ) (Std _) [_, y ]-Std
    isFunctor.map isFunctor:Hom (incl f) = incl Рђ▓(incl f РЌє_)Рђ▓
    isSetoidHom.preserves-Рѕ╝ (isFunctor.isSetoidHom:map isFunctor:Hom) (incl p) = incl (incl (incl p РЌѕ refl))
    isFunctor.functoriality-id isFunctor:Hom = incl (incl (unit-l-РЌє))
    isFunctor.functoriality-РЌє isFunctor:Hom = incl (incl assoc-l-РЌє)

module _ {­Юњъ : Category ­ЮЉќ} where
  record isCorep (F : Functor ­Юњъ (Std _)) (x : РЪе ­Юњъ РЪЕ) : ­Юњ░ (­ЮЉќ РЂ║) where
    field corep : F РЅЁ Рђ▓ [ x ,_]­ЮЊѕ Рђ▓

  open isCorep {{...}} public
  Corep : (Functor ­Юњъ (Std _)) -> ­Юњ░ _
  Corep F = Structure (isCorep F)

module _ {­Юњъ : Category ­ЮЉќ} where
  module _ {F : Functor (­Юњъ) (Std _)} {x : РЪе ­Юњъ РЪЕ} where

    сѓѕрхњрхќ : [ Рђ▓ [ x ,_]­ЮЊѕ Рђ▓ , F ]­ЮЊѕ РЅЁ­ЮЊѕ (РЪе F РЪЕ x)
    сѓѕрхњрхќ = Рђ▓ f Рђ▓ {{PРѓЂ}}
      where f : (Рђ▓ [ x ,_]-Std Рђ▓) РЪХ F -> РЪе (РЪе F РЪЕ x) РЪЕ
            f ╬▒ = let ╬▒' = РЪе РЪе РЪе РЪе ╬▒ РЪЕ РЪЕ {x} РЪЕ РЪЕ
                  in ╬▒' id

            g : РЪе РЪе F РЪЕ x РЪЕ  ->  [ Рђ▓ [ x ,_]­ЮЊѕ Рђ▓ , F ]­ЮЊі
            g a = let ╬▒ : Рѕђ{y} -> [ x , y ]­ЮЊі  -> РЪе РЪе F РЪЕ y РЪЕ
                      ╬▒ f = РЪе РЪе map f РЪЕ РЪЕ a

                      instance
                        PРѓђ : Рѕђ{y} -> isSetoidHom [ x , y ]­ЮЊѕ (РЪе F РЪЕ y) (╬▒ {y})
                        PРѓђ {y} = record {
                          preserves-Рѕ╝ = ╬╗ {f} {g} fРѕ╝g ->
                            let PРѓЂ : map {{of F}} f Рѕ╝ map {{of F}} g
                                PРѓЂ = preserves-Рѕ╝ fРѕ╝g
                            in РЪе РЪе PРѓЂ РЪЕ РЪЕ {a}
                          }

                        PРѓЂ : isNatural Рђ▓ [ x ,_]­ЮЊѕ Рђ▓ F (incl Рђ▓ ╬▒ Рђ▓)
                        PРѓЂ = record {
                          naturality = ╬╗ f -> incl (incl (╬╗ {g} ->
                            let instance
                                  PРѓѓ : Рѕђ{y} -> isSetoid _ РЪе РЪе F РЪЕ y РЪЕ
                                  PРѓѓ {y} = of (РЪе F РЪЕ y)
                                PРѓЃ : РЪе РЪе map {{of F}} f РЪЕ РЪЕ (РЪе РЪе map {{of F}} g РЪЕ РЪЕ a) Рѕ╝ РЪе РЪе map {{of F}} (g РЌє f) РЪЕ РЪЕ a
                                PРѓЃ = РЪе РЪе functoriality-РЌє {{of F}} РЂ╗┬╣ РЪЕ РЪЕ
                            in PРѓЃ
                            ))
                          }
                  in incl Рђ▓ (incl Рђ▓ ╬▒ Рђ▓) Рђ▓

            instance
              PРѓђ : isSetoidHom (Рђ▓ (Рђ▓ [ x ,_]-Std Рђ▓) РЪХ F Рђ▓) (РЪе F РЪЕ x) f
              isSetoidHom.preserves-Рѕ╝ PРѓђ {a = a} {b} (incl p) = РЪе РЪе p {x} РЪЕ РЪЕ {id}

              PРѓѓ : isSetoidHom _ _ g
              isSetoidHom.preserves-Рѕ╝ PРѓѓ (p) = incl (incl (incl (╬╗ {f} -> preserves-Рѕ╝ {{of РЪе map {{of F}} f РЪЕ}} p)))
            PРѓЂ : isIso-Std Рђ▓ f Рђ▓
            isIso-Std.inverse-Std PРѓЂ = Рђ▓ g Рђ▓
            isIso-Std.inv-r-РЌє-Std PРѓЂ = incl (╬╗ {╬▒} -> incl (╬╗ {x} -> incl (incl (╬╗ {f} ->
                let PРѓё : РЪе РЪе ╬▒ РЪЕ РЪЕ РЌє map {{of F}} f Рѕ╝ incl Рђ▓(_РЌє f)Рђ▓ РЌє РЪе РЪе ╬▒ РЪЕ РЪЕ
                    PРѓё = naturality {{of РЪе ╬▒ РЪЕ}} f
                    PРѓЁ = РЪе РЪе PРѓё РЪЕ РЪЕ {id}

                    instance
                      PРѓє : isSetoid _ РЪе РЪе F РЪЕ x РЪЕ
                      PРѓє = of (РЪе F РЪЕ x)

                    instance
                      PРѓѕ = isEquivRel:Рѕ╝ {{PРѓє}}

                    PРѓЄ : РЪе РЪе РЪе РЪе ╬▒ РЪЕ РЪЕ РЪЕ РЪЕ (id РЌє f) Рѕ╝ РЪе РЪе РЪе РЪе ╬▒ РЪЕ РЪЕ РЪЕ РЪЕ f
                    PРѓЄ = preserves-Рѕ╝ {{of РЪе РЪе РЪе ╬▒ РЪЕ РЪЕ РЪЕ}} unit-l-РЌє

                in PРѓЁ РѕЎ PРѓЄ
              )) ))
            isIso-Std.inv-l-РЌє-Std PРѓЂ = incl (╬╗ {a} -> РЪе РЪе functoriality-id РЪЕ РЪЕ)



-- {{isSetoidHom:map[,] {­Юњъ = РЪе ­Юњъ РЪЕ}}}
{-
--   instance
--     isFunctor:Hom : Рѕђ{y : РЪе ­Юњъ РЪЕ} -> isFunctor (­Юњъ рхњрхќ) (Std _) [_, y ]-Std
--     isFunctor.map isFunctor:Hom (incl f) = incl (Рђ▓ (╬╗ g -> incl f РЌє g) Рђ▓ {{P}})
--       where P : isSetoidHom (╬╗ g -> incl f РЌє g)
--             isSetoidHom.preserves-Рѕ╝ P p = incl РЪе refl {{isEquivRel:Рѕ╝ {{isSetoid:Hom {{of ­Юњъ}}}}}} РЪЕ РЌѕ p
--             -- incl РЪе (refl) {{of ­Юњъ рхњрхќ}} РЪЕ РЌѕ p
--     isSetoidHom.preserves-Рѕ╝ (isFunctor.isSetoidHom:map isFunctor:Hom) (incl p) = incl (incl (╬╗ {aРѓѓ} -> incl (sym p) РЌѕ ?))
--     isFunctor.functoriality-id isFunctor:Hom = {!!}
--     isFunctor.functoriality-РЌє isFunctor:Hom = {!!}

--   record isRepresentable (F : Functor (­Юњъ рхњрхќ) (Std _)) : ­Юњ░ (­ЮЉќ РЂ║) where
--     field Repr : РЪе ­Юњъ РЪЕ
--     field repr : F РЅЁ Рђ▓ [_, Repr ]-Std Рђ▓

-- module _ {­Юњъ : Category ­ЮЉќ} where
--   module _ {F : Functor (­Юњъ рхњрхќ) (Std _)} {x : РЪе ­Юњъ РЪЕ} where
--     X : Functor (­Юњъ рхњрхќ) (Std _)
--     X = Рђ▓ [_, x ]-Std Рђ▓ {{isFunctor:Hom {­Юњъ = ­Юњъ} {y = x}}}

    -- сѓѕ : Рђ▓ (Рђ▓ [_, x ]-Std Рђ▓ {{isFunctor:Hom}}) РЪХ F Рђ▓ РЅЁ-Std (РЪе F РЪЕ x)
    -- сѓѕ = {!!}



-}


