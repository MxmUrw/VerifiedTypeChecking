
module Verification.Temporary.Coproduct where

open import Verification.Conventions
open import Verification.Experimental.Data.Sum.Definition
open import Verification.Experimental.Data.Universe.Definition
_+_ = _+-๐ฐ_
pattern ฮนโ = left
pattern ฮนโ = right
[_,_] = either
_โ_ = _โ-๐ฐ_
infixl 40 _โ_
id = id-๐ฐ

postulate
  B C D ฮพ : ๐ฐโ
  h : B + ฮพ -> D
  ฯ : B -> C + ฮพ
  i : C -> D + ฮพ
  Pโ : โ a -> (ฯ โ [ i , ฮนโ ]) a โก (ฮนโ โ h โ ฮนโ) a

thm1 : ฯ โ [ i โ [ id , ฮนโ โ h ] , ฮนโ โ h ] โก ฮนโ โ h
thm1 = {!!}

thm2 : โ a -> (ฯ โ [ i โ [ id , ฮนโ โ h ] , ฮนโ โ h ]) a โก (ฮนโ โ h) a
thm2 a with split-+ (ฯ a)
... | left (x , g) =
  let -- Pโ : (ฯ โ i โ [ id , ฮนโ โ h ]) (x) โก (ฯ โ ฮนโ โ h) a
      -- Pโ = ?

      Pโ : (i โ [ id , ฮนโ โ h ]) (x) โก (ฮนโ โ h) a
      Pโ = {!!}

      Pโ : ([ i โ [ id , ฮนโ โ h ] , ฮนโ โ h ]) (left x) โก (ฮนโ โ h) a
      Pโ = Pโ
  in {!!}
... | just (x , g) =
  let Pโ : [ i , ฮนโ ] (just x) โก (ฮนโ โ h โ ฮนโ) (a)
      Pโ = transport (ฮป j -> [ i , ฮนโ ] (g j) โก (ฮนโ โ h โ ฮนโ) a) (Pโ a)
  in ๐-rec (rightโขleft Pโ)





