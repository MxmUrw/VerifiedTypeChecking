
{-# OPTIONS --cubical --allow-unsolved-metas #-}

module Verification.Core.Type.Instance.Nat where

open import Verification.Conventions
open import Verification.Core.Order.Lattice
open import Verification.Core.Order.Preorder
open import Verification.Core.Order.Partialorder
open import Verification.Core.Order.Instance.Level

split-‚Ñï : (n : ‚Ñï) -> (n ‚â° 0) +-ùí∞ (‚àë Œª m -> n ‚â° suc m)
split-‚Ñï zero = left refl
split-‚Ñï (suc n) = right (n , refl)

max-‚Ñï : (m n : ‚Ñï) -> ‚Ñï
max-‚Ñï zero n = n
max-‚Ñï (suc m) zero = suc m
max-‚Ñï (suc m) (suc n) = suc (max-‚Ñï m n)


-- Preorder:‚Ñï : Preorder ‚ä•
-- ‚ü® Preorder:‚Ñï ‚ü© = ‚Ñï
-- IPreorder._‚â§_ (of Preorder:‚Ñï) = _‚â§-‚Ñï_
-- IPreorder.refl-‚â§ (of Preorder:‚Ñï) = ‚â§-‚Ñï-refl
-- IPreorder.trans-‚â§ (of Preorder:‚Ñï) = ‚â§-‚Ñï-trans

-- instance IPreorder:‚Ñï = #openstruct Preorder:‚Ñï


