
{-# OPTIONS --cubical --allow-unsolved-metas #-}

module Verification.Core.Order.Lattice where

open import Verification.Conventions
open import Verification.Core.Category.Definition
open import Verification.Core.Category.Instance.Set.Definition
open import Verification.Core.Order.Partialorder
open import Verification.Core.Order.Preorder


record has‚ä•-Preorder (A : ùí∞ ùëñ) {{_ : IPreorder A}} : ùí∞ ùëñ where
-- record has‚ä•-Preorder (A : Preorder ùëñ) : ùí∞ ùëñ where
  field ‚ä• : A
        initial-‚ä• : ‚àÄ(a : A) -> ‚ä• ‚â§ a

open has‚ä•-Preorder {{...}} public

record has‚à®-Preorder (A : ùí∞ ùëñ) {{_ : IPreorder A}} : ùí∞ ùëñ where
  field _‚à®_ : A -> A -> A
        Œπ‚ÇÄ-‚à® : {a b : A} -> a ‚â§ a ‚à® b
        Œπ‚ÇÅ-‚à® : {a b : A} -> b ‚â§ a ‚à® b
        [_,_]-‚à® : {a b c : A} -> a ‚â§ c -> b ‚â§ c -> a ‚à® b ‚â§ c

  infixl 60 _‚à®_

open has‚à®-Preorder {{...}} public

module _ {A : ùí∞ ùëñ} {{_ : IPreorder A}} {{_ : has‚ä•-Preorder A}} {{_ : has‚à®-Preorder A}} where
  ‚ãÅ : Vec A n -> A
  ‚ãÅ [] = ‚ä•
  ‚ãÅ (a ‚à∑ as) = a ‚à® (‚ãÅ as)


-- record IJoinLattice (A : ùí∞ ùëñ) : ùí∞ (ùëñ ‚Å∫) where
--   field {{Impl}} : IPartialorder A
--         _‚à®_ : A -> A -> A
--         Œπ‚ÇÄ-‚à® : {a b : A} -> a ‚â§ a ‚à® b
--         Œπ‚ÇÅ-‚à® : {a b : A} -> b ‚â§ a ‚à® b
--         ‚ä• : A
--         initial-‚ä• : ‚àÄ{a : A} -> ‚ä• ‚â§ a

--   infixl 60 _‚à®_

-- unquoteDecl JoinLattice joinLattice = #struct "JLat" (quote IJoinLattice) "A" JoinLattice joinLattice

-- open IJoinLattice {{...}} public

-- instance
--   IJoinLattice:‚ä§ : IJoinLattice (Lift {j = ùëñ} ùüô-ùí∞)
--   IJoinLattice.Impl IJoinLattice:‚ä§ = IPartialorder:‚ä§
--   IJoinLattice._‚à®_ IJoinLattice:‚ä§ = Œª _ _ -> ‚Ü• tt
--   IJoinLattice.Œπ‚ÇÄ-‚à® IJoinLattice:‚ä§ = ‚Ü• tt
--   IJoinLattice.Œπ‚ÇÅ-‚à® IJoinLattice:‚ä§ = ‚Ü• tt
--   IJoinLattice.‚ä• IJoinLattice:‚ä§ = ‚Ü• tt
--   IJoinLattice.initial-‚ä• IJoinLattice:‚ä§ = ‚Ü• tt





