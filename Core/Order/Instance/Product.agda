
module Verification.Core.Order.Instance.Product where

open import Verification.Conventions
open import Verification.Core.Category.Definition
open import Verification.Core.Category.Instance.Set.Definition
open import Verification.Core.Order.Lattice
open import Verification.Core.Order.Partialorder
open import Verification.Core.Order.Preorder

module _ {A : ùí∞ ùëñ} {B : ùí∞ ùëó} {{#A : IPreorder A}} {{#B : IPreorder B}} where
-- module _ {A : Preorder ùëñ} {B : Preorder ùëó} where
  instance
    IPreorder:√ó : IPreorder (A √ó-ùí∞ B)
    IPreorder._‚â§_ IPreorder:√ó (a1 , b1) (a2 , b2) = (a1 ‚â§ a2) √ó-ùí∞ (b1 ‚â§ b2)
    IPreorder.refl-‚â§ IPreorder:√ó {a = (a , b)} = (refl-‚â§ {a = a} , refl-‚â§ {a = b})
    IPreorder.trans-‚â§ IPreorder:√ó (p1 , p2) (q1 , q2) = (trans-‚â§ {{#A}} p1 q1 , trans-‚â§ {{#B}} p2 q2)



module _ (A : Partialorder ùëñ) (B : Partialorder ùëó) where
  Partialorder:√ó : Partialorder (ùëñ ÔΩ§ ùëó)
  ‚ü® Partialorder:√ó ‚ü© = ‚ü® A ‚ü© √ó-ùí∞ ‚ü® B ‚ü©
  IPartialorder.Impl (of Partialorder:√ó) = IPreorder:√ó -- (‚åò ‚ü® A ‚ü©) (‚åò ‚ü® B ‚ü©)
  IPartialorder.antisym-‚â§ (of Partialorder:√ó) p q = Œª i -> (antisym-‚â§ {{of A}} (p .fst) (q .fst) i , antisym-‚â§ {{of B}} (p .snd) (q .snd) i)



module _ {A B : ùí∞ ùëñ} {{_ : IPreorder A}} {{_ : IPreorder B}} where
  module _ {{_ : has‚à®-Preorder A}} {{_ : has‚à®-Preorder B}} where
    instance
      has‚à®-Preorder:√ó : has‚à®-Preorder (A √ó-ùí∞ B)
      has‚à®-Preorder._‚à®_ has‚à®-Preorder:√ó (a1 , a2) (b1 , b2) = (a1 ‚à® b1 , a2 ‚à® b2)
      has‚à®-Preorder.Œπ‚ÇÄ-‚à® has‚à®-Preorder:√ó = (Œπ‚ÇÄ-‚à® , Œπ‚ÇÄ-‚à®)
      has‚à®-Preorder.Œπ‚ÇÅ-‚à® has‚à®-Preorder:√ó = (Œπ‚ÇÅ-‚à® , Œπ‚ÇÅ-‚à®)
      has‚à®-Preorder.[_,_]-‚à® has‚à®-Preorder:√ó = {!!}

  module _ {{_ : has‚ä•-Preorder A}} {{_ : has‚ä•-Preorder B}} where
    instance
      has‚ä•-Preorder:√ó : has‚ä•-Preorder (A √ó-ùí∞ B)
      has‚ä•-Preorder.‚ä• has‚ä•-Preorder:√ó         = (‚ä• , ‚ä•)
      has‚ä•-Preorder.initial-‚ä• has‚ä•-Preorder:√ó _ = (initial-‚ä• _ , initial-‚ä• _)
-- module _ (A : JoinLattice ùëñ) (B : JoinLattice ùëó) where
--   JoinLattice:√ó : JoinLattice (ùëñ ÔΩ§ ùëó)
--   ‚ü® JoinLattice:√ó ‚ü© = ‚ü® A ‚ü© √ó-ùí∞ ‚ü® B ‚ü©
--   IJoinLattice.Impl (of JoinLattice:√ó) = of Partialorder:√ó (` ‚ü® A ‚ü© `) (` ‚ü® B ‚ü© `)
--   IJoinLattice._‚à®_ (of JoinLattice:√ó) (a1 , a2) (b1 , b2) = (a1 ‚à® b1 , a2 ‚à® b2)
--   IJoinLattice.Œπ‚ÇÄ-‚à® (of JoinLattice:√ó) = (Œπ‚ÇÄ-‚à® , Œπ‚ÇÄ-‚à®)
--   IJoinLattice.Œπ‚ÇÅ-‚à® (of JoinLattice:√ó) = (Œπ‚ÇÅ-‚à® , Œπ‚ÇÅ-‚à®)
--   IJoinLattice.‚ä• (of JoinLattice:√ó)         = (‚ä• , ‚ä•)
--   IJoinLattice.initial-‚ä• (of JoinLattice:√ó) = (initial-‚ä• , initial-‚ä•)


-- module _ {A : ùí∞ ùëñ} {{#A : IPreorder A}} where
--   instance
--     IPreorder:Exp : IPreorder (A ^ n)
--     IPreorder:Exp {n = zero} = IPreorder:‚ä§
--     IPreorder:Exp {n = suc zero} = #A
--     IPreorder:Exp {n = suc (suc n)} = IPreorder:√ó
    -- ` A ` (‚åò_ (A ^ suc n) {{IPreorder:Exp {n = suc n}}})


-- module _ {A : ùí∞ ùëñ} {{#A : IPartialorder A}} where
--   instance
--     IPartialorder:Exp : IPartialorder (A ^ n)
--     IPartialorder:Exp {n = zero} = IPartialorder:‚ä§
--     IPartialorder:Exp {n = suc zero} = #A
--     IPartialorder:Exp {n = suc (suc n)} = of Partialorder:√ó ` A ` (‚åò_ (A ^ suc n) {{IPartialorder:Exp {n = suc n}}})

-- module _ {A : ùí∞ ùëñ} {{#A : IJoinLattice A}} where
--   instance
--     IJoinLattice:Exp : IJoinLattice (A ^ (suc (suc n)))
--     IJoinLattice:Exp {n = zero}= of JoinLattice:√ó ` A ` ` A `
--     IJoinLattice:Exp {n = suc n}= of JoinLattice:√ó ` A ` (‚åò_ (A ^ (suc (suc n))) {{IJoinLattice:Exp}})
    -- IJoinLattice:Exp {n = zero} = IJoinLattice:‚ä§
    -- IJoinLattice:Exp {n = suc zero} = #A
    -- IJoinLattice:Exp {n = suc (suc n)} = of JoinLattice:√ó ` A ` (‚åò_ (A ^ suc n) {{IJoinLattice:Exp {n = suc n}}})


