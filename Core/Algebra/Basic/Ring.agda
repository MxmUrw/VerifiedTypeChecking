

{-# OPTIONS --cubical --allow-unsolved-metas #-}

module Verification.Core.Algebra.Basic.Ring where

open import Verification.Conventions
open import Verification.Core.Category.Definition
open import Verification.Core.Algebra.Basic.Monoid
open import Verification.Core.Algebra.Basic.Abelian


-- ===* Rings
-- | We define rings as sets with compatible abelian and monoid structures.

-- [Hide]

record IRing (R : ùí∞ ùëñ) : ùí∞ ùëñ where
  field {{Multiplicative}} : IMonoid R
        {{Additive}} : IAbelian R
unquoteDecl Ring ring = #struct "Ring" (quote IRing) "R" Ring ring

record IRingHom (R : Ring ùëñ) (S : Ring ùëó) (f : ‚ü® R ‚ü© -> ‚ü® S ‚ü©) : ùí∞ (ùëñ ‚äî ùëó) where

unquoteDecl RingHom ringhom = #struct "RingHom" (quote IRingHom) "f" RingHom ringhom

instance
  isCategory:Ring : isCategory (Ring ùëñ) (ùëñ , ùëñ)
  isCategory.Hom isCategory:Ring = RingHom
  isCategory._‚â£_ isCategory:Ring = {!!}
  isCategory.isEquivRel:‚â£ isCategory:Ring = {!!}
  isCategory.id isCategory:Ring = {!!}
  isCategory._‚óÜ_ isCategory:Ring = {!!}
  isCategory._‚óà_ isCategory:Ring = {!!}
  isCategory.unit-l-‚óÜ isCategory:Ring = {!!}
  isCategory.unit-r-‚óÜ isCategory:Ring = {!!}
  isCategory.unit-2-‚óÜ isCategory:Ring = {!!}
  isCategory.assoc-l-‚óÜ isCategory:Ring = {!!}
  isCategory.assoc-r-‚óÜ isCategory:Ring = {!!}


instance
  IAbelianHom:scale : {R : ùí∞ ùëñ} {{_ : IRing R}} -> ‚àÄ{r : R} -> IAbelianHom (‚Ä≤ R ‚Ä≤) (‚Ä≤ R ‚Ä≤) (r ‚ãÖ_)
  unwrap IAbelianHom:scale = record {}

AbelianHom:scale : {R : Ring ùëñ} -> ‚àÄ(r : ‚ü® R ‚ü©) -> AbelianHom (‚Ä≤ ‚ü® R ‚ü© ‚Ä≤) (‚Ä≤ ‚ü® R ‚ü© ‚Ä≤)
‚ü® AbelianHom:scale r ‚ü© = r ‚ãÖ_
(of (AbelianHom:scale r)) = IAbelianHom:scale


-- //

