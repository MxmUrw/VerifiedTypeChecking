

{-# OPTIONS --cubical --allow-unsolved-metas #-}

module Verification.Core.Algebra.Basic.Ring where

open import Verification.Conventions
open import Verification.Core.Category.Definition
open import Verification.Core.Algebra.Basic.Monoid
open import Verification.Core.Algebra.Basic.Abelian


-- ===* Rings
-- | We define rings as sets with compatible abelian and monoid structures.

-- [Hide]

record IRing (R : ùí∞ ùëñ) : ùí∞ ùëñ where
  field {{Multiplicative}} : IMonoid R
        {{Additive}} : IAbelian R
unquoteDecl Ring ring = #struct "Ring" (quote IRing) "R" Ring ring

record IRingHom (R : Ring ùëñ) (S : Ring ùëó) (f : ‚ü® R ‚ü© -> ‚ü® S ‚ü©) : ùí∞ (ùëñ ‚äî ùëó) where

unquoteDecl RingHom ringhom = #struct "RingHom" (quote IRingHom) "f" RingHom ringhom

instance
  ICategory:Ring : ICategory (Ring ùëñ) (ùëñ , ùëñ)
  ICategory.Hom ICategory:Ring = RingHom
  ICategory._‚â£_ ICategory:Ring = {!!}
  ICategory.IEquiv:‚â£ ICategory:Ring = {!!}
  ICategory.id ICategory:Ring = {!!}
  ICategory._‚óÜ_ ICategory:Ring = {!!}
  ICategory._‚óà_ ICategory:Ring = {!!}
  ICategory.unit-l-‚óÜ ICategory:Ring = {!!}
  ICategory.unit-r-‚óÜ ICategory:Ring = {!!}
  ICategory.unit-2-‚óÜ ICategory:Ring = {!!}
  ICategory.assoc-l-‚óÜ ICategory:Ring = {!!}
  ICategory.assoc-r-‚óÜ ICategory:Ring = {!!}


instance
  IAbelianHom:scale : {R : ùí∞ ùëñ} {{_ : IRing R}} -> ‚àÄ{r : R} -> IAbelianHom (‚åò R) (‚åò R) (r ‚ãÖ_)
  unwrap IAbelianHom:scale = record {}

AbelianHom:scale : {R : Ring ùëñ} -> ‚àÄ(r : ‚ü® R ‚ü©) -> AbelianHom (‚åò ‚ü® R ‚ü©) (‚åò ‚ü® R ‚ü©)
‚ü® AbelianHom:scale r ‚ü© = r ‚ãÖ_
(of (AbelianHom:scale r)) = IAbelianHom:scale


-- //

