
module Verification.Core.Category.Natural where

open import Verification.Conventions
open import Verification.Core.Category.Definition
open import Verification.Core.Category.Instance.Type
open import Verification.Core.Category.Instance.Functor
open import Verification.Core.Category.Instance.Cat

private
  infixl 80 _‚óá_
  _‚óá_ = comp-Cat


-- % https://q.uiver.app/?q=WzAsNCxbMCwwLCIoRkcpWCJdLFswLDIsIkZYIl0sWzIsMCwiKFVGRylYIl0sWzIsMiwiKFVGKVgiXSxbMCwyLCJcXGJldGFfe0dYfSJdLFswLDEsIlxcYWxwaGFfWCIsMl0sWzIsMywiVVxcYWxwaGFfeCJdLFsxLDMsIlxcYmV0YV9YIiwyXV0=
-- | We want the following:
-- \[\begin{tikzcd}
-- 	{(FG)X} && {(UFG)X} \\
-- 	\\
-- 	FX && {(UF)X}
-- 	\arrow["{\beta_{GX}}", from=1-1, to=1-3]
-- 	\arrow["{\alpha_X}"', from=1-1, to=3-1]
-- 	\arrow["{U\alpha_x}", from=1-3, to=3-3]
-- 	\arrow["{\beta_X}"', from=3-1, to=3-3]
-- \end{tikzcd}\]

module _ {ùíû ùíü : Category ùëñ} where
  module _ {F : Functor ùíû ùíü} {G : Functor ùíû ùíû} {U : Functor ùíü ùíü} where
    commutes-Nat : (Œ± : G ‚óá F ‚ü∂ F) -> (Œ≤ : F ‚ü∂ F ‚óá U) -> ùí∞ _
    commutes-Nat Œ± Œ≤ = ‚àÄ{x} -> ‚ü® Œ≤ ‚ü© ‚óÜ map ‚ü® Œ± ‚ü© ‚â£ ‚ü® Œ± ‚ü© {x} ‚óÜ ‚ü® Œ≤ ‚ü©




