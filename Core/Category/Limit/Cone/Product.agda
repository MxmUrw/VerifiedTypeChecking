
{-# OPTIONS --cubical --allow-unsolved-metas #-}

module Verification.Core.Category.Limit.Product where

open import Verification.Conventions
open import Verification.Core.Category.Definition
open import Verification.Core.Category.Instance.Cat
open import Verification.Core.Category.Quiver
open import Verification.Core.Category.FreeCategory
open import Verification.Core.Category.Adjunction
open import Verification.Core.Category.Limit.Definition



hasProducts : (X : ùí∞ ùëñ) {{#X : ICategory X ùëó}} -> ùí∞ (ùëñ ‚Å∫ ÔΩ§ ùëó ‚Å∫)
hasProducts X = has(‚åò ùüö)ShapedLimits X

_√ó_ : {X : ùí∞ (ùëñ)} {{_ : ICategory X ùëó}} {{_ : hasProducts X}} (a b : X) -> X
_√ó_ {ùëñ = ùëñ} {ùëó = ùëó} a b = ‚ü® ‚ü® lim (free-Diagram (quiverHom (Œª {‚ÇÄ -> a ; ‚ÇÅ -> b}))) ‚ü© ‚ü©

Shape = SmallCategory
Shape:ùüö : Shape
Shape:ùüö = category ùüö

-- TODO: Resolve: why do I need to do the following?
-- instance
-- ICone:FromLimit : {X : ùí∞ (ùëñ)} {{_ : ICategory X ùëó}} {{_ : hasProducts X}} -> {d : Diagram Shape:ùüö (category X)} -> ICone d (‚ü® ‚ü® lim d ‚ü© ‚ü©)
-- ICone:FromLimit {d = d} = of ‚ü® lim d ‚ü©

-- instance
--   limi : ‚àÄ{S : SmallCategory} {X : ùí∞ ùëñ} {ùëó} {{_ : ICategory X ùëó}} {D : Diagram S (category X)} -> {{_ : has(S)ShapedLimits X}} -> Cone D
--   limi {D = D} = ‚ü® lim D ‚ü©

œÄ‚ÇÄ : {X : ùí∞ (ùëñ)} {{_ : ICategory X ùëó}} {{_ : hasProducts X}} {a b : X} -> Hom (a √ó b) a
œÄ‚ÇÄ = ‚ñ≤ {{of ‚ü® lim _ ‚ü©}}

œÄ‚ÇÅ : {X : ùí∞ (ùëñ)} {{_ : ICategory X ùëó}} {{_ : hasProducts X}} {a b : X} -> Hom (a √ó b) b
œÄ‚ÇÅ = ‚ñ≤ {{of ‚ü® lim _ ‚ü©}}



