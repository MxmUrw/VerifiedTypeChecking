
module Verification.Core.Category.Limit.Specific.Coproduct where

open import Verification.Conventions
open import Verification.Core.Category.Definition
open import Verification.Core.Category.Instance.Cat.Products



module _ {X : ùí∞ ùëñ} {{_ : isCategory X ùëó}} where
  record isCoproduct (a b x : X) : ùí∞ (ùëñ ÔΩ§ ùëó) where
    field Œπ‚ÇÄ : a ‚ü∂ x
          Œπ‚ÇÅ : b ‚ü∂ x
          [_,_] : {c : X} -> (f : a ‚ü∂ c) (g : b ‚ü∂ c) -> (x ‚ü∂ c)
          reduce-+-‚ÇÄ : ‚àÄ{c : X} -> {f : a ‚ü∂ c} -> {g : b ‚ü∂ c} -> Œπ‚ÇÄ ‚óÜ [ f , g ] ‚â£ f
          reduce-+-‚ÇÅ : ‚àÄ{c : X} -> {f : a ‚ü∂ c} -> {g : b ‚ü∂ c} -> Œπ‚ÇÅ ‚óÜ [ f , g ] ‚â£ g
          expand-+   : ‚àÄ{c : X} -> {f : x ‚ü∂ c} -> f ‚â£ [ Œπ‚ÇÄ ‚óÜ f , Œπ‚ÇÅ ‚óÜ f ]

  open isCoproduct {{...}} public
unquoteDecl hasCoproduct hascoproduct = #struct "isCoprod" (quote isCoproduct) "x" hasCoproduct hascoproduct

record hasCoproducts (ùíû : Category ùëñ) : ùí∞ ùëñ where
  field _+_ : (a b : ‚ü® ùíû ‚ü©) -> ‚ü® ùíû ‚ü©
        {{isCoproduct:+}} : ‚àÄ{a b} -> isCoproduct a b (a + b)
  infixl 100 _+_
open hasCoproducts {{...}} public

module _ {ùíû : Category ùëñ} {{P : hasCoproducts ùíû}} where
  Functor:+ : Functor (ùíû √ó-Cat ùíû) ùíû
  ‚ü® Functor:+ ‚ü© (a , b) = a + b
  IFunctor.map (of Functor:+) (f , g) = [ f ‚óÜ Œπ‚ÇÄ , g ‚óÜ Œπ‚ÇÅ ]
  IFunctor.functoriality-id (of Functor:+) = {!!}
  IFunctor.functoriality-‚óÜ (of Functor:+) = {!!}
  IFunctor.functoriality-‚â£ (of Functor:+) = {!!}

  map-+-r : ‚àÄ{a b c : ‚ü® ùíû ‚ü©} -> (f : a ‚ü∂ b) -> (c + a) ‚ü∂ (c + b)
  map-+-r f = map {{of Functor:+}} (id , f)




