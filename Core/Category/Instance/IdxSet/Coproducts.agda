
module Verification.Core.Category.Instance.IdxSet.Coproducts where

open import Verification.Conventions
open import Verification.Core.Category.Definition
open import Verification.Core.Category.Instance.Functor
open import Verification.Core.Category.Functor.Adjunction
open import Verification.Core.Category.Limit.Specific
-- open import Verification.Core.Category.Limit.Kan.Definition
open import Verification.Core.Category.Limit.Kan.Terminal
-- open import Verification.Core.Category.Limit.Kan.Equalizer
-- open import Verification.Core.Category.Limit.Kan.Product
-- open import Verification.Core.Category.Limit.Definition
-- open import Verification.Core.Category.Limit.Product
-- open import Verification.Core.Category.Limit.Equalizer
-- open import Verification.Core.Category.Monad
open import Verification.Core.Category.Instance.SmallCategories
open import Verification.Core.Category.Instance.Cat
open import Verification.Core.Category.FreeCategory
open import Verification.Core.Category.Quiver
open import Verification.Core.Category.Instance.Set.Definition
open import Verification.Core.Category.Lift
open import Verification.Core.Homotopy.Level

open import Verification.Core.Category.Instance.IdxSet.Definition

module _ {K : ùí∞ ùëò} where
  _+-IdxSet_ : IdxSet K ùëñ -> IdxSet K ùëñ -> IdxSet K (ùëñ)
  ‚ü® A +-IdxSet B ‚ü© k = ‚ü® A ‚ü© k +-ùí∞ ‚ü® B ‚ü© k
  IIdxSet.ISet:this (of (A +-IdxSet B)) = {!!}




--------------------------------------------------------------------
-- IdxSet has coproducts

  -- private
  --   P : Functor `(`ùüö` ‚ü∂ (` IdxSet K ùëñ `))` (` ùüô ‚ü∂ (` IdxSet K ùëñ `)`)
  --   ‚ü® P ‚ü© D = Diagram-ùüô (‚ü® D ‚ü© (‚Ü• ‚ÇÄ) +-IdxSet ‚ü® D ‚ü© (‚Ü• ‚ÇÅ))
  --   IFunctor.map (of P) = {!!}
  --   IFunctor.functoriality-id (of P) = {!!}
  --   IFunctor.functoriality-‚óÜ (of P) = {!!}
  --   IFunctor.functoriality-‚â£ (of P) = {!!}
  -- [_,_]-IdxSet : ‚àÄ{A B C : IdxSet K ùëñ} -> (f : A ‚ü∂ C) -> (g : B ‚ü∂ C) -> (A +-IdxSet B) ‚ü∂ C
  -- ‚ü® [ f , g ]-IdxSet ‚ü© (left x) = ‚ü® f ‚ü© x
  -- ‚ü® [ f , g ]-IdxSet ‚ü© (just x) = ‚ü® g ‚ü© x

  [,]-IdxSet : ‚àÄ(A B C : IdxSet K ùëñ) -> (f : A ‚ü∂ C) -> (g : B ‚ü∂ C) -> (A +-IdxSet B) ‚ü∂ C
  ‚ü® [,]-IdxSet A B C f g ‚ü© (left x) = ‚ü® f ‚ü© x
  ‚ü® [,]-IdxSet A B C f g ‚ü© (just x) = ‚ü® g ‚ü© x
  -- ‚ü® [ f , g ]-IdxSet ‚ü© (left x) = ‚ü® f ‚ü© x
  -- ‚ü® [ f , g ]-IdxSet ‚ü© (just x) = ‚ü® g ‚ü© x

  instance
    hasCoproducts:IdxSet : hasCoproducts (` IdxSet K ùëñ `)
    hasCoproducts._+_ hasCoproducts:IdxSet = _+-IdxSet_
    ‚ü® isCoproduct.Œπ‚ÇÄ (hasCoproducts.isCoproduct:+ hasCoproducts:IdxSet) ‚ü© = left
    ‚ü® isCoproduct.Œπ‚ÇÅ (hasCoproducts.isCoproduct:+ hasCoproducts:IdxSet) ‚ü© = right
    isCoproduct.[ hasCoproducts.isCoproduct:+ hasCoproducts:IdxSet , f ] g = [,]-IdxSet _ _ _ f g
    -- ‚ü® isCoproduct.[ hasCoproducts.isCoproduct:+ hasCoproducts:IdxSet , f ] g ‚ü© (just x) = ‚ü® g ‚ü© x
    isCoproduct.reduce-+-‚ÇÄ (hasCoproducts.isCoproduct:+ hasCoproducts:IdxSet) = {!!}
    isCoproduct.reduce-+-‚ÇÅ (hasCoproducts.isCoproduct:+ hasCoproducts:IdxSet) = {!!}
    isCoproduct.expand-+ (hasCoproducts.isCoproduct:+ hasCoproducts:IdxSet) = {!!}
    -- ‚ü® hasCoproducts:IdxSet ‚ü© = P
    -- IAdjoint.embed (of hasCoproducts:IdxSet) = {!!}
    -- IAdjoint.eval (of hasCoproducts:IdxSet) = {!!}
    -- IAdjoint.reduce-Adj-Œ≤ (of hasCoproducts:IdxSet) = {!!}
    -- IAdjoint.reduce-Adj-Œ∑ (of hasCoproducts:IdxSet) = {!!}

