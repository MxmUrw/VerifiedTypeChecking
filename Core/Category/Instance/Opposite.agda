
module Verification.Core.Category.Instance.Opposite where

open import Verification.Conventions
open import Verification.Core.Category.Definition

-- | For a more general kind of example, consider an arbitrary category |­Юњъ|.
--   Then we can construct another category |­Юњъ рхњрхќ| which has the same objects
--   as |­Юњъ|, but where the direction of all arrows is reversed.

-- [Definition]
-- | There is a function [..], mapping a category to its opposite. It is defined as:
_рхњрхќ : Category ­ЮЉќ -> Category ­ЮЉќ
РЪе ­Юњъ рхњрхќ РЪЕ                         = РЪе ­Юњъ РЪЕ
isCategory.Hom (of ­Юњъ рхњрхќ) a b  = Hom {{of ­Юњъ}} b a

-- |> All equations for |­Юњъ рхњрхќ| can be proven by simply using their symmetric counterpart in $­Юњъ$.
isCategory._РЅБ_        (of ­Юњъ рхњрхќ)  = _РЅБ_
isCategory.isEquivRel:РЅБ   (of ­Юњъ рхњрхќ)  = isEquivRel:РЅБ
isCategory.id         (of ­Юњъ рхњрхќ)  = id
isCategory._РЌє_        (of ­Юњъ рхњрхќ)  = ╬╗ f g -> g РЌє f
isCategory._РЌѕ_        (of ­Юњъ рхњрхќ)  = ╬╗ p q -> q РЌѕ p
isCategory.unit-l-РЌє   (of ­Юњъ рхњрхќ)  = unit-r-РЌє
isCategory.unit-r-РЌє   (of ­Юњъ рхњрхќ)  = unit-l-РЌє
isCategory.unit-2-РЌє   (of ­Юњъ рхњрхќ)  = unit-2-РЌє
isCategory.assoc-l-РЌє  (of ­Юњъ рхњрхќ)  = assoc-r-РЌє
isCategory.assoc-r-РЌє  (of ­Юњъ рхњрхќ)  = assoc-l-РЌє
-- //
